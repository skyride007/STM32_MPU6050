
Discovery_MPU_6050_DATALOGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c690  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800c820  0800c820  0001c820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbbc  0800cbbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbc4  0800cbc4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbc4  0800cbc4  0001cbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbc8  0800cbc8  0001cbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cbcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000159c  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001790  20001790  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001850f  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e05  00000000  00000000  00038776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001400  00000000  00000000  0003c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f64  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024fa5  00000000  00000000  0003e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b4cf  00000000  00000000  00063889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf20a  00000000  00000000  0007ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064d8  00000000  00000000  0014df64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015443c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c808 	.word	0x0800c808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c808 	.word	0x0800c808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MPU6050_Init>:
int16_t gyro_data[3];

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af04      	add	r7, sp, #16
  uint8_t data;

  // Wake up MPU6050
  data = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	226b      	movs	r2, #107	; 0x6b
 8000f60:	2168      	movs	r1, #104	; 0x68
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MPU6050_Init+0x2c>)
 8000f64:	f002 fed8 	bl	8003d18 <HAL_I2C_Mem_Write>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000224 	.word	0x20000224

08000f74 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t* accel_data)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2306      	movs	r3, #6
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	223b      	movs	r2, #59	; 0x3b
 8000f90:	2168      	movs	r1, #104	; 0x68
 8000f92:	4831      	ldr	r0, [pc, #196]	; (8001058 <MPU6050_Read_Accel+0xe4>)
 8000f94:	f002 ffba 	bl	8003f0c <HAL_I2C_Mem_Read>

  accel_data[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000f98:	7a3b      	ldrb	r3, [r7, #8]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	7a7b      	ldrb	r3, [r7, #9]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	801a      	strh	r2, [r3, #0]
  accel_data[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 8000faa:	7abb      	ldrb	r3, [r7, #10]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b219      	sxth	r1, r3
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	b212      	sxth	r2, r2
 8000fbc:	801a      	strh	r2, [r3, #0]
  accel_data[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b219      	sxth	r1, r3
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	b212      	sxth	r2, r2
 8000fd0:	801a      	strh	r2, [r3, #0]
       0                ±2g                16384 LSB/g
       1                ±4g                 8192 LSB/g
       2                ±8g                 4096 LSB/g
       3                ±16g                2048 LSB/g */

    Ax = accel_data[0]/2048.0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff faa3 	bl	8000524 <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MPU6050_Read_Accel+0xe8>)
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fdda 	bl	8000ba8 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <MPU6050_Read_Accel+0xec>)
 8000ff8:	6013      	str	r3, [r2, #0]
  	Ay = accel_data[1]/2048.0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa8e 	bl	8000524 <__aeabi_i2d>
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <MPU6050_Read_Accel+0xe8>)
 800100e:	f7ff fc1d 	bl	800084c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fdc5 	bl	8000ba8 <__aeabi_d2f>
 800101e:	4603      	mov	r3, r0
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MPU6050_Read_Accel+0xf0>)
 8001022:	6013      	str	r3, [r2, #0]
  	Az = accel_data[2]/2048.0;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MPU6050_Read_Accel+0xe8>)
 8001038:	f7ff fc08 	bl	800084c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb0 	bl	8000ba8 <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <MPU6050_Read_Accel+0xf4>)
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000224 	.word	0x20000224
 800105c:	40a00000 	.word	0x40a00000
 8001060:	20000218 	.word	0x20000218
 8001064:	2000021c 	.word	0x2000021c
 8001068:	20000220 	.word	0x20000220

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fda6 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f818 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f93e 	bl	80012f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800107c:	f000 f87e 	bl	800117c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001080:	f000 f8aa 	bl	80011d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001084:	f000 f8d8 	bl	8001238 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001088:	f008 fb5a 	bl	8009740 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800108c:	f000 f90a 	bl	80012a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
MPU6050_Init();
 8001090:	f7ff ff58 	bl	8000f44 <MPU6050_Init>
HAL_Delay(1000);
 8001094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001098:	f000 fe04 	bl	8001ca4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Log();
 800109c:	f000 fa68 	bl	8001570 <Log>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010a0:	f008 fb74 	bl	800978c <MX_USB_HOST_Process>
	  Log();
 80010a4:	e7fa      	b.n	800109c <main+0x30>
	...

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f009 fd6a 	bl	800ab90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <SystemClock_Config+0xcc>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <SystemClock_Config+0xd0>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001118:	2308      	movs	r3, #8
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800111c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001126:	2307      	movs	r3, #7
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	4618      	mov	r0, r3
 8001130:	f004 f90e 	bl	8005350 <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800113a:	f000 fa85 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2105      	movs	r1, #5
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fb6f 	bl	8005840 <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001168:	f000 fa6e 	bl	8001648 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	3750      	adds	r7, #80	; 0x50
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MX_I2C1_Init+0x58>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001188:	f242 7210 	movw	r2, #10000	; 0x2710
 800118c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_I2C1_Init+0x54>)
 800119c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_I2C1_Init+0x54>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2C1_Init+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_I2C1_Init+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2C1_Init+0x54>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_I2C1_Init+0x54>)
 80011bc:	f002 fc68 	bl	8003a90 <HAL_I2C_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80011c6:	f000 fa3f 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000224 	.word	0x20000224
 80011d4:	40005400 	.word	0x40005400

080011d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_I2S3_Init+0x54>)
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <MX_I2S3_Init+0x58>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2S3_Init+0x54>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_I2S3_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2S3_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_I2S3_Init+0x54>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_I2S3_Init+0x54>)
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <MX_I2S3_Init+0x5c>)
 8001202:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2S3_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_I2S3_Init+0x54>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2S3_Init+0x54>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2S3_Init+0x54>)
 8001218:	f003 fbfa 	bl	8004a10 <HAL_I2S_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001222:	f000 fa11 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000278 	.word	0x20000278
 8001230:	40003c00 	.word	0x40003c00
 8001234:	00017700 	.word	0x00017700

08001238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_SPI1_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_SPI1_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI1_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI1_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_SPI1_Init+0x64>)
 800128a:	f004 fe39 	bl	8005f00 <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001294:	f000 f9d8 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200002c0 	.word	0x200002c0
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART2_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f004 fe99 	bl	8006012 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f9af 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000318 	.word	0x20000318
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b72      	ldr	r3, [pc, #456]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a71      	ldr	r2, [pc, #452]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a63      	ldr	r2, [pc, #396]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <MX_GPIO_Init+0x1e4>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <MX_GPIO_Init+0x1e4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <MX_GPIO_Init+0x1e4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2108      	movs	r1, #8
 80013ba:	4849      	ldr	r0, [pc, #292]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80013bc:	f000 ff44 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2101      	movs	r1, #1
 80013c4:	4847      	ldr	r0, [pc, #284]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 80013c6:	f000 ff3f 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013ca:	2200      	movs	r2, #0
 80013cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013d0:	4845      	ldr	r0, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 80013d2:	f000 ff39 	bl	8002248 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013d6:	2308      	movs	r3, #8
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	483c      	ldr	r0, [pc, #240]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80013ee:	f000 fd8f 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4836      	ldr	r0, [pc, #216]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 800140a:	f000 fd81 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800140e:	2308      	movs	r3, #8
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800141e:	2305      	movs	r3, #5
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	482e      	ldr	r0, [pc, #184]	; (80014e4 <MX_GPIO_Init+0x1ec>)
 800142a:	f000 fd71 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001432:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <MX_GPIO_Init+0x1f4>)
 8001444:	f000 fd64 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001448:	2304      	movs	r3, #4
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4825      	ldr	r0, [pc, #148]	; (80014f0 <MX_GPIO_Init+0x1f8>)
 800145c:	f000 fd58 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001472:	2305      	movs	r3, #5
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_GPIO_Init+0x1f8>)
 800147e:	f000 fd47 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001482:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001486:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 800149c:	f000 fd38 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014a0:	2320      	movs	r3, #32
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x1f0>)
 80014b4:	f000 fd2c 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <MX_GPIO_Init+0x1e8>)
 80014ce:	f000 fd1f 	bl	8001f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400

080014f4 <fill_mpu_buffer>:

/* USER CODE BEGIN 4 */
void fill_mpu_buffer() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e025      	b.n	800154c <fill_mpu_buffer+0x58>
		MPU6050_Read_Accel(accel_data);
 8001500:	4816      	ldr	r0, [pc, #88]	; (800155c <fill_mpu_buffer+0x68>)
 8001502:	f7ff fd37 	bl	8000f74 <MPU6050_Read_Accel>
		mpu_buffer[AXIS_NUMBER * i] = Ax;
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <fill_mpu_buffer+0x6c>)
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	4914      	ldr	r1, [pc, #80]	; (8001564 <fill_mpu_buffer+0x70>)
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 1] = Ay;
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	3301      	adds	r3, #1
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <fill_mpu_buffer+0x74>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <fill_mpu_buffer+0x70>)
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i + 2] = Az;
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	3302      	adds	r3, #2
 800153a:	4a0c      	ldr	r2, [pc, #48]	; (800156c <fill_mpu_buffer+0x78>)
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4909      	ldr	r1, [pc, #36]	; (8001564 <fill_mpu_buffer+0x70>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	ddd6      	ble.n	8001500 <fill_mpu_buffer+0xc>
	}
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000210 	.word	0x20000210
 8001560:	20000218 	.word	0x20000218
 8001564:	2000035c 	.word	0x2000035c
 8001568:	2000021c 	.word	0x2000021c
 800156c:	20000220 	.word	0x20000220

08001570 <Log>:

void Log() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	fill_mpu_buffer();
 8001576:	f7ff ffbd 	bl	80014f4 <fill_mpu_buffer>
	for (int i = 0; i < DATA_INPUT_USER; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e03d      	b.n	80015fc <Log+0x8c>
	{
		printf("%.2f",mpu_buffer[AXIS_NUMBER * i]);
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	4a23      	ldr	r2, [pc, #140]	; (8001618 <Log+0xa8>)
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffd9 	bl	8000548 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4820      	ldr	r0, [pc, #128]	; (800161c <Log+0xac>)
 800159c:	f009 f9aa 	bl	800a8f4 <iprintf>
		printf(" ");
 80015a0:	2020      	movs	r0, #32
 80015a2:	f009 f9b9 	bl	800a918 <putchar>
		printf("%.2f",mpu_buffer[AXIS_NUMBER * i + 1]);
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	3301      	adds	r3, #1
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <Log+0xa8>)
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffc5 	bl	8000548 <__aeabi_f2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <Log+0xac>)
 80015c4:	f009 f996 	bl	800a8f4 <iprintf>
		printf(" ");
 80015c8:	2020      	movs	r0, #32
 80015ca:	f009 f9a5 	bl	800a918 <putchar>
		printf("%.2f",mpu_buffer[AXIS_NUMBER * i + 2]);
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	3302      	adds	r3, #2
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <Log+0xa8>)
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffb1 	bl	8000548 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <Log+0xac>)
 80015ec:	f009 f982 	bl	800a8f4 <iprintf>
		printf(" ");
 80015f0:	2020      	movs	r0, #32
 80015f2:	f009 f991 	bl	800a918 <putchar>
	for (int i = 0; i < DATA_INPUT_USER; i++)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3301      	adds	r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	ddbe      	ble.n	8001580 <Log+0x10>
	}
	printf("\r\n");
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <Log+0xb0>)
 8001604:	f009 f9e4 	bl	800a9d0 <puts>
	HAL_Delay(100);
 8001608:	2064      	movs	r0, #100	; 0x64
 800160a:	f000 fb4b 	bl	8001ca4 <HAL_Delay>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000035c 	.word	0x2000035c
 800161c:	0800c820 	.word	0x0800c820
 8001620:	0800c828 	.word	0x0800c828

08001624 <__io_putchar>:

int __io_putchar(int ch) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800162c:	1d39      	adds	r1, r7, #4
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	2201      	movs	r2, #1
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <__io_putchar+0x20>)
 8001636:	f004 fd39 	bl	80060ac <HAL_UART_Transmit>
  return ch;
 800163a:	687b      	ldr	r3, [r7, #4]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000318 	.word	0x20000318

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	e7fe      	b.n	8001650 <Error_Handler+0x8>
	...

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_MspInit+0x4c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x4c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001692:	2007      	movs	r0, #7
 8001694:	f000 fbfa 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_I2C_MspInit+0x84>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_I2C_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f4:	2304      	movs	r3, #4
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <HAL_I2C_MspInit+0x8c>)
 8001700:	f000 fc06 	bl	8001f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_I2C_MspInit+0x88>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_I2C_MspInit+0x88>)
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_I2C_MspInit+0x88>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40005400 	.word	0x40005400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_I2S_MspInit+0xf0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d15a      	bne.n	800181a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001768:	23c0      	movs	r3, #192	; 0xc0
 800176a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4618      	mov	r0, r3
 8001776:	f004 fa83 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001780:	f7ff ff62 	bl	8001648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_I2S_MspInit+0xf4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017d8:	2310      	movs	r3, #16
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e8:	2306      	movs	r3, #6
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <HAL_I2S_MspInit+0xf8>)
 80017f4:	f000 fb8c 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017f8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800180a:	2306      	movs	r3, #6
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <HAL_I2S_MspInit+0xfc>)
 8001816:	f000 fb7b 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3738      	adds	r7, #56	; 0x38
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40003c00 	.word	0x40003c00
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020800 	.word	0x40020800

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_SPI_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x88>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800188e:	23e0      	movs	r3, #224	; 0xe0
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_SPI_MspInit+0x8c>)
 80018aa:	f000 fb31 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12b      	bne.n	800193e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x88>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_MspInit+0x88>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_UART_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191e:	230c      	movs	r3, #12
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192e:	2307      	movs	r3, #7
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_UART_MspInit+0x8c>)
 800193a:	f000 fae9 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40004400 	.word	0x40004400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f960 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <OTG_FS_IRQHandler+0x10>)
 80019ae:	f000 fecf 	bl	8002750 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20001340 	.word	0x20001340

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d6:	f009 f93d 	bl	800ac54 <__errno>
 80019da:	4603      	mov	r3, r0
 80019dc:	2216      	movs	r2, #22
 80019de:	601a      	str	r2, [r3, #0]
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_exit>:

void _exit (int status)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fe:	e7fe      	b.n	80019fe <_exit+0x12>

08001a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
  }

  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fde5 	bl	8001624 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
  }
  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_isatty>:

int _isatty(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f009 f8a2 	bl	800ac54 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20020000 	.word	0x20020000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	20000f5c 	.word	0x20000f5c
 8001b44:	20001790 	.word	0x20001790

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff ffd7 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f009 f861 	bl	800ac60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fa65 	bl	800106c <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001bb0:	0800cbcc 	.word	0x0800cbcc
  ldr r2, =_sbss
 8001bb4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001bb8:	20001790 	.word	0x20001790

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f94f 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fd2e 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f967 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f92f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000f60 	.word	0x20000f60

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000f60 	.word	0x20000f60

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e16b      	b.n	8002204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 815a 	bne.w	80021fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d005      	beq.n	8001f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d130      	bne.n	8001fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 0201 	and.w	r2, r3, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d017      	beq.n	8002000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d123      	bne.n	8002054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80b4 	beq.w	80021fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_GPIO_Init+0x30c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a5f      	ldr	r2, [pc, #380]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_GPIO_Init+0x30c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b2:	4a5b      	ldr	r2, [pc, #364]	; (8002220 <HAL_GPIO_Init+0x310>)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0x226>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x222>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a50      	ldr	r2, [pc, #320]	; (800222c <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x21e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x21a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_GPIO_Init+0x324>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x216>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_GPIO_Init+0x328>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x212>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_GPIO_Init+0x32c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_GPIO_Init+0x330>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x20a>
 8002116:	2307      	movs	r3, #7
 8002118:	e00e      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211a:	2308      	movs	r3, #8
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800211e:	2306      	movs	r3, #6
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x228>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x228>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	; (8002220 <HAL_GPIO_Init+0x310>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a32      	ldr	r2, [pc, #200]	; (8002244 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_GPIO_Init+0x334>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_GPIO_Init+0x334>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae90 	bls.w	8001f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800227a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227c:	b08f      	sub	sp, #60	; 0x3c
 800227e:	af0a      	add	r7, sp, #40	; 0x28
 8002280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e054      	b.n	8002336 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f007 faa8 	bl	80097fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2203      	movs	r2, #3
 80022b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fad4 	bl	8006878 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	687e      	ldr	r6, [r7, #4]
 80022d8:	466d      	mov	r5, sp
 80022da:	f106 0410 	add.w	r4, r6, #16
 80022de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ee:	1d33      	adds	r3, r6, #4
 80022f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f004 fa4e 	bl	8006794 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 facb 	bl	800689a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	687e      	ldr	r6, [r7, #4]
 800230c:	466d      	mov	r5, sp
 800230e:	f106 0410 	add.w	r4, r6, #16
 8002312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800231e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002322:	1d33      	adds	r3, r6, #4
 8002324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	f004 fc54 	bl	8006bd4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b089      	sub	sp, #36	; 0x24
 8002342:	af04      	add	r7, sp, #16
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	461a      	mov	r2, r3
 800234c:	4603      	mov	r3, r0
 800234e:	70fb      	strb	r3, [r7, #3]
 8002350:	460b      	mov	r3, r1
 8002352:	70bb      	strb	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_HCD_HC_Init+0x28>
 8002362:	2302      	movs	r3, #2
 8002364:	e076      	b.n	8002454 <HAL_HCD_HC_Init+0x116>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	333d      	adds	r3, #61	; 0x3d
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3338      	adds	r3, #56	; 0x38
 800238e:	787a      	ldrb	r2, [r7, #1]
 8002390:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3340      	adds	r3, #64	; 0x40
 80023a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3339      	adds	r3, #57	; 0x39
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	333f      	adds	r3, #63	; 0x3f
 80023c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023d2:	b2d0      	uxtb	r0, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	333a      	adds	r3, #58	; 0x3a
 80023e0:	4602      	mov	r2, r0
 80023e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80023e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da09      	bge.n	8002400 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	333b      	adds	r3, #59	; 0x3b
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e008      	b.n	8002412 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	333b      	adds	r3, #59	; 0x3b
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002424:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	787c      	ldrb	r4, [r7, #1]
 800242c:	78ba      	ldrb	r2, [r7, #2]
 800242e:	78f9      	ldrb	r1, [r7, #3]
 8002430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4623      	mov	r3, r4
 8002442:	f004 fd4d 	bl	8006ee0 <USB_HC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_HCD_HC_Halt+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e00f      	b.n	800249a <HAL_HCD_HC_Halt+0x3e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f004 ff9d 	bl	80073ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	70fb      	strb	r3, [r7, #3]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70bb      	strb	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333b      	adds	r3, #59	; 0x3b
 80024cc:	78ba      	ldrb	r2, [r7, #2]
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	333f      	adds	r3, #63	; 0x3f
 80024de:	787a      	ldrb	r2, [r7, #1]
 80024e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024e2:	7c3b      	ldrb	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3342      	adds	r3, #66	; 0x42
 80024f6:	2203      	movs	r2, #3
 80024f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	333d      	adds	r3, #61	; 0x3d
 8002508:	7f3a      	ldrb	r2, [r7, #28]
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e008      	b.n	8002520 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3342      	adds	r3, #66	; 0x42
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b03      	cmp	r3, #3
 8002524:	f200 80c6 	bhi.w	80026b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	080026a1 	.word	0x080026a1
 8002538:	080025a5 	.word	0x080025a5
 800253c:	08002623 	.word	0x08002623
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002540:	7c3b      	ldrb	r3, [r7, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 80b8 	bne.w	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002548:	78bb      	ldrb	r3, [r7, #2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80b4 	bne.w	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002550:	8b3b      	ldrh	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3355      	adds	r3, #85	; 0x55
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3355      	adds	r3, #85	; 0x55
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3342      	adds	r3, #66	; 0x42
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800258e:	e093      	b.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3342      	adds	r3, #66	; 0x42
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e089      	b.n	80026b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025a4:	78bb      	ldrb	r3, [r7, #2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3355      	adds	r3, #85	; 0x55
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3342      	adds	r3, #66	; 0x42
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025d0:	e073      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3342      	adds	r3, #66	; 0x42
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
      break;
 80025e4:	e069      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3354      	adds	r3, #84	; 0x54
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3342      	adds	r3, #66	; 0x42
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
      break;
 800260c:	e055      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3342      	adds	r3, #66	; 0x42
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
      break;
 8002620:	e04b      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002622:	78bb      	ldrb	r3, [r7, #2]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3355      	adds	r3, #85	; 0x55
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3342      	adds	r3, #66	; 0x42
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800264e:	e034      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e02a      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3354      	adds	r3, #84	; 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3342      	adds	r3, #66	; 0x42
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e016      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3342      	adds	r3, #66	; 0x42
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
      break;
 800269e:	e00c      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3342      	adds	r3, #66	; 0x42
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
      break;
 80026b2:	e002      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3344      	adds	r3, #68	; 0x44
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	8b3a      	ldrh	r2, [r7, #24]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	; 0x4c
 80026dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3360      	adds	r3, #96	; 0x60
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3350      	adds	r3, #80	; 0x50
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3339      	adds	r3, #57	; 0x39
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	222c      	movs	r2, #44	; 0x2c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	18d1      	adds	r1, r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	f004 fcf0 	bl	8007124 <USB_HC_StartXfer>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 f9f1 	bl	8006b4e <USB_GetMode>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 80f6 	bne.w	8002960 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f004 f9d5 	bl	8006b28 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80ec 	beq.w	800295e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f9cc 	bl	8006b28 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800279a:	d104      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 f9bc 	bl	8006b28 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ba:	d104      	bne.n	80027c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 f9ac 	bl	8006b28 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027da:	d104      	bne.n	80027e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 f99c 	bl	8006b28 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d103      	bne.n	8002802 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2202      	movs	r2, #2
 8002800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f98e 	bl	8006b28 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002816:	d11c      	bne.n	8002852 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002820:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002832:	2110      	movs	r1, #16
 8002834:	6938      	ldr	r0, [r7, #16]
 8002836:	f004 f87d 	bl	8006934 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f004 f8ae 	bl	800699c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fa84 	bl	8006d54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f007 f853 	bl	80098f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 f966 	bl	8006b28 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002866:	d102      	bne.n	800286e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 f89e 	bl	80039aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f004 f958 	bl	8006b28 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d106      	bne.n	8002890 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f007 f81c 	bl	80098c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f004 f947 	bl	8006b28 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d101      	bne.n	80028a8 <HAL_HCD_IRQHandler+0x158>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_HCD_IRQHandler+0x15a>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0210 	bic.w	r2, r2, #16
 80028bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 ffa1 	bl	8003806 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0210 	orr.w	r2, r2, #16
 80028d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 f925 	bl	8006b28 <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e8:	d13a      	bne.n	8002960 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fd5a 	bl	80073a8 <USB_HC_ReadInterrupt>
 80028f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e025      	b.n	8002948 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d018      	beq.n	8002942 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d106      	bne.n	8002936 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8ab 	bl	8002a8a <HCD_HC_IN_IRQHandler>
 8002934:	e005      	b.n	8002942 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fbf9 	bl	8003134 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3d4      	bcc.n	80028fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	e000      	b.n	8002960 <HAL_HCD_IRQHandler+0x210>
      return;
 800295e:	bf00      	nop
    }
  }
}
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_HCD_Start+0x16>
 8002978:	2302      	movs	r3, #2
 800297a:	e013      	b.n	80029a4 <HAL_HCD_Start+0x3e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fa46 	bl	8006e1c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 ff5e 	bl	8006856 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_HCD_Stop+0x16>
 80029be:	2302      	movs	r3, #2
 80029c0:	e00d      	b.n	80029de <HAL_HCD_Stop+0x32>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fe34 	bl	800763c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 f9e8 	bl	8006dc8 <USB_ResetPort>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	781b      	ldrb	r3, [r3, #0]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3350      	adds	r3, #80	; 0x50
 8002a44:	681b      	ldr	r3, [r3, #0]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fa2c 	bl	8006ebc <USB_GetCurrentFrame>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fa07 	bl	8006e8e <USB_GetHostSpeed>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d11a      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2304      	movs	r3, #4
 8002aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	2206      	movs	r2, #6
 8002adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fc6e 	bl	80073ca <USB_HC_Halt>
 8002aee:	e0af      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d11b      	bne.n	8002b40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 fc46 	bl	80073ca <USB_HC_Halt>
 8002b3e:	e087      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d109      	bne.n	8002b6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2320      	movs	r3, #32
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	e072      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d11a      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2308      	movs	r3, #8
 8002b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3361      	adds	r3, #97	; 0x61
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 fc0b 	bl	80073ca <USB_HC_Halt>
 8002bb4:	e04c      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d11b      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3361      	adds	r3, #97	; 0x61
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fbe3 	bl	80073ca <USB_HC_Halt>
 8002c04:	e024      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	d119      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fbbd 	bl	80073ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c66:	d112      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fba9 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c8c:	e24e      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80df 	bne.w	8002e64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0159      	lsls	r1, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cd0:	1ad2      	subs	r2, r2, r3
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3350      	adds	r3, #80	; 0x50
 8002ce0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3361      	adds	r3, #97	; 0x61
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	335c      	adds	r3, #92	; 0x5c
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	333f      	adds	r3, #63	; 0x3f
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	333f      	adds	r3, #63	; 0x3f
 8002d3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d111      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fb3d 	bl	80073ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2310      	movs	r3, #16
 8002d60:	6093      	str	r3, [r2, #8]
 8002d62:	e03a      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	333f      	adds	r3, #63	; 0x3f
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d009      	beq.n	8002d8c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	333f      	adds	r3, #63	; 0x3f
 8002d86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d126      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002daa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	b2d9      	uxtb	r1, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	202c      	movs	r0, #44	; 0x2c
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f006 fd9d 	bl	8009914 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d12b      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3348      	adds	r3, #72	; 0x48
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	202c      	movs	r0, #44	; 0x2c
 8002df8:	fb00 f202 	mul.w	r2, r0, r2
 8002dfc:	440a      	add	r2, r1
 8002dfe:	3240      	adds	r2, #64	; 0x40
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 818e 	beq.w	800312c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3354      	adds	r3, #84	; 0x54
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f083 0301 	eor.w	r3, r3, #1
 8002e24:	b2d8      	uxtb	r0, r3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3354      	adds	r3, #84	; 0x54
 8002e34:	4602      	mov	r2, r0
 8002e36:	701a      	strb	r2, [r3, #0]
}
 8002e38:	e178      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3354      	adds	r3, #84	; 0x54
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3354      	adds	r3, #84	; 0x54
 8002e5e:	4602      	mov	r2, r0
 8002e60:	701a      	strb	r2, [r3, #0]
}
 8002e62:	e163      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	f040 80f6 	bne.w	8003068 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d109      	bne.n	8002ea4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3360      	adds	r3, #96	; 0x60
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e0c9      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d109      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e0b5      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d009      	beq.n	8002ef4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3361      	adds	r3, #97	; 0x61
 8002eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d150      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	202c      	movs	r0, #44	; 0x2c
 8002f0c:	fb00 f303 	mul.w	r3, r0, r3
 8002f10:	440b      	add	r3, r1
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d912      	bls.n	8002f50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f4e:	e073      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f94:	e050      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3361      	adds	r3, #97	; 0x61
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d122      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e023      	b.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b07      	cmp	r3, #7
 8003002:	d119      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	335c      	adds	r3, #92	; 0x5c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	202c      	movs	r0, #44	; 0x2c
 800301c:	fb00 f303 	mul.w	r3, r0, r3
 8003020:	440b      	add	r3, r1
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	2204      	movs	r2, #4
 8003036:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	2302      	movs	r3, #2
 8003048:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	b2d9      	uxtb	r1, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	4413      	add	r3, r2
 800305a:	3360      	adds	r3, #96	; 0x60
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f006 fc57 	bl	8009914 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003066:	e061      	b.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d156      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d111      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	335c      	adds	r3, #92	; 0x5c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 f98b 	bl	80073ca <USB_HC_Halt>
 80030b4:	e031      	b.n	800311a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	333f      	adds	r3, #63	; 0x3f
 80030d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11d      	bne.n	800311a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	335c      	adds	r3, #92	; 0x5c
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d110      	bne.n	800311a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3361      	adds	r3, #97	; 0x61
 8003106:	2203      	movs	r2, #3
 8003108:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f004 f958 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2310      	movs	r3, #16
 800312a:	6093      	str	r3, [r2, #8]
}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11a      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2304      	movs	r3, #4
 8003174:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3361      	adds	r3, #97	; 0x61
 8003184:	2206      	movs	r2, #6
 8003186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f004 f919 	bl	80073ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003198:	e331      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d12e      	bne.n	800320e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2320      	movs	r3, #32
 80031c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333d      	adds	r3, #61	; 0x3d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 8313 	bne.w	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333d      	adds	r3, #61	; 0x3d
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3360      	adds	r3, #96	; 0x60
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f004 f8df 	bl	80073ca <USB_HC_Halt>
}
 800320c:	e2f7      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003224:	d112      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f004 f8c0 	bl	80073ca <USB_HC_Halt>
}
 800324a:	e2d8      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d140      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	335c      	adds	r3, #92	; 0x5c
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d111      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	333d      	adds	r3, #61	; 0x3d
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3361      	adds	r3, #97	; 0x61
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 f874 	bl	80073ca <USB_HC_Halt>
}
 80032e2:	e28c      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d12c      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3361      	adds	r3, #97	; 0x61
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	333d      	adds	r3, #61	; 0x3d
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f004 f845 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	461a      	mov	r2, r3
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	6093      	str	r3, [r2, #8]
}
 8003352:	e254      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d11a      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2308      	movs	r3, #8
 800337a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	2205      	movs	r2, #5
 800338c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f004 f816 	bl	80073ca <USB_HC_Halt>
}
 800339e:	e22e      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d140      	bne.n	8003438 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3361      	adds	r3, #97	; 0x61
 80033d6:	2203      	movs	r2, #3
 80033d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	333d      	adds	r3, #61	; 0x3d
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 ffd3 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2310      	movs	r3, #16
 8003434:	6093      	str	r3, [r2, #8]
}
 8003436:	e1e2      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d164      	bne.n	8003518 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d111      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3361      	adds	r3, #97	; 0x61
 8003464:	2206      	movs	r2, #6
 8003466:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f003 ffa9 	bl	80073ca <USB_HC_Halt>
 8003478:	e044      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	335c      	adds	r3, #92	; 0x5c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	202c      	movs	r0, #44	; 0x2c
 8003492:	fb00 f303 	mul.w	r3, r0, r3
 8003496:	440b      	add	r3, r1
 8003498:	335c      	adds	r3, #92	; 0x5c
 800349a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	335c      	adds	r3, #92	; 0x5c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d920      	bls.n	80034f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	335c      	adds	r3, #92	; 0x5c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3360      	adds	r3, #96	; 0x60
 80034d0:	2204      	movs	r2, #4
 80034d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3360      	adds	r3, #96	; 0x60
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f006 fa12 	bl	8009914 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034f0:	e008      	b.n	8003504 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3360      	adds	r3, #96	; 0x60
 8003500:	2202      	movs	r2, #2
 8003502:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	6093      	str	r3, [r2, #8]
}
 8003516:	e172      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d11b      	bne.n	8003568 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3361      	adds	r3, #97	; 0x61
 800353e:	2208      	movs	r2, #8
 8003540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f003 ff3c 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003564:	6093      	str	r3, [r2, #8]
}
 8003566:	e14a      	b.n	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 813f 	bne.w	80037fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3361      	adds	r3, #97	; 0x61
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d17d      	bne.n	8003690 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3360      	adds	r3, #96	; 0x60
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333f      	adds	r3, #63	; 0x3f
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d00a      	beq.n	80035d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	333f      	adds	r3, #63	; 0x3f
 80035c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	f040 8100 	bne.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3355      	adds	r3, #85	; 0x55
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2d8      	uxtb	r0, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3355      	adds	r3, #85	; 0x55
 80035fc:	4602      	mov	r2, r0
 80035fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 80e3 	bne.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80d8 	beq.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	334c      	adds	r3, #76	; 0x4c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	202c      	movs	r0, #44	; 0x2c
 8003636:	fb00 f202 	mul.w	r2, r0, r2
 800363a:	440a      	add	r2, r1
 800363c:	3240      	adds	r2, #64	; 0x40
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	4413      	add	r3, r2
 8003642:	3b01      	subs	r3, #1
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f202 	mul.w	r2, r0, r2
 800364e:	440a      	add	r2, r1
 8003650:	3240      	adds	r2, #64	; 0x40
 8003652:	8812      	ldrh	r2, [r2, #0]
 8003654:	fbb3 f3f2 	udiv	r3, r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b5 	beq.w	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3355      	adds	r3, #85	; 0x55
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3355      	adds	r3, #85	; 0x55
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e09f      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d109      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e08b      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3361      	adds	r3, #97	; 0x61
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d109      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3360      	adds	r3, #96	; 0x60
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e077      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d109      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3360      	adds	r3, #96	; 0x60
 8003702:	2205      	movs	r2, #5
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e063      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3361      	adds	r3, #97	; 0x61
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d009      	beq.n	8003730 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3361      	adds	r3, #97	; 0x61
 800372a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800372c:	2b08      	cmp	r3, #8
 800372e:	d14f      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	335c      	adds	r3, #92	; 0x5c
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	202c      	movs	r0, #44	; 0x2c
 8003748:	fb00 f303 	mul.w	r3, r0, r3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	335c      	adds	r3, #92	; 0x5c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d912      	bls.n	800378c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	335c      	adds	r3, #92	; 0x5c
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3360      	adds	r3, #96	; 0x60
 8003786:	2204      	movs	r2, #4
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e021      	b.n	80037d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3360      	adds	r3, #96	; 0x60
 800379a:	2202      	movs	r2, #2
 800379c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	461a      	mov	r2, r3
 80037de:	2302      	movs	r3, #2
 80037e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	b2d9      	uxtb	r1, r3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	202c      	movs	r0, #44	; 0x2c
 80037ec:	fb00 f303 	mul.w	r3, r0, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f006 f88b 	bl	8009914 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08a      	sub	sp, #40	; 0x28
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	0c5b      	lsrs	r3, r3, #17
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d004      	beq.n	800384c <HCD_RXQLVL_IRQHandler+0x46>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b05      	cmp	r3, #5
 8003846:	f000 80a9 	beq.w	800399c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800384a:	e0aa      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80a6 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3344      	adds	r3, #68	; 0x44
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 809b 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3350      	adds	r3, #80	; 0x50
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	441a      	add	r2, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	202c      	movs	r0, #44	; 0x2c
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	440b      	add	r3, r1
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d87a      	bhi.n	8003988 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3344      	adds	r3, #68	; 0x44
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	b292      	uxth	r2, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f003 f8e4 	bl	8006a78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3344      	adds	r3, #68	; 0x44
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	441a      	add	r2, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	202c      	movs	r0, #44	; 0x2c
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	440b      	add	r3, r1
 80038d0:	3344      	adds	r3, #68	; 0x44
 80038d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3350      	adds	r3, #80	; 0x50
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	441a      	add	r2, r3
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	202c      	movs	r0, #44	; 0x2c
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	440b      	add	r3, r1
 80038f4:	3350      	adds	r3, #80	; 0x50
 80038f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	0cdb      	lsrs	r3, r3, #19
 8003908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3340      	adds	r3, #64	; 0x40
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4293      	cmp	r3, r2
 8003924:	d13c      	bne.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d039      	beq.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003942:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3354      	adds	r3, #84	; 0x54
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2d8      	uxtb	r0, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3354      	adds	r3, #84	; 0x54
 8003982:	4602      	mov	r2, r0
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e00b      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	2204      	movs	r2, #4
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e001      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80039a0:	bf00      	nop
  }
}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d10b      	bne.n	80039fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f005 ff75 	bl	80098dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d132      	bne.n	8003a6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 0308 	orr.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d126      	bne.n	8003a64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a28:	d106      	bne.n	8003a38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 f98f 	bl	8006d54 <USB_InitFSLSPClkSel>
 8003a36:	e011      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 f988 	bl	8006d54 <USB_InitFSLSPClkSel>
 8003a44:	e00a      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f005 ff67 	bl	8009930 <HAL_HCD_PortEnabled_Callback>
 8003a62:	e002      	b.n	8003a6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f005 ff71 	bl	800994c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d103      	bne.n	8003a7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e12b      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fdf4 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f002 f89c 	bl	8005c30 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a81      	ldr	r2, [pc, #516]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a80      	ldr	r2, [pc, #512]	; (8003d08 <HAL_I2C_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_I2C_Init+0x27c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0e7      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a78      	ldr	r2, [pc, #480]	; (8003d10 <HAL_I2C_Init+0x280>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a69      	ldr	r2, [pc, #420]	; (8003d14 <HAL_I2C_Init+0x284>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	495c      	ldr	r1, [pc, #368]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d819      	bhi.n	8003bcc <HAL_I2C_Init+0x13c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bac:	400b      	ands	r3, r1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_I2C_Init+0x138>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e59      	subs	r1, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	e051      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x168>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x18e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x196>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d32:	f7fd ffab 	bl	8001c8c <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 80d9 	bne.w	8003ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	496d      	ldr	r1, [pc, #436]	; (8003f04 <HAL_I2C_Mem_Write+0x1ec>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fc7f 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0cc      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Mem_Write+0x56>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0c5      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2221      	movs	r2, #33	; 0x21
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a4d      	ldr	r2, [pc, #308]	; (8003f08 <HAL_I2C_Mem_Write+0x1f0>)
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd6:	88f8      	ldrh	r0, [r7, #6]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4603      	mov	r3, r0
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fab6 	bl	8004358 <I2C_RequestMemoryWrite>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d052      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e081      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fd00 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11b      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x180>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1aa      	bne.n	8003df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fcec 	bl	8004882 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e016      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	00100002 	.word	0x00100002
 8003f08:	ffff0000 	.word	0xffff0000

08003f0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	; 0x30
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f26:	f7fd feb1 	bl	8001c8c <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	f040 8208 	bne.w	800434a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2319      	movs	r3, #25
 8003f40:	2201      	movs	r2, #1
 8003f42:	497b      	ldr	r1, [pc, #492]	; (8004130 <HAL_I2C_Mem_Read+0x224>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fb85 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
 8003f52:	e1fb      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x56>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e1f4      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d007      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2222      	movs	r2, #34	; 0x22
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a5b      	ldr	r2, [pc, #364]	; (8004134 <HAL_I2C_Mem_Read+0x228>)
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fca:	88f8      	ldrh	r0, [r7, #6]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	8979      	ldrh	r1, [r7, #10]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa52 	bl	8004484 <I2C_RequestMemoryRead>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1b0      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e184      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11b      	bne.n	800405a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e164      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	2b02      	cmp	r3, #2
 8004060:	d11b      	bne.n	800409a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	e144      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040b0:	e138      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	f200 80f1 	bhi.w	800429e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d123      	bne.n	800410c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fc1b 	bl	8004904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e139      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800410a:	e10b      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	2b02      	cmp	r3, #2
 8004112:	d14e      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	2200      	movs	r2, #0
 800411c:	4906      	ldr	r1, [pc, #24]	; (8004138 <HAL_I2C_Mem_Read+0x22c>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa98 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e10e      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
 800412e:	bf00      	nop
 8004130:	00100002 	.word	0x00100002
 8004134:	ffff0000 	.word	0xffff0000
 8004138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b0:	e0b8      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	2200      	movs	r2, #0
 80041ba:	4966      	ldr	r1, [pc, #408]	; (8004354 <HAL_I2C_Mem_Read+0x448>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fa49 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0bf      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2200      	movs	r2, #0
 8004216:	494f      	ldr	r1, [pc, #316]	; (8004354 <HAL_I2C_Mem_Read+0x448>)
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fa1b 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e091      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800429c:	e042      	b.n	8004324 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb2e 	bl	8004904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e04c      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d118      	bne.n	8004324 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f aec2 	bne.w	80040b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	00010004 	.word	0x00010004

08004358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4603      	mov	r3, r0
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	460b      	mov	r3, r1
 800436c:	813b      	strh	r3, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2200      	movs	r2, #0
 800438a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f960 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a8:	d103      	bne.n	80043b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e05f      	b.n	8004476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043b6:	897b      	ldrh	r3, [r7, #10]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	492d      	ldr	r1, [pc, #180]	; (8004480 <I2C_RequestMemoryWrite+0x128>)
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f998 	bl	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e04c      	b.n	8004476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	6a39      	ldr	r1, [r7, #32]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa02 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b04      	cmp	r3, #4
 8004408:	d107      	bne.n	800441a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02b      	b.n	8004476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004424:	893b      	ldrh	r3, [r7, #8]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]
 800442e:	e021      	b.n	8004474 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f9dc 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b04      	cmp	r3, #4
 8004454:	d107      	bne.n	8004466 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e005      	b.n	8004476 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800446a:	893b      	ldrh	r3, [r7, #8]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	00010002 	.word	0x00010002

08004484 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f8c2 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e4:	d103      	bne.n	80044ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0aa      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	4952      	ldr	r1, [pc, #328]	; (8004650 <I2C_RequestMemoryRead+0x1cc>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f8fa 	bl	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e097      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	6a39      	ldr	r1, [r7, #32]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f964 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b04      	cmp	r3, #4
 8004544:	d107      	bne.n	8004556 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e076      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	611a      	str	r2, [r3, #16]
 800456a:	e021      	b.n	80045b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f93e 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b04      	cmp	r3, #4
 8004590:	d107      	bne.n	80045a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e050      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045a6:	893b      	ldrh	r3, [r7, #8]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b2:	6a39      	ldr	r1, [r7, #32]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f923 	bl	8004800 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d107      	bne.n	80045d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e035      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f82b 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d103      	bne.n	800461c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e013      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	6a3a      	ldr	r2, [r7, #32]
 8004634:	4906      	ldr	r1, [pc, #24]	; (8004650 <I2C_RequestMemoryRead+0x1cc>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f863 	bl	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	00010002 	.word	0x00010002

08004654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004664:	e025      	b.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d021      	beq.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fd fb0d 	bl	8001c8c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d116      	bne.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e023      	b.n	80046fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10d      	bne.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	e00c      	b.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	43da      	mvns	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d0b6      	beq.n	8004666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004710:	e051      	b.n	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d123      	bne.n	800476a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e046      	b.n	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d021      	beq.n	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fd fa8b 	bl	8001c8c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d116      	bne.n	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e020      	b.n	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10c      	bne.n	80047da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	43da      	mvns	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e00b      	b.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d18d      	bne.n	8004712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800480c:	e02d      	b.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f8ce 	bl	80049b0 <I2C_IsAcknowledgeFailed>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e02d      	b.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d021      	beq.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fd fa31 	bl	8001c8c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d1ca      	bne.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800488e:	e02d      	b.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f88d 	bl	80049b0 <I2C_IsAcknowledgeFailed>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e02d      	b.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d021      	beq.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a8:	f7fd f9f0 	bl	8001c8c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d116      	bne.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d1ca      	bne.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004910:	e042      	b.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d119      	bne.n	8004954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0210 	mvn.w	r2, #16
 8004928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e029      	b.n	80049a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7fd f99a 	bl	8001c8c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d1b5      	bne.n	8004912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c6:	d11b      	bne.n	8004a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f043 0204 	orr.w	r2, r3, #4
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e128      	b.n	8004c74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a90      	ldr	r2, [pc, #576]	; (8004c7c <HAL_I2S_Init+0x26c>)
 8004a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fe79 	bl	8001734 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a58:	f023 030f 	bic.w	r3, r3, #15
 8004a5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2202      	movs	r2, #2
 8004a64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d060      	beq.n	8004b30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a76:	2310      	movs	r3, #16
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	e001      	b.n	8004a80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d802      	bhi.n	8004a8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f001 f9d8 	bl	8005e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9e:	d125      	bne.n	8004aec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	3305      	adds	r3, #5
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e01f      	b.n	8004b0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	3305      	adds	r3, #5
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e00e      	b.n	8004b0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	3305      	adds	r3, #5
 8004b08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_I2S_Init+0x270>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	08db      	lsrs	r3, r3, #3
 8004b14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e003      	b.n	8004b38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b30:	2302      	movs	r3, #2
 8004b32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d902      	bls.n	8004b44 <HAL_I2S_Init+0x134>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2bff      	cmp	r3, #255	; 0xff
 8004b42:	d907      	bls.n	8004b54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e08f      	b.n	8004c74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	ea42 0103 	orr.w	r1, r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b72:	f023 030f 	bic.w	r3, r3, #15
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6851      	ldr	r1, [r2, #4]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6892      	ldr	r2, [r2, #8]
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68d2      	ldr	r2, [r2, #12]
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6992      	ldr	r2, [r2, #24]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d161      	bne.n	8004c64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a38      	ldr	r2, [pc, #224]	; (8004c84 <HAL_I2S_Init+0x274>)
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a37      	ldr	r2, [pc, #220]	; (8004c88 <HAL_I2S_Init+0x278>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_I2S_Init+0x1a4>
 8004bb0:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_I2S_Init+0x27c>)
 8004bb2:	e001      	b.n	8004bb8 <HAL_I2S_Init+0x1a8>
 8004bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	4932      	ldr	r1, [pc, #200]	; (8004c88 <HAL_I2S_Init+0x278>)
 8004bc0:	428a      	cmp	r2, r1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_I2S_Init+0x1b8>
 8004bc4:	4a31      	ldr	r2, [pc, #196]	; (8004c8c <HAL_I2S_Init+0x27c>)
 8004bc6:	e001      	b.n	8004bcc <HAL_I2S_Init+0x1bc>
 8004bc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004bcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bd0:	f023 030f 	bic.w	r3, r3, #15
 8004bd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_I2S_Init+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d101      	bne.n	8004be4 <HAL_I2S_Init+0x1d4>
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_I2S_Init+0x27c>)
 8004be2:	e001      	b.n	8004be8 <HAL_I2S_Init+0x1d8>
 8004be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be8:	2202      	movs	r2, #2
 8004bea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <HAL_I2S_Init+0x278>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2S_Init+0x1ea>
 8004bf6:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_I2S_Init+0x27c>)
 8004bf8:	e001      	b.n	8004bfe <HAL_I2S_Init+0x1ee>
 8004bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0a:	d003      	beq.n	8004c14 <HAL_I2S_Init+0x204>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d103      	bne.n	8004c1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e001      	b.n	8004c20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0d      	ldr	r2, [pc, #52]	; (8004c88 <HAL_I2S_Init+0x278>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_I2S_Init+0x24c>
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <HAL_I2S_Init+0x27c>)
 8004c5a:	e001      	b.n	8004c60 <HAL_I2S_Init+0x250>
 8004c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c60:	897a      	ldrh	r2, [r7, #10]
 8004c62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08004d87 	.word	0x08004d87
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	08004e9d 	.word	0x08004e9d
 8004c88:	40003800 	.word	0x40003800
 8004c8c:	40003400 	.word	0x40003400

08004c90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffb8 	bl	8004c90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10e      	bne.n	8004d7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff93 	bl	8004ca4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d13a      	bne.n	8004e18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d109      	bne.n	8004dc0 <I2S_IRQHandler+0x3a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d102      	bne.n	8004dc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ffb4 	bl	8004d28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d126      	bne.n	8004e18 <I2S_IRQHandler+0x92>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d11f      	bne.n	8004e18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f043 0202 	orr.w	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff50 	bl	8004cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d136      	bne.n	8004e92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d109      	bne.n	8004e42 <I2S_IRQHandler+0xbc>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d102      	bne.n	8004e42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff45 	bl	8004ccc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d122      	bne.n	8004e92 <I2S_IRQHandler+0x10c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d11b      	bne.n	8004e92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff13 	bl	8004cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a92      	ldr	r2, [pc, #584]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004eb6:	4b92      	ldr	r3, [pc, #584]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb8:	e001      	b.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a8b      	ldr	r2, [pc, #556]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ed4:	4b8a      	ldr	r3, [pc, #552]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed6:	e001      	b.n	8004edc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee8:	d004      	beq.n	8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8099 	bne.w	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d107      	bne.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f925 	bl	8005158 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9c8 	bl	80052b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d13a      	bne.n	8004fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d035      	beq.n	8004fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6e      	ldr	r2, [pc, #440]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f46:	4b6e      	ldr	r3, [pc, #440]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f48:	e001      	b.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4969      	ldr	r1, [pc, #420]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f5a:	4b69      	ldr	r3, [pc, #420]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f5c:	e001      	b.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fe88 	bl	8004cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	f040 80c3 	bne.w	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80bd 	beq.w	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a49      	ldr	r2, [pc, #292]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004fda:	4b49      	ldr	r3, [pc, #292]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fdc:	e001      	b.n	8004fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4944      	ldr	r1, [pc, #272]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fea:	428b      	cmp	r3, r1
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ff0:	e001      	b.n	8004ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ffa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fe4a 	bl	8004cb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005024:	e089      	b.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d107      	bne.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8be 	bl	80051bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8fd 	bl	8005254 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d12f      	bne.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02a      	beq.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800507c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800508a:	e001      	b.n	8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800508c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4919      	ldr	r1, [pc, #100]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005098:	428b      	cmp	r3, r1
 800509a:	d101      	bne.n	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800509e:	e001      	b.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0202 	orr.w	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdfa 	bl	8004cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d136      	bne.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d031      	beq.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d101      	bne.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e4:	e001      	b.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80050e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4902      	ldr	r1, [pc, #8]	; (80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f2:	428b      	cmp	r3, r1
 80050f4:	d106      	bne.n	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80050f6:	4b02      	ldr	r3, [pc, #8]	; (8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f8:	e006      	b.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80050fa:	bf00      	nop
 80050fc:	40003800 	.word	0x40003800
 8005100:	40003400 	.word	0x40003400
 8005104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800510c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800511c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f043 0204 	orr.w	r2, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fdc0 	bl	8004cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005138:	e000      	b.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800513a:	bf00      	nop
}
 800513c:	bf00      	nop
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c99      	adds	r1, r3, #2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6251      	str	r1, [r2, #36]	; 0x24
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d113      	bne.n	80051b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ffc9 	bl	8005144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	1c99      	adds	r1, r3, #2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6251      	str	r1, [r2, #36]	; 0x24
 80051ce:	8819      	ldrh	r1, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1d      	ldr	r2, [pc, #116]	; (800524c <I2SEx_TxISR_I2SExt+0x90>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <I2SEx_TxISR_I2SExt+0x22>
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <I2SEx_TxISR_I2SExt+0x94>)
 80051dc:	e001      	b.n	80051e2 <I2SEx_TxISR_I2SExt+0x26>
 80051de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e2:	460a      	mov	r2, r1
 80051e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d121      	bne.n	8005242 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <I2SEx_TxISR_I2SExt+0x90>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <I2SEx_TxISR_I2SExt+0x50>
 8005208:	4b11      	ldr	r3, [pc, #68]	; (8005250 <I2SEx_TxISR_I2SExt+0x94>)
 800520a:	e001      	b.n	8005210 <I2SEx_TxISR_I2SExt+0x54>
 800520c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	490d      	ldr	r1, [pc, #52]	; (800524c <I2SEx_TxISR_I2SExt+0x90>)
 8005218:	428b      	cmp	r3, r1
 800521a:	d101      	bne.n	8005220 <I2SEx_TxISR_I2SExt+0x64>
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <I2SEx_TxISR_I2SExt+0x94>)
 800521e:	e001      	b.n	8005224 <I2SEx_TxISR_I2SExt+0x68>
 8005220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff81 	bl	8005144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40003800 	.word	0x40003800
 8005250:	40003400 	.word	0x40003400

08005254 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68d8      	ldr	r0, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	1c99      	adds	r1, r3, #2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800526c:	b282      	uxth	r2, r0
 800526e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d113      	bne.n	80052b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005296:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ff4a 	bl	8005144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <I2SEx_RxISR_I2SExt+0x90>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <I2SEx_RxISR_I2SExt+0x16>
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <I2SEx_RxISR_I2SExt+0x94>)
 80052cc:	e001      	b.n	80052d2 <I2SEx_RxISR_I2SExt+0x1a>
 80052ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d2:	68d8      	ldr	r0, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	1c99      	adds	r1, r3, #2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052de:	b282      	uxth	r2, r0
 80052e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <I2SEx_RxISR_I2SExt+0x90>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <I2SEx_RxISR_I2SExt+0x50>
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <I2SEx_RxISR_I2SExt+0x94>)
 8005306:	e001      	b.n	800530c <I2SEx_RxISR_I2SExt+0x54>
 8005308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <I2SEx_RxISR_I2SExt+0x90>)
 8005314:	428b      	cmp	r3, r1
 8005316:	d101      	bne.n	800531c <I2SEx_RxISR_I2SExt+0x64>
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <I2SEx_RxISR_I2SExt+0x94>)
 800531a:	e001      	b.n	8005320 <I2SEx_RxISR_I2SExt+0x68>
 800531c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005320:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005324:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff03 	bl	8005144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40003800 	.word	0x40003800
 800534c:	40003400 	.word	0x40003400

08005350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e267      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d075      	beq.n	800545a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800536e:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b04      	cmp	r3, #4
 8005378:	d00c      	beq.n	8005394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537a:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005382:	2b08      	cmp	r3, #8
 8005384:	d112      	bne.n	80053ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005386:	4b82      	ldr	r3, [pc, #520]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005392:	d10b      	bne.n	80053ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	4b7e      	ldr	r3, [pc, #504]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d05b      	beq.n	8005458 <HAL_RCC_OscConfig+0x108>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d157      	bne.n	8005458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e242      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d106      	bne.n	80053c4 <HAL_RCC_OscConfig+0x74>
 80053b6:	4b76      	ldr	r3, [pc, #472]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a75      	ldr	r2, [pc, #468]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e01d      	b.n	8005400 <HAL_RCC_OscConfig+0xb0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x98>
 80053ce:	4b70      	ldr	r3, [pc, #448]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6f      	ldr	r2, [pc, #444]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b6d      	ldr	r3, [pc, #436]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6c      	ldr	r2, [pc, #432]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0xb0>
 80053e8:	4b69      	ldr	r3, [pc, #420]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a68      	ldr	r2, [pc, #416]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b66      	ldr	r3, [pc, #408]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80053fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fc fc40 	bl	8001c8c <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005410:	f7fc fc3c 	bl	8001c8c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e207      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0xc0>
 800542e:	e014      	b.n	800545a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fc fc2c 	bl	8001c8c <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005438:	f7fc fc28 	bl	8001c8c <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e1f3      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	4b51      	ldr	r3, [pc, #324]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0xe8>
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d063      	beq.n	800552e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005466:	4b4a      	ldr	r3, [pc, #296]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547a:	2b08      	cmp	r3, #8
 800547c:	d11c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547e:	4b44      	ldr	r3, [pc, #272]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_RCC_OscConfig+0x152>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e1c7      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	4b3b      	ldr	r3, [pc, #236]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4937      	ldr	r1, [pc, #220]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	e03a      	b.n	800552e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c0:	4b34      	ldr	r3, [pc, #208]	; (8005594 <HAL_RCC_OscConfig+0x244>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc fbe1 	bl	8001c8c <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fc fbdd 	bl	8001c8c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e1a8      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e0:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b28      	ldr	r3, [pc, #160]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4925      	ldr	r1, [pc, #148]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]
 8005500:	e015      	b.n	800552e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCC_OscConfig+0x244>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fc fbc0 	bl	8001c8c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005510:	f7fc fbbc 	bl	8001c8c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e187      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d036      	beq.n	80055a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_RCC_OscConfig+0x248>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fc fba0 	bl	8001c8c <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005550:	f7fc fb9c 	bl	8001c8c <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e167      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_OscConfig+0x240>)
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x200>
 800556e:	e01b      	b.n	80055a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_RCC_OscConfig+0x248>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005576:	f7fc fb89 	bl	8001c8c <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557c:	e00e      	b.n	800559c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800557e:	f7fc fb85 	bl	8001c8c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d907      	bls.n	800559c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e150      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
 8005590:	40023800 	.word	0x40023800
 8005594:	42470000 	.word	0x42470000
 8005598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800559e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1ea      	bne.n	800557e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8097 	beq.w	80056e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b6:	2300      	movs	r3, #0
 80055b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ba:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	4b7d      	ldr	r3, [pc, #500]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	4a7c      	ldr	r2, [pc, #496]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6413      	str	r3, [r2, #64]	; 0x40
 80055d6:	4b7a      	ldr	r3, [pc, #488]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e6:	4b77      	ldr	r3, [pc, #476]	; (80057c4 <HAL_RCC_OscConfig+0x474>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d118      	bne.n	8005624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f2:	4b74      	ldr	r3, [pc, #464]	; (80057c4 <HAL_RCC_OscConfig+0x474>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a73      	ldr	r2, [pc, #460]	; (80057c4 <HAL_RCC_OscConfig+0x474>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fe:	f7fc fb45 	bl	8001c8c <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fc fb41 	bl	8001c8c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e10c      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	4b6a      	ldr	r3, [pc, #424]	; (80057c4 <HAL_RCC_OscConfig+0x474>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x2ea>
 800562c:	4b64      	ldr	r3, [pc, #400]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a63      	ldr	r2, [pc, #396]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	e01c      	b.n	8005674 <HAL_RCC_OscConfig+0x324>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x30c>
 8005642:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a5e      	ldr	r2, [pc, #376]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005648:	f043 0304 	orr.w	r3, r3, #4
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	4b5c      	ldr	r3, [pc, #368]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a5b      	ldr	r2, [pc, #364]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	6713      	str	r3, [r2, #112]	; 0x70
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0x324>
 800565c:	4b58      	ldr	r3, [pc, #352]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a57      	ldr	r2, [pc, #348]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a54      	ldr	r2, [pc, #336]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800566e:	f023 0304 	bic.w	r3, r3, #4
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fc fb06 	bl	8001c8c <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005682:	e00a      	b.n	800569a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005684:	f7fc fb02 	bl	8001c8c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e0cb      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569a:	4b49      	ldr	r3, [pc, #292]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ee      	beq.n	8005684 <HAL_RCC_OscConfig+0x334>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a8:	f7fc faf0 	bl	8001c8c <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fc faec 	bl	8001c8c <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0b5      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c6:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ee      	bne.n	80056b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d105      	bne.n	80056e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	4a38      	ldr	r2, [pc, #224]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80056de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80a1 	beq.w	8005830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ee:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d05c      	beq.n	80057b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d141      	bne.n	8005786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <HAL_RCC_OscConfig+0x478>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005708:	f7fc fac0 	bl	8001c8c <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005710:	f7fc fabc 	bl	8001c8c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e087      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	019b      	lsls	r3, r3, #6
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	3b01      	subs	r3, #1
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	491b      	ldr	r1, [pc, #108]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005758:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <HAL_RCC_OscConfig+0x478>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fc fa95 	bl	8001c8c <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005766:	f7fc fa91 	bl	8001c8c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e05c      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x416>
 8005784:	e054      	b.n	8005830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_RCC_OscConfig+0x478>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fc fa7e 	bl	8001c8c <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005794:	f7fc fa7a 	bl	8001c8c <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e045      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_OscConfig+0x470>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x444>
 80057b2:	e03d      	b.n	8005830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d107      	bne.n	80057cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e038      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <HAL_RCC_OscConfig+0x4ec>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d028      	beq.n	800582c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d121      	bne.n	800582c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d11a      	bne.n	800582c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005804:	4293      	cmp	r3, r2
 8005806:	d111      	bne.n	800582c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	3b01      	subs	r3, #1
 8005816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d107      	bne.n	800582c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800

08005840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0cc      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d90c      	bls.n	800587c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b65      	ldr	r3, [pc, #404]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b63      	ldr	r3, [pc, #396]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0b8      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d020      	beq.n	80058ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005894:	4b59      	ldr	r3, [pc, #356]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a58      	ldr	r2, [pc, #352]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800589e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ac:	4b53      	ldr	r3, [pc, #332]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b8:	4b50      	ldr	r3, [pc, #320]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	494d      	ldr	r1, [pc, #308]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d044      	beq.n	8005960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058de:	4b47      	ldr	r3, [pc, #284]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d119      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e07f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d003      	beq.n	80058fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e06f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e067      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591e:	4b37      	ldr	r3, [pc, #220]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f023 0203 	bic.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4934      	ldr	r1, [pc, #208]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005930:	f7fc f9ac 	bl	8001c8c <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	e00a      	b.n	800594e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005938:	f7fc f9a8 	bl	8001c8c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e04f      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 020c 	and.w	r2, r3, #12
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	429a      	cmp	r2, r3
 800595e:	d1eb      	bne.n	8005938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d20c      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e032      	b.n	80059ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4916      	ldr	r1, [pc, #88]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	490e      	ldr	r1, [pc, #56]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059c6:	f000 f821 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80059ca:	4602      	mov	r2, r0
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	490a      	ldr	r1, [pc, #40]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 80059d8:	5ccb      	ldrb	r3, [r1, r3]
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fc f90c 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40023c00 	.word	0x40023c00
 80059fc:	40023800 	.word	0x40023800
 8005a00:	0800c830 	.word	0x0800c830
 8005a04:	20000000 	.word	0x20000000
 8005a08:	20000004 	.word	0x20000004

08005a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a10:	b094      	sub	sp, #80	; 0x50
 8005a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
 8005a18:	2300      	movs	r3, #0
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a24:	4b79      	ldr	r3, [pc, #484]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d00d      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x40>
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	f200 80e1 	bhi.w	8005bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x34>
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a3e:	e0db      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a40:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a44:	e0db      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a46:	4b73      	ldr	r3, [pc, #460]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a4a:	e0d8      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a4c:	4b6f      	ldr	r3, [pc, #444]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a56:	4b6d      	ldr	r3, [pc, #436]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d063      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a62:	4b6a      	ldr	r3, [pc, #424]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30
 8005a76:	2300      	movs	r3, #0
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	0159      	lsls	r1, r3, #5
 8005a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a90:	0150      	lsls	r0, r2, #5
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4621      	mov	r1, r4
 8005a98:	1a51      	subs	r1, r2, r1
 8005a9a:	6139      	str	r1, [r7, #16]
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	018b      	lsls	r3, r1, #6
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aba:	4651      	mov	r1, sl
 8005abc:	018a      	lsls	r2, r1, #6
 8005abe:	4651      	mov	r1, sl
 8005ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ade:	4690      	mov	r8, r2
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	eb18 0303 	adds.w	r3, r8, r3
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	462b      	mov	r3, r5
 8005aec:	eb49 0303 	adc.w	r3, r9, r3
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005afe:	4629      	mov	r1, r5
 8005b00:	024b      	lsls	r3, r1, #9
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b08:	4621      	mov	r1, r4
 8005b0a:	024a      	lsls	r2, r1, #9
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b12:	2200      	movs	r2, #0
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1c:	f7fb f894 	bl	8000c48 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4613      	mov	r3, r2
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	e058      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2a:	4b38      	ldr	r3, [pc, #224]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	099b      	lsrs	r3, r3, #6
 8005b30:	2200      	movs	r2, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	4611      	mov	r1, r2
 8005b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	f04f 0000 	mov.w	r0, #0
 8005b4c:	f04f 0100 	mov.w	r1, #0
 8005b50:	0159      	lsls	r1, r3, #5
 8005b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b56:	0150      	lsls	r0, r2, #5
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b62:	4649      	mov	r1, r9
 8005b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b80:	eb63 050b 	sbc.w	r5, r3, fp
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	00eb      	lsls	r3, r5, #3
 8005b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b92:	00e2      	lsls	r2, r4, #3
 8005b94:	4614      	mov	r4, r2
 8005b96:	461d      	mov	r5, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	18e3      	adds	r3, r4, r3
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	eb45 0303 	adc.w	r3, r5, r3
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	028b      	lsls	r3, r1, #10
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	028a      	lsls	r2, r1, #10
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	61fa      	str	r2, [r7, #28]
 8005bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd0:	f7fb f83a 	bl	8000c48 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4613      	mov	r3, r2
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	3301      	adds	r3, #1
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bf6:	e002      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3750      	adds	r7, #80	; 0x50
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	00f42400 	.word	0x00f42400
 8005c14:	007a1200 	.word	0x007a1200

08005c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000000 	.word	0x20000000

08005c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c34:	f7ff fff0 	bl	8005c18 <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0a9b      	lsrs	r3, r3, #10
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4903      	ldr	r1, [pc, #12]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40023800 	.word	0x40023800
 8005c54:	0800c840 	.word	0x0800c840

08005c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c5c:	f7ff ffdc 	bl	8005c18 <HAL_RCC_GetHCLKFreq>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	0b5b      	lsrs	r3, r3, #13
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	4903      	ldr	r1, [pc, #12]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c6e:	5ccb      	ldrb	r3, [r1, r3]
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	0800c840 	.word	0x0800c840

08005c80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d035      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ca8:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f7fb ffed 	bl	8001c8c <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cb6:	f7fb ffe9 	bl	8001c8c <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0b0      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f0      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	019a      	lsls	r2, r3, #6
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	071b      	lsls	r3, r3, #28
 8005ce0:	4955      	ldr	r1, [pc, #340]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ce8:	4b52      	ldr	r3, [pc, #328]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cee:	f7fb ffcd 	bl	8001c8c <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cf6:	f7fb ffc9 	bl	8001c8c <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e090      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d08:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8083 	beq.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	4b44      	ldr	r3, [pc, #272]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6413      	str	r3, [r2, #64]	; 0x40
 8005d32:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d3e:	4b3f      	ldr	r3, [pc, #252]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3e      	ldr	r2, [pc, #248]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d4a:	f7fb ff9f 	bl	8001c8c <HAL_GetTick>
 8005d4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d52:	f7fb ff9b 	bl	8001c8c <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e062      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d64:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d70:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02f      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d028      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d8e:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d98:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d9e:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d114      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005db6:	f7fb ff69 	bl	8001c8c <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fb ff65 	bl	8001c8c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e02a      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd4:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ee      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dec:	d10d      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e02:	490d      	ldr	r1, [pc, #52]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	608b      	str	r3, [r1, #8]
 8005e08:	e005      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e14:	6093      	str	r3, [r2, #8]
 8005e16:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e22:	4905      	ldr	r1, [pc, #20]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	42470068 	.word	0x42470068
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	42470e40 	.word	0x42470e40

08005e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d13e      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e62:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d12f      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e7a:	617b      	str	r3, [r7, #20]
          break;
 8005e7c:	e02f      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e8a:	d108      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	e007      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e9e:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb4:	099b      	lsrs	r3, r3, #6
 8005eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec8:	0f1b      	lsrs	r3, r3, #28
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	617b      	str	r3, [r7, #20]
          break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
          break;
 8005edc:	bf00      	nop
        }
      }
      break;
 8005ede:	bf00      	nop
    }
  }
  return frequency;
 8005ee0:	697b      	ldr	r3, [r7, #20]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	00bb8000 	.word	0x00bb8000
 8005ef8:	007a1200 	.word	0x007a1200
 8005efc:	00f42400 	.word	0x00f42400

08005f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e07b      	b.n	800600a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d108      	bne.n	8005f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f22:	d009      	beq.n	8005f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	61da      	str	r2, [r3, #28]
 8005f2a:	e005      	b.n	8005f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fc6e 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	ea42 0103 	orr.w	r1, r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0104 	and.w	r1, r3, #4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0210 	and.w	r2, r3, #16
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e03f      	b.n	80060a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fb fc43 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2224      	movs	r2, #36	; 0x24
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006054:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f928 	bl	80062ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800606a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800607a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800608a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d17c      	bne.n	80061c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_UART_Transmit+0x2c>
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e075      	b.n	80061c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Transmit+0x3e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e06e      	b.n	80061c8 <HAL_UART_Transmit+0x11c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2221      	movs	r2, #33	; 0x21
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006100:	f7fb fdc4 	bl	8001c8c <HAL_GetTick>
 8006104:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	88fa      	ldrh	r2, [r7, #6]
 800610a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d108      	bne.n	800612e <HAL_UART_Transmit+0x82>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e003      	b.n	8006136 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800613e:	e02a      	b.n	8006196 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2200      	movs	r2, #0
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f840 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e036      	b.n	80061c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3302      	adds	r3, #2
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e007      	b.n	8006188 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1cf      	bne.n	8006140 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f810 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e006      	b.n	80061c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b090      	sub	sp, #64	; 0x40
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e0:	e050      	b.n	8006284 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d04c      	beq.n	8006284 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f0:	f7fb fd4c 	bl	8001c8c <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d241      	bcs.n	8006284 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006220:	637a      	str	r2, [r7, #52]	; 0x34
 8006222:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e5      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006254:	623a      	str	r2, [r7, #32]
 8006256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	61bb      	str	r3, [r7, #24]
   return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e00f      	b.n	80062a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4013      	ands	r3, r2
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d09f      	beq.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3740      	adds	r7, #64	; 0x40
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b0:	b0c0      	sub	sp, #256	; 0x100
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	68d9      	ldr	r1, [r3, #12]
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	ea40 0301 	orr.w	r3, r0, r1
 80062d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006304:	f021 010c 	bic.w	r1, r1, #12
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006312:	430b      	orrs	r3, r1
 8006314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	6999      	ldr	r1, [r3, #24]
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	ea40 0301 	orr.w	r3, r0, r1
 8006332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b8f      	ldr	r3, [pc, #572]	; (8006578 <UART_SetConfig+0x2cc>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d005      	beq.n	800634c <UART_SetConfig+0xa0>
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b8d      	ldr	r3, [pc, #564]	; (800657c <UART_SetConfig+0x2d0>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d104      	bne.n	8006356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7ff fc84 	bl	8005c58 <HAL_RCC_GetPCLK2Freq>
 8006350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006354:	e003      	b.n	800635e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006356:	f7ff fc6b 	bl	8005c30 <HAL_RCC_GetPCLK1Freq>
 800635a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006368:	f040 810c 	bne.w	8006584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800637a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	1891      	adds	r1, r2, r2
 8006384:	65b9      	str	r1, [r7, #88]	; 0x58
 8006386:	415b      	adcs	r3, r3
 8006388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800638e:	4621      	mov	r1, r4
 8006390:	eb12 0801 	adds.w	r8, r2, r1
 8006394:	4629      	mov	r1, r5
 8006396:	eb43 0901 	adc.w	r9, r3, r1
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ae:	4690      	mov	r8, r2
 80063b0:	4699      	mov	r9, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	eb18 0303 	adds.w	r3, r8, r3
 80063b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063bc:	462b      	mov	r3, r5
 80063be:	eb49 0303 	adc.w	r3, r9, r3
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063da:	460b      	mov	r3, r1
 80063dc:	18db      	adds	r3, r3, r3
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
 80063e0:	4613      	mov	r3, r2
 80063e2:	eb42 0303 	adc.w	r3, r2, r3
 80063e6:	657b      	str	r3, [r7, #84]	; 0x54
 80063e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063f0:	f7fa fc2a 	bl	8000c48 <__aeabi_uldivmod>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4b61      	ldr	r3, [pc, #388]	; (8006580 <UART_SetConfig+0x2d4>)
 80063fa:	fba3 2302 	umull	r2, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	011c      	lsls	r4, r3, #4
 8006402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006406:	2200      	movs	r2, #0
 8006408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800640c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	1891      	adds	r1, r2, r2
 800641a:	64b9      	str	r1, [r7, #72]	; 0x48
 800641c:	415b      	adcs	r3, r3
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006424:	4641      	mov	r1, r8
 8006426:	eb12 0a01 	adds.w	sl, r2, r1
 800642a:	4649      	mov	r1, r9
 800642c:	eb43 0b01 	adc.w	fp, r3, r1
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800643c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006444:	4692      	mov	sl, r2
 8006446:	469b      	mov	fp, r3
 8006448:	4643      	mov	r3, r8
 800644a:	eb1a 0303 	adds.w	r3, sl, r3
 800644e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006452:	464b      	mov	r3, r9
 8006454:	eb4b 0303 	adc.w	r3, fp, r3
 8006458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800646c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006470:	460b      	mov	r3, r1
 8006472:	18db      	adds	r3, r3, r3
 8006474:	643b      	str	r3, [r7, #64]	; 0x40
 8006476:	4613      	mov	r3, r2
 8006478:	eb42 0303 	adc.w	r3, r2, r3
 800647c:	647b      	str	r3, [r7, #68]	; 0x44
 800647e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006486:	f7fa fbdf 	bl	8000c48 <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4611      	mov	r1, r2
 8006490:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <UART_SetConfig+0x2d4>)
 8006492:	fba3 2301 	umull	r2, r3, r3, r1
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2264      	movs	r2, #100	; 0x64
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	1acb      	subs	r3, r1, r3
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064a6:	4b36      	ldr	r3, [pc, #216]	; (8006580 <UART_SetConfig+0x2d4>)
 80064a8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064b4:	441c      	add	r4, r3
 80064b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	1891      	adds	r1, r2, r2
 80064ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80064d0:	415b      	adcs	r3, r3
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064d8:	4641      	mov	r1, r8
 80064da:	1851      	adds	r1, r2, r1
 80064dc:	6339      	str	r1, [r7, #48]	; 0x30
 80064de:	4649      	mov	r1, r9
 80064e0:	414b      	adcs	r3, r1
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064f0:	4659      	mov	r1, fp
 80064f2:	00cb      	lsls	r3, r1, #3
 80064f4:	4651      	mov	r1, sl
 80064f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fa:	4651      	mov	r1, sl
 80064fc:	00ca      	lsls	r2, r1, #3
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	4603      	mov	r3, r0
 8006504:	4642      	mov	r2, r8
 8006506:	189b      	adds	r3, r3, r2
 8006508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800650c:	464b      	mov	r3, r9
 800650e:	460a      	mov	r2, r1
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800652c:	460b      	mov	r3, r1
 800652e:	18db      	adds	r3, r3, r3
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	4613      	mov	r3, r2
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800653a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800653e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006542:	f7fa fb81 	bl	8000c48 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <UART_SetConfig+0x2d4>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	2164      	movs	r1, #100	; 0x64
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	3332      	adds	r3, #50	; 0x32
 800655e:	4a08      	ldr	r2, [pc, #32]	; (8006580 <UART_SetConfig+0x2d4>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 0207 	and.w	r2, r3, #7
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4422      	add	r2, r4
 8006572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006574:	e106      	b.n	8006784 <UART_SetConfig+0x4d8>
 8006576:	bf00      	nop
 8006578:	40011000 	.word	0x40011000
 800657c:	40011400 	.word	0x40011400
 8006580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006588:	2200      	movs	r2, #0
 800658a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800658e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	1891      	adds	r1, r2, r2
 800659c:	6239      	str	r1, [r7, #32]
 800659e:	415b      	adcs	r3, r3
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065a6:	4641      	mov	r1, r8
 80065a8:	1854      	adds	r4, r2, r1
 80065aa:	4649      	mov	r1, r9
 80065ac:	eb43 0501 	adc.w	r5, r3, r1
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	00eb      	lsls	r3, r5, #3
 80065ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065be:	00e2      	lsls	r2, r4, #3
 80065c0:	4614      	mov	r4, r2
 80065c2:	461d      	mov	r5, r3
 80065c4:	4643      	mov	r3, r8
 80065c6:	18e3      	adds	r3, r4, r3
 80065c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065cc:	464b      	mov	r3, r9
 80065ce:	eb45 0303 	adc.w	r3, r5, r3
 80065d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065f2:	4629      	mov	r1, r5
 80065f4:	008b      	lsls	r3, r1, #2
 80065f6:	4621      	mov	r1, r4
 80065f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fc:	4621      	mov	r1, r4
 80065fe:	008a      	lsls	r2, r1, #2
 8006600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006604:	f7fa fb20 	bl	8000c48 <__aeabi_uldivmod>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4b60      	ldr	r3, [pc, #384]	; (8006790 <UART_SetConfig+0x4e4>)
 800660e:	fba3 2302 	umull	r2, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	011c      	lsls	r4, r3, #4
 8006616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006628:	4642      	mov	r2, r8
 800662a:	464b      	mov	r3, r9
 800662c:	1891      	adds	r1, r2, r2
 800662e:	61b9      	str	r1, [r7, #24]
 8006630:	415b      	adcs	r3, r3
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006638:	4641      	mov	r1, r8
 800663a:	1851      	adds	r1, r2, r1
 800663c:	6139      	str	r1, [r7, #16]
 800663e:	4649      	mov	r1, r9
 8006640:	414b      	adcs	r3, r1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006650:	4659      	mov	r1, fp
 8006652:	00cb      	lsls	r3, r1, #3
 8006654:	4651      	mov	r1, sl
 8006656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665a:	4651      	mov	r1, sl
 800665c:	00ca      	lsls	r2, r1, #3
 800665e:	4610      	mov	r0, r2
 8006660:	4619      	mov	r1, r3
 8006662:	4603      	mov	r3, r0
 8006664:	4642      	mov	r2, r8
 8006666:	189b      	adds	r3, r3, r2
 8006668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800666c:	464b      	mov	r3, r9
 800666e:	460a      	mov	r2, r1
 8006670:	eb42 0303 	adc.w	r3, r2, r3
 8006674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	67bb      	str	r3, [r7, #120]	; 0x78
 8006682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006690:	4649      	mov	r1, r9
 8006692:	008b      	lsls	r3, r1, #2
 8006694:	4641      	mov	r1, r8
 8006696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669a:	4641      	mov	r1, r8
 800669c:	008a      	lsls	r2, r1, #2
 800669e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066a2:	f7fa fad1 	bl	8000c48 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	4b38      	ldr	r3, [pc, #224]	; (8006790 <UART_SetConfig+0x4e4>)
 80066ae:	fba3 2301 	umull	r2, r3, r3, r1
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2264      	movs	r2, #100	; 0x64
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	1acb      	subs	r3, r1, r3
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	3332      	adds	r3, #50	; 0x32
 80066c0:	4a33      	ldr	r2, [pc, #204]	; (8006790 <UART_SetConfig+0x4e4>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066cc:	441c      	add	r4, r3
 80066ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d2:	2200      	movs	r2, #0
 80066d4:	673b      	str	r3, [r7, #112]	; 0x70
 80066d6:	677a      	str	r2, [r7, #116]	; 0x74
 80066d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	1891      	adds	r1, r2, r2
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	415b      	adcs	r3, r3
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ec:	4641      	mov	r1, r8
 80066ee:	1851      	adds	r1, r2, r1
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	4649      	mov	r1, r9
 80066f4:	414b      	adcs	r3, r1
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006704:	4659      	mov	r1, fp
 8006706:	00cb      	lsls	r3, r1, #3
 8006708:	4651      	mov	r1, sl
 800670a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800670e:	4651      	mov	r1, sl
 8006710:	00ca      	lsls	r2, r1, #3
 8006712:	4610      	mov	r0, r2
 8006714:	4619      	mov	r1, r3
 8006716:	4603      	mov	r3, r0
 8006718:	4642      	mov	r2, r8
 800671a:	189b      	adds	r3, r3, r2
 800671c:	66bb      	str	r3, [r7, #104]	; 0x68
 800671e:	464b      	mov	r3, r9
 8006720:	460a      	mov	r2, r1
 8006722:	eb42 0303 	adc.w	r3, r2, r3
 8006726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	663b      	str	r3, [r7, #96]	; 0x60
 8006732:	667a      	str	r2, [r7, #100]	; 0x64
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006740:	4649      	mov	r1, r9
 8006742:	008b      	lsls	r3, r1, #2
 8006744:	4641      	mov	r1, r8
 8006746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674a:	4641      	mov	r1, r8
 800674c:	008a      	lsls	r2, r1, #2
 800674e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006752:	f7fa fa79 	bl	8000c48 <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <UART_SetConfig+0x4e4>)
 800675c:	fba3 1302 	umull	r1, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2164      	movs	r1, #100	; 0x64
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	3332      	adds	r3, #50	; 0x32
 800676e:	4a08      	ldr	r2, [pc, #32]	; (8006790 <UART_SetConfig+0x4e4>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 020f 	and.w	r2, r3, #15
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4422      	add	r2, r4
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800678a:	46bd      	mov	sp, r7
 800678c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006790:	51eb851f 	.word	0x51eb851f

08006794 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006794:	b084      	sub	sp, #16
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	f107 001c 	add.w	r0, r7, #28
 80067a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d122      	bne.n	80067f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9c0 	bl	8006b6c <USB_CoreReset>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e01a      	b.n	8006828 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9b4 	bl	8006b6c <USB_CoreReset>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
 800681a:	e005      	b.n	8006828 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	2b01      	cmp	r3, #1
 800682c:	d10b      	bne.n	8006846 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f043 0206 	orr.w	r2, r3, #6
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006852:	b004      	add	sp, #16
 8006854:	4770      	bx	lr

08006856 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 0201 	bic.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d115      	bne.n	80068e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068c8:	2001      	movs	r0, #1
 80068ca:	f7fb f9eb 	bl	8001ca4 <HAL_Delay>
      ms++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f93a 	bl	8006b4e <USB_GetMode>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d01e      	beq.n	800691e <USB_SetCurrentMode+0x84>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b31      	cmp	r3, #49	; 0x31
 80068e4:	d9f0      	bls.n	80068c8 <USB_SetCurrentMode+0x2e>
 80068e6:	e01a      	b.n	800691e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d115      	bne.n	800691a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f7fb f9d2 	bl	8001ca4 <HAL_Delay>
      ms++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f921 	bl	8006b4e <USB_GetMode>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <USB_SetCurrentMode+0x84>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b31      	cmp	r3, #49	; 0x31
 8006916:	d9f0      	bls.n	80068fa <USB_SetCurrentMode+0x60>
 8006918:	e001      	b.n	800691e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e005      	b.n	800692a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b32      	cmp	r3, #50	; 0x32
 8006922:	d101      	bne.n	8006928 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <USB_FlushTxFifo+0x64>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e01b      	b.n	800698c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	daf2      	bge.n	8006942 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	019b      	lsls	r3, r3, #6
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <USB_FlushTxFifo+0x64>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e006      	b.n	800698c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b20      	cmp	r3, #32
 8006988:	d0f0      	beq.n	800696c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	00030d40 	.word	0x00030d40

0800699c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <USB_FlushRxFifo+0x5c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e018      	b.n	80069ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	daf2      	bge.n	80069a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2210      	movs	r2, #16
 80069ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <USB_FlushRxFifo+0x5c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e006      	b.n	80069ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d0f0      	beq.n	80069cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	00030d40 	.word	0x00030d40

080069fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b089      	sub	sp, #36	; 0x24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	71fb      	strb	r3, [r7, #7]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d123      	bne.n	8006a6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a22:	88bb      	ldrh	r3, [r7, #4]
 8006a24:	3303      	adds	r3, #3
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e018      	b.n	8006a62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	031a      	lsls	r2, r3, #12
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3e2      	bcc.n	8006a30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3724      	adds	r7, #36	; 0x24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b08b      	sub	sp, #44	; 0x2c
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	089b      	lsrs	r3, r3, #2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	e014      	b.n	8006ace <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	3301      	adds	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	3301      	adds	r3, #1
 8006acc:	623b      	str	r3, [r7, #32]
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d3e6      	bcc.n	8006aa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ad6:	8bfb      	ldrh	r3, [r7, #30]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01e      	beq.n	8006b1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f107 0310 	add.w	r3, r7, #16
 8006aec:	6812      	ldr	r2, [r2, #0]
 8006aee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	701a      	strb	r2, [r3, #0]
      i++;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	3301      	adds	r3, #1
 8006b06:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b0e:	8bfb      	ldrh	r3, [r7, #30]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b14:	8bfb      	ldrh	r3, [r7, #30]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1ea      	bne.n	8006af0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	372c      	adds	r7, #44	; 0x2c
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <USB_CoreReset+0x64>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e01b      	b.n	8006bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	daf2      	bge.n	8006b78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <USB_CoreReset+0x64>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e006      	b.n	8006bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d0f0      	beq.n	8006ba2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	00030d40 	.word	0x00030d40

08006bd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d018      	beq.n	8006c5c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10a      	bne.n	8006c46 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c3e:	f043 0304 	orr.w	r3, r3, #4
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e014      	b.n	8006c70 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e009      	b.n	8006c70 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c6a:	f023 0304 	bic.w	r3, r3, #4
 8006c6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c70:	2110      	movs	r1, #16
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fe5e 	bl	8006934 <USB_FlushTxFifo>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fe8a 	bl	800699c <USB_FlushRxFifo>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e015      	b.n	8006cc4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8006caa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d3e5      	bcc.n	8006c98 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <USB_HostInit+0x16c>)
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <USB_HostInit+0x170>)
 8006cf8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006cfc:	e009      	b.n	8006d12 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <USB_HostInit+0x174>)
 8006d08:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a0f      	ldr	r2, [pc, #60]	; (8006d4c <USB_HostInit+0x178>)
 8006d0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f043 0210 	orr.w	r2, r3, #16
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <USB_HostInit+0x17c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d3c:	b004      	add	sp, #16
 8006d3e:	4770      	bx	lr
 8006d40:	01000200 	.word	0x01000200
 8006d44:	00e00300 	.word	0x00e00300
 8006d48:	00600080 	.word	0x00600080
 8006d4c:	004000e0 	.word	0x004000e0
 8006d50:	a3200008 	.word	0xa3200008

08006d54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d107      	bne.n	8006da6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006da2:	6053      	str	r3, [r2, #4]
 8006da4:	e009      	b.n	8006dba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d106      	bne.n	8006dba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006db2:	461a      	mov	r2, r3
 8006db4:	f241 7370 	movw	r3, #6000	; 0x1770
 8006db8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006de8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006df8:	2064      	movs	r0, #100	; 0x64
 8006dfa:	f7fa ff53 	bl	8001ca4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e0c:	200a      	movs	r0, #10
 8006e0e:	f7fa ff49 	bl	8001ca4 <HAL_Delay>

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <USB_DriveVbus+0x44>
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d106      	bne.n	8006e60 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e5e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6a:	d109      	bne.n	8006e80 <USB_DriveVbus+0x64>
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e7e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	0c5b      	lsrs	r3, r3, #17
 8006eac:	f003 0303 	and.w	r3, r3, #3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	b29b      	uxth	r3, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	461a      	mov	r2, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	70fb      	strb	r3, [r7, #3]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70bb      	strb	r3, [r7, #2]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d87e      	bhi.n	800701c <USB_HC_Init+0x13c>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <USB_HC_Init+0x44>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006fdf 	.word	0x08006fdf
 8006f2c:	08006f35 	.word	0x08006f35
 8006f30:	08006fa1 	.word	0x08006fa1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f40:	461a      	mov	r2, r3
 8006f42:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da10      	bge.n	8006f72 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006f70:	e057      	b.n	8007022 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d051      	beq.n	8007022 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f9c:	60d3      	str	r3, [r2, #12]
      break;
 8006f9e:	e040      	b.n	8007022 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fac:	461a      	mov	r2, r3
 8006fae:	f240 639d 	movw	r3, #1693	; 0x69d
 8006fb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da34      	bge.n	8007026 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006fdc:	e023      	b.n	8007026 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	f240 2325 	movw	r3, #549	; 0x225
 8006ff0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ff2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da17      	bge.n	800702a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	440a      	add	r2, r1
 8007010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007014:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007018:	60d3      	str	r3, [r2, #12]
      }
      break;
 800701a:	e006      	b.n	800702a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77fb      	strb	r3, [r7, #31]
      break;
 8007020:	e004      	b.n	800702c <USB_HC_Init+0x14c>
      break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <USB_HC_Init+0x14c>
      break;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <USB_HC_Init+0x14c>
      break;
 800702a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	440a      	add	r2, r1
 8007042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007046:	f043 0302 	orr.w	r3, r3, #2
 800704a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007052:	699a      	ldr	r2, [r3, #24]
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	2101      	movs	r1, #1
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	6939      	ldr	r1, [r7, #16]
 8007062:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007066:	4313      	orrs	r3, r2
 8007068:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007076:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	da03      	bge.n	8007086 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800707e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007082:	61bb      	str	r3, [r7, #24]
 8007084:	e001      	b.n	800708a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff feff 	bl	8006e8e <USB_GetHostSpeed>
 8007090:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007096:	2b02      	cmp	r3, #2
 8007098:	d106      	bne.n	80070a8 <USB_HC_Init+0x1c8>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d003      	beq.n	80070a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80070a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e001      	b.n	80070ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070ac:	787b      	ldrb	r3, [r7, #1]
 80070ae:	059b      	lsls	r3, r3, #22
 80070b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070b4:	78bb      	ldrb	r3, [r7, #2]
 80070b6:	02db      	lsls	r3, r3, #11
 80070b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070c2:	049b      	lsls	r3, r3, #18
 80070c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	0159      	lsls	r1, r3, #5
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	440b      	add	r3, r1
 80070de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80070ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d003      	beq.n	80070fa <USB_HC_Init+0x21a>
 80070f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10f      	bne.n	800711a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	440a      	add	r2, r1
 8007110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007118:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800711a:	7ffb      	ldrb	r3, [r7, #31]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08c      	sub	sp, #48	; 0x30
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800713c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007140:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d02d      	beq.n	80071aa <USB_HC_StartXfer+0x86>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	791b      	ldrb	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d129      	bne.n	80071aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d117      	bne.n	800718c <USB_HC_StartXfer+0x68>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	79db      	ldrb	r3, [r3, #7]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <USB_HC_StartXfer+0x48>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	79db      	ldrb	r3, [r3, #7]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d10f      	bne.n	800718c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	440a      	add	r2, r1
 8007182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <USB_HC_StartXfer+0x86>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa0f 	bl	80075c4 <USB_DoPing>
      return HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e0f8      	b.n	800739c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d018      	beq.n	80071e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	8912      	ldrh	r2, [r2, #8]
 80071ba:	4413      	add	r3, r2
 80071bc:	3b01      	subs	r3, #1
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	8912      	ldrh	r2, [r2, #8]
 80071c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80071c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071ca:	8b7b      	ldrh	r3, [r7, #26]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d90b      	bls.n	80071e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80071d0:	8b7b      	ldrh	r3, [r7, #26]
 80071d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	8912      	ldrh	r2, [r2, #8]
 80071da:	fb03 f202 	mul.w	r2, r3, r2
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	611a      	str	r2, [r3, #16]
 80071e2:	e001      	b.n	80071e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80071e4:	2301      	movs	r3, #1
 80071e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	78db      	ldrb	r3, [r3, #3]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d007      	beq.n	8007200 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	8912      	ldrh	r2, [r2, #8]
 80071f6:	fb03 f202 	mul.w	r2, r3, r2
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	611a      	str	r2, [r3, #16]
 80071fe:	e003      	b.n	8007208 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007212:	04d9      	lsls	r1, r3, #19
 8007214:	4b63      	ldr	r3, [pc, #396]	; (80073a4 <USB_HC_StartXfer+0x280>)
 8007216:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007218:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	7a9b      	ldrb	r3, [r3, #10]
 800721e:	075b      	lsls	r3, r3, #29
 8007220:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	0148      	lsls	r0, r1, #5
 8007228:	6a39      	ldr	r1, [r7, #32]
 800722a:	4401      	add	r1, r0
 800722c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007230:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007232:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68d9      	ldr	r1, [r3, #12]
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	4413      	add	r3, r2
 8007246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724a:	460a      	mov	r2, r1
 800724c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	440a      	add	r2, r1
 800727c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007280:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007284:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	4413      	add	r3, r2
 800728e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	7e7b      	ldrb	r3, [r7, #25]
 8007296:	075b      	lsls	r3, r3, #29
 8007298:	69f9      	ldr	r1, [r7, #28]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	6a39      	ldr	r1, [r7, #32]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80072a4:	4313      	orrs	r3, r2
 80072a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	e003      	b.n	80072da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ee:	461a      	mov	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e04e      	b.n	800739c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	78db      	ldrb	r3, [r3, #3]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d149      	bne.n	800739a <USB_HC_StartXfer+0x276>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d045      	beq.n	800739a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	79db      	ldrb	r3, [r3, #7]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d830      	bhi.n	8007378 <USB_HC_StartXfer+0x254>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <USB_HC_StartXfer+0x1f8>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	0800732d 	.word	0x0800732d
 8007320:	08007351 	.word	0x08007351
 8007324:	0800732d 	.word	0x0800732d
 8007328:	08007351 	.word	0x08007351
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	3303      	adds	r3, #3
 8007332:	089b      	lsrs	r3, r3, #2
 8007334:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007336:	8afa      	ldrh	r2, [r7, #22]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	b29b      	uxth	r3, r3
 800733e:	429a      	cmp	r2, r3
 8007340:	d91c      	bls.n	800737c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	619a      	str	r2, [r3, #24]
        }
        break;
 800734e:	e015      	b.n	800737c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	3303      	adds	r3, #3
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800735a:	8afa      	ldrh	r2, [r7, #22]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	b29b      	uxth	r3, r3
 8007366:	429a      	cmp	r2, r3
 8007368:	d90a      	bls.n	8007380 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	619a      	str	r2, [r3, #24]
        }
        break;
 8007376:	e003      	b.n	8007380 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007378:	bf00      	nop
 800737a:	e002      	b.n	8007382 <USB_HC_StartXfer+0x25e>
        break;
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <USB_HC_StartXfer+0x25e>
        break;
 8007380:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	68d9      	ldr	r1, [r3, #12]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	785a      	ldrb	r2, [r3, #1]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	b29b      	uxth	r3, r3
 8007390:	2000      	movs	r0, #0
 8007392:	9000      	str	r0, [sp, #0]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff fb31 	bl	80069fc <USB_WritePacket>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	1ff80000 	.word	0x1ff80000

080073a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	b29b      	uxth	r3, r3
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b089      	sub	sp, #36	; 0x24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	0c9b      	lsrs	r3, r3, #18
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	0fdb      	lsrs	r3, r3, #31
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b20      	cmp	r3, #32
 8007418:	d104      	bne.n	8007424 <USB_HC_Halt+0x5a>
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e0c8      	b.n	80075b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <USB_HC_Halt+0x66>
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d163      	bne.n	80074f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	440a      	add	r2, r1
 8007446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800744a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	f040 80ab 	bne.w	80075b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d133      	bne.n	80074d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007488:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	4413      	add	r3, r2
 8007492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b6:	d81d      	bhi.n	80074f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ce:	d0ec      	beq.n	80074aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074d0:	e070      	b.n	80075b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074f2:	e05f      	b.n	80075b4 <USB_HC_Halt+0x1ea>
            break;
 80074f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074f6:	e05d      	b.n	80075b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	440a      	add	r2, r1
 800750e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007516:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d133      	bne.n	8007590 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	440a      	add	r2, r1
 800753e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007546:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007566:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007574:	d81d      	bhi.n	80075b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800758c:	d0ec      	beq.n	8007568 <USB_HC_Halt+0x19e>
 800758e:	e011      	b.n	80075b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e000      	b.n	80075b4 <USB_HC_Halt+0x1ea>
          break;
 80075b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3724      	adds	r7, #36	; 0x24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80075d8:	2301      	movs	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	04da      	lsls	r2, r3, #19
 80075e0:	4b15      	ldr	r3, [pc, #84]	; (8007638 <USB_DoPing+0x74>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800760c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007614:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4413      	add	r3, r2
 800761e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007622:	461a      	mov	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	1ff80000 	.word	0x1ff80000

0800763c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff f911 	bl	8006878 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007656:	2110      	movs	r1, #16
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff f96b 	bl	8006934 <USB_FlushTxFifo>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff f997 	bl	800699c <USB_FlushRxFifo>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	e01f      	b.n	80076be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800769c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	d9dc      	bls.n	800767e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	e034      	b.n	8007734 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fe:	461a      	mov	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007710:	d80c      	bhi.n	800772c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007728:	d0ec      	beq.n	8007704 <USB_StopHost+0xc8>
 800772a:	e000      	b.n	800772e <USB_StopHost+0xf2>
        break;
 800772c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	3301      	adds	r3, #1
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d9c7      	bls.n	80076ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007740:	461a      	mov	r2, r3
 8007742:	f04f 33ff 	mov.w	r3, #4294967295
 8007746:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff f880 	bl	8006856 <USB_EnableGlobalInt>

  return ret;
 8007756:	7ffb      	ldrb	r3, [r7, #31]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af04      	add	r7, sp, #16
 8007766:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007768:	2301      	movs	r3, #1
 800776a:	2202      	movs	r2, #2
 800776c:	2102      	movs	r1, #2
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc66 	bl	8008040 <USBH_FindInterface>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d002      	beq.n	8007784 <USBH_CDC_InterfaceInit+0x24>
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d901      	bls.n	8007788 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007784:	2302      	movs	r3, #2
 8007786:	e13d      	b.n	8007a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fc3b 	bl	8008008 <USBH_SelectInterface>
 8007792:	4603      	mov	r3, r0
 8007794:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800779c:	2302      	movs	r3, #2
 800779e:	e131      	b.n	8007a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80077a6:	2050      	movs	r0, #80	; 0x50
 80077a8:	f002 fad2 	bl	8009d50 <malloc>
 80077ac:	4603      	mov	r3, r0
 80077ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80077c0:	2302      	movs	r3, #2
 80077c2:	e11f      	b.n	8007a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80077c4:	2250      	movs	r2, #80	; 0x50
 80077c6:	2100      	movs	r1, #0
 80077c8:	68b8      	ldr	r0, [r7, #8]
 80077ca:	f003 f9e1 	bl	800ab90 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	211a      	movs	r1, #26
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	4413      	add	r3, r2
 80077da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da15      	bge.n	8007812 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	211a      	movs	r1, #26
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	211a      	movs	r1, #26
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800780c:	881a      	ldrh	r2, [r3, #0]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 ff2e 	bl	800967a <USBH_AllocPipe>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	7819      	ldrb	r1, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	7858      	ldrb	r0, [r3, #1]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	8952      	ldrh	r2, [r2, #10]
 800783e:	9202      	str	r2, [sp, #8]
 8007840:	2203      	movs	r2, #3
 8007842:	9201      	str	r2, [sp, #4]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4623      	mov	r3, r4
 8007848:	4602      	mov	r2, r0
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fee6 	bl	800961c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2200      	movs	r2, #0
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 f9f5 	bl	8009c48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800785e:	2300      	movs	r3, #0
 8007860:	2200      	movs	r2, #0
 8007862:	210a      	movs	r1, #10
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbeb 	bl	8008040 <USBH_FindInterface>
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2bff      	cmp	r3, #255	; 0xff
 8007872:	d002      	beq.n	800787a <USBH_CDC_InterfaceInit+0x11a>
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d901      	bls.n	800787e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	e0c2      	b.n	8007a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	211a      	movs	r1, #26
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	4413      	add	r3, r2
 800788a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b25b      	sxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	da16      	bge.n	80078c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	211a      	movs	r1, #26
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	211a      	movs	r1, #26
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	835a      	strh	r2, [r3, #26]
 80078c2:	e015      	b.n	80078f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	211a      	movs	r1, #26
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	211a      	movs	r1, #26
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	211a      	movs	r1, #26
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b25b      	sxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	da16      	bge.n	8007936 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	211a      	movs	r1, #26
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	211a      	movs	r1, #26
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	835a      	strh	r2, [r3, #26]
 8007934:	e015      	b.n	8007962 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	211a      	movs	r1, #26
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	4413      	add	r3, r2
 8007942:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	211a      	movs	r1, #26
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	7b9b      	ldrb	r3, [r3, #14]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fe86 	bl	800967a <USBH_AllocPipe>
 800796e:	4603      	mov	r3, r0
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	7bdb      	ldrb	r3, [r3, #15]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 fe7c 	bl	800967a <USBH_AllocPipe>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	7b59      	ldrb	r1, [r3, #13]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	7b98      	ldrb	r0, [r3, #14]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	8b12      	ldrh	r2, [r2, #24]
 80079a2:	9202      	str	r2, [sp, #8]
 80079a4:	2202      	movs	r2, #2
 80079a6:	9201      	str	r2, [sp, #4]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4623      	mov	r3, r4
 80079ac:	4602      	mov	r2, r0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fe34 	bl	800961c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	7b19      	ldrb	r1, [r3, #12]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	7bd8      	ldrb	r0, [r3, #15]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	8b52      	ldrh	r2, [r2, #26]
 80079cc:	9202      	str	r2, [sp, #8]
 80079ce:	2202      	movs	r2, #2
 80079d0:	9201      	str	r2, [sp, #4]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4623      	mov	r3, r4
 80079d6:	4602      	mov	r2, r0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fe1f 	bl	800961c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	7b5b      	ldrb	r3, [r3, #13]
 80079ea:	2200      	movs	r2, #0
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 f92a 	bl	8009c48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	7b1b      	ldrb	r3, [r3, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f002 f923 	bl	8009c48 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd90      	pop	{r4, r7, pc}

08007a0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00e      	beq.n	8007a44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fe14 	bl	800965a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fe3f 	bl	80096bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	7b1b      	ldrb	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00e      	beq.n	8007a6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	7b1b      	ldrb	r3, [r3, #12]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fe01 	bl	800965a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fe2c 	bl	80096bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	7b5b      	ldrb	r3, [r3, #13]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00e      	beq.n	8007a90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7b5b      	ldrb	r3, [r3, #13]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fdee 	bl	800965a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	7b5b      	ldrb	r3, [r3, #13]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fe19 	bl	80096bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 f95b 	bl	8009d60 <free>
    phost->pActiveClass->pData = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3340      	adds	r3, #64	; 0x40
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8b1 	bl	8007c3e <GetLineCoding>
 8007adc:	4603      	mov	r3, r0
 8007ade:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007aec:	2102      	movs	r1, #2
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007af2:	7afb      	ldrb	r3, [r7, #11]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d877      	bhi.n	8007c10 <USBH_CDC_Process+0x114>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <USBH_CDC_Process+0x2c>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b43 	.word	0x08007b43
 8007b30:	08007b73 	.word	0x08007b73
 8007b34:	08007be7 	.word	0x08007be7
 8007b38:	08007bf5 	.word	0x08007bf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b40:	e06d      	b.n	8007c1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f897 	bl	8007c7c <SetLineCoding>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b60:	e058      	b.n	8007c14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d055      	beq.n	8007c14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b70:	e050      	b.n	8007c14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3340      	adds	r3, #64	; 0x40
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f860 	bl	8007c3e <GetLineCoding>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d126      	bne.n	8007bd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9a:	791b      	ldrb	r3, [r3, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d13b      	bne.n	8007c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d133      	bne.n	8007c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d12b      	bne.n	8007c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d124      	bne.n	8007c18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f958 	bl	8007e84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bd4:	e020      	b.n	8007c18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d01d      	beq.n	8007c18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2204      	movs	r2, #4
 8007be0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007be4:	e018      	b.n	8007c18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f867 	bl	8007cba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f8da 	bl	8007da6 <CDC_ProcessReception>
      break;
 8007bf2:	e014      	b.n	8007c1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 ffef 	bl	8008bda <USBH_ClrFeature>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c0e:	e005      	b.n	8007c1c <USBH_CDC_Process+0x120>

    default:
      break;
 8007c10:	bf00      	nop
 8007c12:	e004      	b.n	8007c1e <USBH_CDC_Process+0x122>
      break;
 8007c14:	bf00      	nop
 8007c16:	e002      	b.n	8007c1e <USBH_CDC_Process+0x122>
      break;
 8007c18:	bf00      	nop
 8007c1a:	e000      	b.n	8007c1e <USBH_CDC_Process+0x122>
      break;
 8007c1c:	bf00      	nop

  }

  return status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	22a1      	movs	r2, #161	; 0xa1
 8007c4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2221      	movs	r2, #33	; 0x21
 8007c52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2207      	movs	r2, #7
 8007c64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2207      	movs	r2, #7
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fa83 	bl	8009178 <USBH_CtlReq>
 8007c72:	4603      	mov	r3, r0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2221      	movs	r2, #33	; 0x21
 8007c8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2207      	movs	r2, #7
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fa64 	bl	8009178 <USBH_CtlReq>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b086      	sub	sp, #24
 8007cbe:	af02      	add	r7, sp, #8
 8007cc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d002      	beq.n	8007ce0 <CDC_ProcessTransmission+0x26>
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d023      	beq.n	8007d26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007cde:	e05e      	b.n	8007d9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	8b12      	ldrh	r2, [r2, #24]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d90b      	bls.n	8007d04 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	69d9      	ldr	r1, [r3, #28]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8b1a      	ldrh	r2, [r3, #24]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	7b5b      	ldrb	r3, [r3, #13]
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	9000      	str	r0, [sp, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 fc4a 	bl	8009596 <USBH_BulkSendData>
 8007d02:	e00b      	b.n	8007d1c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	7b5b      	ldrb	r3, [r3, #13]
 8007d12:	2001      	movs	r0, #1
 8007d14:	9000      	str	r0, [sp, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fc3d 	bl	8009596 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d24:	e03b      	b.n	8007d9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	7b5b      	ldrb	r3, [r3, #13]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 ff61 	bl	8009bf4 <USBH_LL_GetURBState>
 8007d32:	4603      	mov	r3, r0
 8007d34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d128      	bne.n	8007d8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	8b12      	ldrh	r2, [r2, #24]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d90e      	bls.n	8007d66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	8b12      	ldrh	r2, [r2, #24]
 8007d50:	1a9a      	subs	r2, r3, r2
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	8b12      	ldrh	r2, [r2, #24]
 8007d5e:	441a      	add	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	61da      	str	r2, [r3, #28]
 8007d64:	e002      	b.n	8007d6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d7c:	e00e      	b.n	8007d9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f868 	bl	8007e5c <USBH_CDC_TransmitCallback>
      break;
 8007d8c:	e006      	b.n	8007d9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d103      	bne.n	8007d9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d9c:	bf00      	nop
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d002      	beq.n	8007dcc <CDC_ProcessReception+0x26>
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d00e      	beq.n	8007de8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007dca:	e043      	b.n	8007e54 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	6a19      	ldr	r1, [r3, #32]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	8b5a      	ldrh	r2, [r3, #26]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	7b1b      	ldrb	r3, [r3, #12]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fc01 	bl	80095e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2204      	movs	r2, #4
 8007de2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007de6:	e035      	b.n	8007e54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	7b1b      	ldrb	r3, [r3, #12]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 ff00 	bl	8009bf4 <USBH_LL_GetURBState>
 8007df4:	4603      	mov	r3, r0
 8007df6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d129      	bne.n	8007e52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	7b1b      	ldrb	r3, [r3, #12]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fe63 	bl	8009ad0 <USBH_LL_GetLastXferSize>
 8007e0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d016      	beq.n	8007e44 <CDC_ProcessReception+0x9e>
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	8b5b      	ldrh	r3, [r3, #26]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d910      	bls.n	8007e44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad2      	subs	r2, r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	441a      	add	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e42:	e006      	b.n	8007e52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f80f 	bl	8007e70 <USBH_CDC_ReceiveCallback>
      break;
 8007e52:	bf00      	nop
  }
}
 8007e54:	bf00      	nop
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007eac:	2302      	movs	r3, #2
 8007eae:	e029      	b.n	8007f04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	79fa      	ldrb	r2, [r7, #7]
 8007eb4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f81f 	bl	8007f0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fd33 	bl	8009968 <USBH_LL_Init>

  return USBH_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e009      	b.n	8007f32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	33e0      	adds	r3, #224	; 0xe0
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	2200      	movs	r2, #0
 8007f2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b0f      	cmp	r3, #15
 8007f36:	d9f2      	bls.n	8007f1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e009      	b.n	8007f52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f58:	d3f1      	bcc.n	8007f3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2240      	movs	r2, #64	; 0x40
 8007f7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10e      	bne.n	8007ff0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fd8:	1c59      	adds	r1, r3, #1
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	33de      	adds	r3, #222	; 0xde
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
 8007fee:	e004      	b.n	8007ffa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	73fb      	strb	r3, [r7, #15]
 8007ff4:	e001      	b.n	8007ffa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	429a      	cmp	r2, r3
 8008022:	d204      	bcs.n	800802e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800802c:	e001      	b.n	8008032 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800802e:	2302      	movs	r3, #2
 8008030:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	4608      	mov	r0, r1
 800804a:	4611      	mov	r1, r2
 800804c:	461a      	mov	r2, r3
 800804e:	4603      	mov	r3, r0
 8008050:	70fb      	strb	r3, [r7, #3]
 8008052:	460b      	mov	r3, r1
 8008054:	70bb      	strb	r3, [r7, #2]
 8008056:	4613      	mov	r3, r2
 8008058:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008068:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800806a:	e025      	b.n	80080b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	221a      	movs	r2, #26
 8008070:	fb02 f303 	mul.w	r3, r2, r3
 8008074:	3308      	adds	r3, #8
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	3302      	adds	r3, #2
 800807c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	795b      	ldrb	r3, [r3, #5]
 8008082:	78fa      	ldrb	r2, [r7, #3]
 8008084:	429a      	cmp	r2, r3
 8008086:	d002      	beq.n	800808e <USBH_FindInterface+0x4e>
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	2bff      	cmp	r3, #255	; 0xff
 800808c:	d111      	bne.n	80080b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008092:	78ba      	ldrb	r2, [r7, #2]
 8008094:	429a      	cmp	r2, r3
 8008096:	d002      	beq.n	800809e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008098:	78bb      	ldrb	r3, [r7, #2]
 800809a:	2bff      	cmp	r3, #255	; 0xff
 800809c:	d109      	bne.n	80080b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080a2:	787a      	ldrb	r2, [r7, #1]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d002      	beq.n	80080ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080a8:	787b      	ldrb	r3, [r7, #1]
 80080aa:	2bff      	cmp	r3, #255	; 0xff
 80080ac:	d101      	bne.n	80080b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	e006      	b.n	80080c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	3301      	adds	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d9d6      	bls.n	800806c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80080be:	23ff      	movs	r3, #255	; 0xff
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fc83 	bl	80099e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fd9c 	bl	8009c1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80080f4:	2302      	movs	r3, #2
 80080f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d102      	bne.n	800810e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2203      	movs	r2, #3
 800810c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b0b      	cmp	r3, #11
 8008116:	f200 81be 	bhi.w	8008496 <USBH_Process+0x3aa>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <USBH_Process+0x34>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	08008151 	.word	0x08008151
 8008124:	08008183 	.word	0x08008183
 8008128:	080081eb 	.word	0x080081eb
 800812c:	08008431 	.word	0x08008431
 8008130:	08008497 	.word	0x08008497
 8008134:	0800828f 	.word	0x0800828f
 8008138:	080083d7 	.word	0x080083d7
 800813c:	080082c5 	.word	0x080082c5
 8008140:	080082e5 	.word	0x080082e5
 8008144:	08008305 	.word	0x08008305
 8008148:	08008349 	.word	0x08008349
 800814c:	08008419 	.word	0x08008419
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 819e 	beq.w	800849a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008164:	20c8      	movs	r0, #200	; 0xc8
 8008166:	f001 fd9f 	bl	8009ca8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 fc95 	bl	8009a9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008180:	e18b      	b.n	800849a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008188:	2b01      	cmp	r3, #1
 800818a:	d107      	bne.n	800819c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800819a:	e18d      	b.n	80084b8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a6:	d914      	bls.n	80081d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081ae:	3301      	adds	r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d903      	bls.n	80081ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	220d      	movs	r2, #13
 80081c6:	701a      	strb	r2, [r3, #0]
      break;
 80081c8:	e176      	b.n	80084b8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
      break;
 80081d0:	e172      	b.n	80084b8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081d8:	f103 020a 	add.w	r2, r3, #10
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80081e2:	200a      	movs	r0, #10
 80081e4:	f001 fd60 	bl	8009ca8 <USBH_Delay>
      break;
 80081e8:	e166      	b.n	80084b8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081fa:	2104      	movs	r1, #4
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008200:	2064      	movs	r0, #100	; 0x64
 8008202:	f001 fd51 	bl	8009ca8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fc20 	bl	8009a4c <USBH_LL_GetSpeed>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2205      	movs	r2, #5
 800821a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fa2b 	bl	800967a <USBH_AllocPipe>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fa23 	bl	800967a <USBH_AllocPipe>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7919      	ldrb	r1, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008250:	b292      	uxth	r2, r2
 8008252:	9202      	str	r2, [sp, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	9201      	str	r2, [sp, #4]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4603      	mov	r3, r0
 800825c:	2280      	movs	r2, #128	; 0x80
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f9dc 	bl	800961c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7959      	ldrb	r1, [r3, #5]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008278:	b292      	uxth	r2, r2
 800827a:	9202      	str	r2, [sp, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	9201      	str	r2, [sp, #4]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4603      	mov	r3, r0
 8008284:	2200      	movs	r2, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f9c8 	bl	800961c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800828c:	e114      	b.n	80084b8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f918 	bl	80084c4 <USBH_HandleEnum>
 8008294:	4603      	mov	r3, r0
 8008296:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 80fe 	bne.w	800849e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d103      	bne.n	80082bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2208      	movs	r2, #8
 80082b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082ba:	e0f0      	b.n	800849e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2207      	movs	r2, #7
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e0ec      	b.n	800849e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 80e9 	beq.w	80084a2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082d6:	2101      	movs	r1, #1
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2208      	movs	r2, #8
 80082e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80082e2:	e0de      	b.n	80084a2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fc2c 	bl	8008b4c <USBH_SetCfg>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 80d5 	bne.w	80084a6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2209      	movs	r2, #9
 8008300:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008302:	e0d0      	b.n	80084a6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d016      	beq.n	8008340 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fc3c 	bl	8008b92 <USBH_SetFeature>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220a      	movs	r2, #10
 800832a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800832c:	e0bd      	b.n	80084aa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b03      	cmp	r3, #3
 8008334:	f040 80b9 	bne.w	80084aa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	220a      	movs	r2, #10
 800833c:	701a      	strb	r2, [r3, #0]
      break;
 800833e:	e0b4      	b.n	80084aa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	220a      	movs	r2, #10
 8008344:	701a      	strb	r2, [r3, #0]
      break;
 8008346:	e0b0      	b.n	80084aa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80ad 	beq.w	80084ae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e016      	b.n	8008390 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	32de      	adds	r2, #222	; 0xde
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	791a      	ldrb	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008374:	429a      	cmp	r2, r3
 8008376:	d108      	bne.n	800838a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008378:	7bfa      	ldrb	r2, [r7, #15]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32de      	adds	r2, #222	; 0xde
 800837e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008388:	e005      	b.n	8008396 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	3301      	adds	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0e5      	beq.n	8008362 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d016      	beq.n	80083ce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2206      	movs	r2, #6
 80083b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083be:	2103      	movs	r1, #3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083c4:	e073      	b.n	80084ae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	220d      	movs	r2, #13
 80083ca:	701a      	strb	r2, [r3, #0]
      break;
 80083cc:	e06f      	b.n	80084ae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	220d      	movs	r2, #13
 80083d2:	701a      	strb	r2, [r3, #0]
      break;
 80083d4:	e06b      	b.n	80084ae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d017      	beq.n	8008410 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220b      	movs	r2, #11
 80083fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083fe:	e058      	b.n	80084b2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d154      	bne.n	80084b2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	220d      	movs	r2, #13
 800840c:	701a      	strb	r2, [r3, #0]
      break;
 800840e:	e050      	b.n	80084b2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	220d      	movs	r2, #13
 8008414:	701a      	strb	r2, [r3, #0]
      break;
 8008416:	e04c      	b.n	80084b2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d049      	beq.n	80084b6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
      }
      break;
 800842e:	e042      	b.n	80084b6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fd67 	bl	8007f0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800846c:	2105      	movs	r1, #5
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d107      	bne.n	800848e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff fe20 	bl	80080cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800848c:	e014      	b.n	80084b8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 faa6 	bl	80099e0 <USBH_LL_Start>
      break;
 8008494:	e010      	b.n	80084b8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008496:	bf00      	nop
 8008498:	e00e      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 800849a:	bf00      	nop
 800849c:	e00c      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 800849e:	bf00      	nop
 80084a0:	e00a      	b.n	80084b8 <USBH_Process+0x3cc>
    break;
 80084a2:	bf00      	nop
 80084a4:	e008      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 80084a6:	bf00      	nop
 80084a8:	e006      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 80084aa:	bf00      	nop
 80084ac:	e004      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 80084ae:	bf00      	nop
 80084b0:	e002      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <USBH_Process+0x3cc>
      break;
 80084b6:	bf00      	nop
  }
  return USBH_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop

080084c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af04      	add	r7, sp, #16
 80084ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	f200 81c1 	bhi.w	8008860 <USBH_HandleEnum+0x39c>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBH_HandleEnum+0x20>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008505 	.word	0x08008505
 80084e8:	080085c3 	.word	0x080085c3
 80084ec:	0800862d 	.word	0x0800862d
 80084f0:	080086bb 	.word	0x080086bb
 80084f4:	08008725 	.word	0x08008725
 80084f8:	08008795 	.word	0x08008795
 80084fc:	080087db 	.word	0x080087db
 8008500:	08008821 	.word	0x08008821
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008504:	2108      	movs	r1, #8
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa50 	bl	80089ac <USBH_Get_DevDesc>
 800850c:	4603      	mov	r3, r0
 800850e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d130      	bne.n	8008578 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7919      	ldrb	r1, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800853a:	b292      	uxth	r2, r2
 800853c:	9202      	str	r2, [sp, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	9201      	str	r2, [sp, #4]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	4603      	mov	r3, r0
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f867 	bl	800961c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7959      	ldrb	r1, [r3, #5]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008562:	b292      	uxth	r2, r2
 8008564:	9202      	str	r2, [sp, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	2200      	movs	r2, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f853 	bl	800961c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008576:	e175      	b.n	8008864 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b03      	cmp	r3, #3
 800857c:	f040 8172 	bne.w	8008864 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008586:	3301      	adds	r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008596:	2b03      	cmp	r3, #3
 8008598:	d903      	bls.n	80085a2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220d      	movs	r2, #13
 800859e:	701a      	strb	r2, [r3, #0]
      break;
 80085a0:	e160      	b.n	8008864 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	795b      	ldrb	r3, [r3, #5]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f887 	bl	80096bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	791b      	ldrb	r3, [r3, #4]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f881 	bl	80096bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
      break;
 80085c0:	e150      	b.n	8008864 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80085c2:	2112      	movs	r1, #18
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f9f1 	bl	80089ac <USBH_Get_DevDesc>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085da:	e145      	b.n	8008868 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	f040 8142 	bne.w	8008868 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ea:	3301      	adds	r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d903      	bls.n	8008606 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220d      	movs	r2, #13
 8008602:	701a      	strb	r2, [r3, #0]
      break;
 8008604:	e130      	b.n	8008868 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	795b      	ldrb	r3, [r3, #5]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f855 	bl	80096bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	791b      	ldrb	r3, [r3, #4]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f84f 	bl	80096bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
      break;
 800862a:	e11d      	b.n	8008868 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800862c:	2101      	movs	r1, #1
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa68 	bl	8008b04 <USBH_SetAddress>
 8008634:	4603      	mov	r3, r0
 8008636:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d132      	bne.n	80086a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800863e:	2002      	movs	r0, #2
 8008640:	f001 fb32 	bl	8009ca8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2203      	movs	r2, #3
 8008650:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7919      	ldrb	r1, [r3, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008666:	b292      	uxth	r2, r2
 8008668:	9202      	str	r2, [sp, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4603      	mov	r3, r0
 8008672:	2280      	movs	r2, #128	; 0x80
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 ffd1 	bl	800961c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7959      	ldrb	r1, [r3, #5]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800868e:	b292      	uxth	r2, r2
 8008690:	9202      	str	r2, [sp, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	9201      	str	r2, [sp, #4]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4603      	mov	r3, r0
 800869a:	2200      	movs	r2, #0
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 ffbd 	bl	800961c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086a2:	e0e3      	b.n	800886c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	f040 80e0 	bne.w	800886c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220d      	movs	r2, #13
 80086b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	705a      	strb	r2, [r3, #1]
      break;
 80086b8:	e0d8      	b.n	800886c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80086ba:	2109      	movs	r1, #9
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f99d 	bl	80089fc <USBH_Get_CfgDesc>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d103      	bne.n	80086d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2204      	movs	r2, #4
 80086d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086d2:	e0cd      	b.n	8008870 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	f040 80ca 	bne.w	8008870 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086e2:	3301      	adds	r3, #1
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d903      	bls.n	80086fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	220d      	movs	r2, #13
 80086fa:	701a      	strb	r2, [r3, #0]
      break;
 80086fc:	e0b8      	b.n	8008870 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	795b      	ldrb	r3, [r3, #5]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 ffd9 	bl	80096bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	791b      	ldrb	r3, [r3, #4]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 ffd3 	bl	80096bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
      break;
 8008722:	e0a5      	b.n	8008870 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f965 	bl	80089fc <USBH_Get_CfgDesc>
 8008732:	4603      	mov	r3, r0
 8008734:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d103      	bne.n	8008744 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2205      	movs	r2, #5
 8008740:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008742:	e097      	b.n	8008874 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b03      	cmp	r3, #3
 8008748:	f040 8094 	bne.w	8008874 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008752:	3301      	adds	r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008762:	2b03      	cmp	r3, #3
 8008764:	d903      	bls.n	800876e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	220d      	movs	r2, #13
 800876a:	701a      	strb	r2, [r3, #0]
      break;
 800876c:	e082      	b.n	8008874 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 ffa1 	bl	80096bc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 ff9b 	bl	80096bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
      break;
 8008792:	e06f      	b.n	8008874 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800879a:	2b00      	cmp	r3, #0
 800879c:	d019      	beq.n	80087d2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087aa:	23ff      	movs	r3, #255	; 0xff
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f949 	bl	8008a44 <USBH_Get_StringDesc>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2206      	movs	r2, #6
 80087c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087c2:	e059      	b.n	8008878 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d156      	bne.n	8008878 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2206      	movs	r2, #6
 80087ce:	705a      	strb	r2, [r3, #1]
      break;
 80087d0:	e052      	b.n	8008878 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2206      	movs	r2, #6
 80087d6:	705a      	strb	r2, [r3, #1]
      break;
 80087d8:	e04e      	b.n	8008878 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d019      	beq.n	8008818 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087f0:	23ff      	movs	r3, #255	; 0xff
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f926 	bl	8008a44 <USBH_Get_StringDesc>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2207      	movs	r2, #7
 8008806:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008808:	e038      	b.n	800887c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b03      	cmp	r3, #3
 800880e:	d135      	bne.n	800887c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2207      	movs	r2, #7
 8008814:	705a      	strb	r2, [r3, #1]
      break;
 8008816:	e031      	b.n	800887c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2207      	movs	r2, #7
 800881c:	705a      	strb	r2, [r3, #1]
      break;
 800881e:	e02d      	b.n	800887c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008826:	2b00      	cmp	r3, #0
 8008828:	d017      	beq.n	800885a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008836:	23ff      	movs	r3, #255	; 0xff
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f903 	bl	8008a44 <USBH_Get_StringDesc>
 800883e:	4603      	mov	r3, r0
 8008840:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800884c:	e018      	b.n	8008880 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d115      	bne.n	8008880 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e012      	b.n	8008880 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
      break;
 800885e:	e00f      	b.n	8008880 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008860:	bf00      	nop
 8008862:	e00e      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008864:	bf00      	nop
 8008866:	e00c      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008868:	bf00      	nop
 800886a:	e00a      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 800886c:	bf00      	nop
 800886e:	e008      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008870:	bf00      	nop
 8008872:	e006      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008874:	bf00      	nop
 8008876:	e004      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008878:	bf00      	nop
 800887a:	e002      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 800887c:	bf00      	nop
 800887e:	e000      	b.n	8008882 <USBH_HandleEnum+0x3be>
      break;
 8008880:	bf00      	nop
  }
  return Status;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f804 	bl	80088ce <USBH_HandleSof>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d10a      	bne.n	80088f6 <USBH_HandleSof+0x28>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
  }
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800890e:	bf00      	nop
}
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800892a:	bf00      	nop
}
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 f846 	bl	8009a16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fe93 	bl	80096bc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	795b      	ldrb	r3, [r3, #5]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fe8d 	bl	80096bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f864 	bl	8008a9a <USBH_GetDescriptor>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f203 3026 	addw	r0, r3, #806	; 0x326
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	b292      	uxth	r2, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	f000 f919 	bl	8008c24 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	331c      	adds	r3, #28
 8008a0c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a0e:	887b      	ldrh	r3, [r7, #2]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a18:	2100      	movs	r1, #0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f83d 	bl	8008a9a <USBH_GetDescriptor>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d107      	bne.n	8008a3a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a2a:	887b      	ldrh	r3, [r7, #2]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f989 	bl	8008d48 <USBH_ParseCfgDesc>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	460b      	mov	r3, r1
 8008a52:	72fb      	strb	r3, [r7, #11]
 8008a54:	4613      	mov	r3, r2
 8008a56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a60:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a68:	893b      	ldrh	r3, [r7, #8]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f812 	bl	8008a9a <USBH_GetDescriptor>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a86:	893a      	ldrh	r2, [r7, #8]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fb26 	bl	80090dc <USBH_ParseStringDesc>
  }

  return status;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	72fb      	strb	r3, [r7, #11]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	789b      	ldrb	r3, [r3, #2]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d11c      	bne.n	8008aee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	893a      	ldrh	r2, [r7, #8]
 8008aca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008acc:	893b      	ldrh	r3, [r7, #8]
 8008ace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ad6:	d104      	bne.n	8008ae2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f240 4209 	movw	r2, #1033	; 0x409
 8008ade:	829a      	strh	r2, [r3, #20]
 8008ae0:	e002      	b.n	8008ae8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8b3a      	ldrh	r2, [r7, #24]
 8008aec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008aee:	8b3b      	ldrh	r3, [r7, #24]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fb3f 	bl	8009178 <USBH_CtlReq>
 8008afa:	4603      	mov	r3, r0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	789b      	ldrb	r3, [r3, #2]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d10f      	bne.n	8008b38 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2205      	movs	r2, #5
 8008b22:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb1b 	bl	8009178 <USBH_CtlReq>
 8008b42:	4603      	mov	r3, r0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	789b      	ldrb	r3, [r3, #2]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10e      	bne.n	8008b7e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2209      	movs	r2, #9
 8008b6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2100      	movs	r1, #0
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 faf8 	bl	8009178 <USBH_CtlReq>
 8008b88:	4603      	mov	r3, r0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	789b      	ldrb	r3, [r3, #2]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d10f      	bne.n	8008bc6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2203      	movs	r2, #3
 8008bb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fad4 	bl	8009178 <USBH_CtlReq>
 8008bd0:	4603      	mov	r3, r0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d10f      	bne.n	8008c0e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2100      	movs	r1, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fab0 	bl	8009178 <USBH_CtlReq>
 8008c18:	4603      	mov	r3, r0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	785a      	ldrb	r2, [r3, #1]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3302      	adds	r3, #2
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	3303      	adds	r3, #3
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4313      	orrs	r3, r2
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	791a      	ldrb	r2, [r3, #4]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	795a      	ldrb	r2, [r3, #5]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	799a      	ldrb	r2, [r3, #6]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	79da      	ldrb	r2, [r3, #7]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	79db      	ldrb	r3, [r3, #7]
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	dc0f      	bgt.n	8008ca6 <USBH_ParseDevDesc+0x82>
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	db14      	blt.n	8008cb4 <USBH_ParseDevDesc+0x90>
 8008c8a:	3b08      	subs	r3, #8
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <USBH_ParseDevDesc+0x120>)
 8008c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <USBH_ParseDevDesc+0x86>
 8008ca4:	e006      	b.n	8008cb4 <USBH_ParseDevDesc+0x90>
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d104      	bne.n	8008cb4 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	79da      	ldrb	r2, [r3, #7]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	71da      	strb	r2, [r3, #7]
      break;
 8008cb2:	e003      	b.n	8008cbc <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2240      	movs	r2, #64	; 0x40
 8008cb8:	71da      	strb	r2, [r3, #7]
      break;
 8008cba:	bf00      	nop
  }

  if (length > 8U)
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d939      	bls.n	8008d36 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	3309      	adds	r3, #9
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	330a      	adds	r3, #10
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	330b      	adds	r3, #11
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	330d      	adds	r3, #13
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	7b9a      	ldrb	r2, [r3, #14]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	7bda      	ldrb	r2, [r3, #15]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	7c1a      	ldrb	r2, [r3, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	7c5a      	ldrb	r2, [r3, #17]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	745a      	strb	r2, [r3, #17]
  }
}
 8008d36:	bf00      	nop
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	01000101 	.word	0x01000101

08008d48 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08c      	sub	sp, #48	; 0x30
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d5c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	781a      	ldrb	r2, [r3, #0]
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	785a      	ldrb	r2, [r3, #1]
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3303      	adds	r3, #3
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da4:	bf28      	it	cs
 8008da6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	791a      	ldrb	r2, [r3, #4]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	795a      	ldrb	r2, [r3, #5]
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	799a      	ldrb	r2, [r3, #6]
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	79da      	ldrb	r2, [r3, #7]
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	7a1a      	ldrb	r2, [r3, #8]
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	d002      	beq.n	8008de6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	2209      	movs	r2, #9
 8008de4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	f240 809d 	bls.w	8008f28 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008dee:	2309      	movs	r3, #9
 8008df0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008df6:	e081      	b.n	8008efc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008df8:	f107 0316 	add.w	r3, r7, #22
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e00:	f000 f99f 	bl	8009142 <USBH_GetNextDesc>
 8008e04:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d176      	bne.n	8008efc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d002      	beq.n	8008e1c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	2209      	movs	r2, #9
 8008e1a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e20:	221a      	movs	r2, #26
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	3308      	adds	r3, #8
 8008e28:	6a3a      	ldr	r2, [r7, #32]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e32:	69f8      	ldr	r0, [r7, #28]
 8008e34:	f000 f87e 	bl	8008f34 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e42:	e043      	b.n	8008ecc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e44:	f107 0316 	add.w	r3, r7, #22
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4c:	f000 f979 	bl	8009142 <USBH_GetNextDesc>
 8008e50:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d138      	bne.n	8008ecc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	795b      	ldrb	r3, [r3, #5]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d10f      	bne.n	8008e82 <USBH_ParseCfgDesc+0x13a>
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	799b      	ldrb	r3, [r3, #6]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d10b      	bne.n	8008e82 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	79db      	ldrb	r3, [r3, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10f      	bne.n	8008e92 <USBH_ParseCfgDesc+0x14a>
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b09      	cmp	r3, #9
 8008e78:	d00b      	beq.n	8008e92 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	2209      	movs	r2, #9
 8008e7e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e80:	e007      	b.n	8008e92 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b07      	cmp	r3, #7
 8008e88:	d004      	beq.n	8008e94 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2207      	movs	r2, #7
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e000      	b.n	8008e94 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e92:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e98:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	00d2      	lsls	r2, r2, #3
 8008ea0:	211a      	movs	r1, #26
 8008ea2:	fb01 f303 	mul.w	r3, r1, r3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f86b 	bl	8008f92 <USBH_ParseEPDesc>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	791b      	ldrb	r3, [r3, #4]
 8008ed0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d204      	bcs.n	8008ee2 <USBH_ParseCfgDesc+0x19a>
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	885a      	ldrh	r2, [r3, #2]
 8008edc:	8afb      	ldrh	r3, [r7, #22]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d8b0      	bhi.n	8008e44 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	791b      	ldrb	r3, [r3, #4]
 8008ee6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d201      	bcs.n	8008ef2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e01c      	b.n	8008f2c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d805      	bhi.n	8008f10 <USBH_ParseCfgDesc+0x1c8>
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	885a      	ldrh	r2, [r3, #2]
 8008f08:	8afb      	ldrh	r3, [r7, #22]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f63f af74 	bhi.w	8008df8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	791b      	ldrb	r3, [r3, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	bf28      	it	cs
 8008f18:	2302      	movcs	r3, #2
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d201      	bcs.n	8008f28 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e001      	b.n	8008f2c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	; 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	785a      	ldrb	r2, [r3, #1]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	789a      	ldrb	r2, [r3, #2]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	78da      	ldrb	r2, [r3, #3]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	791a      	ldrb	r2, [r3, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	795a      	ldrb	r2, [r3, #5]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	799a      	ldrb	r2, [r3, #6]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	79da      	ldrb	r2, [r3, #7]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	7a1a      	ldrb	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	721a      	strb	r2, [r3, #8]
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b087      	sub	sp, #28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	785a      	ldrb	r2, [r3, #1]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	789a      	ldrb	r2, [r3, #2]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	78da      	ldrb	r2, [r3, #3]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3305      	adds	r3, #5
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	799a      	ldrb	r2, [r3, #6]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	889b      	ldrh	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	75fb      	strb	r3, [r7, #23]
 8008ff2:	e033      	b.n	800905c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	889b      	ldrh	r3, [r3, #4]
 8008ff8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ffc:	f023 0307 	bic.w	r3, r3, #7
 8009000:	b29a      	uxth	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	889b      	ldrh	r3, [r3, #4]
 800900a:	b21a      	sxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	b299      	uxth	r1, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3305      	adds	r3, #5
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	b29b      	uxth	r3, r3
 8009020:	430b      	orrs	r3, r1
 8009022:	b29b      	uxth	r3, r3
 8009024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009028:	2b00      	cmp	r3, #0
 800902a:	d110      	bne.n	800904e <USBH_ParseEPDesc+0xbc>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	b299      	uxth	r1, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3305      	adds	r3, #5
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b29b      	uxth	r3, r3
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	b29b      	uxth	r3, r3
 8009040:	430b      	orrs	r3, r1
 8009042:	b29b      	uxth	r3, r3
 8009044:	b21b      	sxth	r3, r3
 8009046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800904a:	b21b      	sxth	r3, r3
 800904c:	e001      	b.n	8009052 <USBH_ParseEPDesc+0xc0>
 800904e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009052:	4313      	orrs	r3, r2
 8009054:	b21b      	sxth	r3, r3
 8009056:	b29a      	uxth	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009062:	2b00      	cmp	r3, #0
 8009064:	d116      	bne.n	8009094 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	78db      	ldrb	r3, [r3, #3]
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	2b01      	cmp	r3, #1
 8009070:	d005      	beq.n	800907e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	78db      	ldrb	r3, [r3, #3]
 8009076:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800907a:	2b03      	cmp	r3, #3
 800907c:	d127      	bne.n	80090ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	799b      	ldrb	r3, [r3, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <USBH_ParseEPDesc+0xfc>
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	799b      	ldrb	r3, [r3, #6]
 800908a:	2b10      	cmp	r3, #16
 800908c:	d91f      	bls.n	80090ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
 8009092:	e01c      	b.n	80090ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	78db      	ldrb	r3, [r3, #3]
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	2b01      	cmp	r3, #1
 800909e:	d10a      	bne.n	80090b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	799b      	ldrb	r3, [r3, #6]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <USBH_ParseEPDesc+0x11e>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	799b      	ldrb	r3, [r3, #6]
 80090ac:	2b10      	cmp	r3, #16
 80090ae:	d90e      	bls.n	80090ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80090b0:	2303      	movs	r3, #3
 80090b2:	75fb      	strb	r3, [r7, #23]
 80090b4:	e00b      	b.n	80090ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	78db      	ldrb	r3, [r3, #3]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d105      	bne.n	80090ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	799b      	ldrb	r3, [r3, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80090ca:	2303      	movs	r3, #3
 80090cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d120      	bne.n	8009136 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	1e9a      	subs	r2, r3, #2
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bf28      	it	cs
 8009100:	4613      	movcs	r3, r2
 8009102:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3302      	adds	r3, #2
 8009108:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800910a:	2300      	movs	r3, #0
 800910c:	82fb      	strh	r3, [r7, #22]
 800910e:	e00b      	b.n	8009128 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009110:	8afb      	ldrh	r3, [r7, #22]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3301      	adds	r3, #1
 8009120:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009122:	8afb      	ldrh	r3, [r7, #22]
 8009124:	3302      	adds	r3, #2
 8009126:	82fb      	strh	r3, [r7, #22]
 8009128:	8afa      	ldrh	r2, [r7, #22]
 800912a:	8abb      	ldrh	r3, [r7, #20]
 800912c:	429a      	cmp	r2, r3
 800912e:	d3ef      	bcc.n	8009110 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
  }
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	4413      	add	r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4413      	add	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800916a:	68fb      	ldr	r3, [r7, #12]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	4613      	mov	r3, r2
 8009184:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d002      	beq.n	8009198 <USBH_CtlReq+0x20>
 8009192:	2b02      	cmp	r3, #2
 8009194:	d00f      	beq.n	80091b6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009196:	e027      	b.n	80091e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	88fa      	ldrh	r2, [r7, #6]
 80091a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2202      	movs	r2, #2
 80091ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80091b0:	2301      	movs	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
      break;
 80091b4:	e018      	b.n	80091e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f81c 	bl	80091f4 <USBH_HandleControl>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <USBH_CtlReq+0x54>
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d106      	bne.n	80091da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2201      	movs	r2, #1
 80091d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	761a      	strb	r2, [r3, #24]
      break;
 80091d8:	e005      	b.n	80091e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d102      	bne.n	80091e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	709a      	strb	r2, [r3, #2]
      break;
 80091e6:	bf00      	nop
  }
  return status;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009200:	2300      	movs	r3, #0
 8009202:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7e1b      	ldrb	r3, [r3, #24]
 8009208:	3b01      	subs	r3, #1
 800920a:	2b0a      	cmp	r3, #10
 800920c:	f200 8156 	bhi.w	80094bc <USBH_HandleControl+0x2c8>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <USBH_HandleControl+0x24>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	08009245 	.word	0x08009245
 800921c:	0800925f 	.word	0x0800925f
 8009220:	080092c9 	.word	0x080092c9
 8009224:	080092ef 	.word	0x080092ef
 8009228:	08009327 	.word	0x08009327
 800922c:	08009351 	.word	0x08009351
 8009230:	080093a3 	.word	0x080093a3
 8009234:	080093c5 	.word	0x080093c5
 8009238:	08009401 	.word	0x08009401
 800923c:	08009427 	.word	0x08009427
 8009240:	08009465 	.word	0x08009465
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f103 0110 	add.w	r1, r3, #16
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	795b      	ldrb	r3, [r3, #5]
 800924e:	461a      	mov	r2, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f943 	bl	80094dc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2202      	movs	r2, #2
 800925a:	761a      	strb	r2, [r3, #24]
      break;
 800925c:	e139      	b.n	80094d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	795b      	ldrb	r3, [r3, #5]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fcc5 	bl	8009bf4 <USBH_LL_GetURBState>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d11e      	bne.n	80092b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7c1b      	ldrb	r3, [r3, #16]
 8009278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800927c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8adb      	ldrh	r3, [r3, #22]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009286:	7b7b      	ldrb	r3, [r7, #13]
 8009288:	2b80      	cmp	r3, #128	; 0x80
 800928a:	d103      	bne.n	8009294 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2203      	movs	r2, #3
 8009290:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009292:	e115      	b.n	80094c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2205      	movs	r2, #5
 8009298:	761a      	strb	r2, [r3, #24]
      break;
 800929a:	e111      	b.n	80094c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800929c:	7b7b      	ldrb	r3, [r7, #13]
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d103      	bne.n	80092aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2209      	movs	r2, #9
 80092a6:	761a      	strb	r2, [r3, #24]
      break;
 80092a8:	e10a      	b.n	80094c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2207      	movs	r2, #7
 80092ae:	761a      	strb	r2, [r3, #24]
      break;
 80092b0:	e106      	b.n	80094c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d003      	beq.n	80092c0 <USBH_HandleControl+0xcc>
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	f040 8100 	bne.w	80094c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	220b      	movs	r2, #11
 80092c4:	761a      	strb	r2, [r3, #24]
      break;
 80092c6:	e0fb      	b.n	80094c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6899      	ldr	r1, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	899a      	ldrh	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	791b      	ldrb	r3, [r3, #4]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f93a 	bl	800955a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2204      	movs	r2, #4
 80092ea:	761a      	strb	r2, [r3, #24]
      break;
 80092ec:	e0f1      	b.n	80094d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	791b      	ldrb	r3, [r3, #4]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fc7d 	bl	8009bf4 <USBH_LL_GetURBState>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d102      	bne.n	800930a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2209      	movs	r2, #9
 8009308:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b05      	cmp	r3, #5
 800930e:	d102      	bne.n	8009316 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009310:	2303      	movs	r3, #3
 8009312:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009314:	e0d6      	b.n	80094c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	2b04      	cmp	r3, #4
 800931a:	f040 80d3 	bne.w	80094c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	220b      	movs	r2, #11
 8009322:	761a      	strb	r2, [r3, #24]
      break;
 8009324:	e0ce      	b.n	80094c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6899      	ldr	r1, [r3, #8]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	899a      	ldrh	r2, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	795b      	ldrb	r3, [r3, #5]
 8009332:	2001      	movs	r0, #1
 8009334:	9000      	str	r0, [sp, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8ea 	bl	8009510 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2206      	movs	r2, #6
 800934c:	761a      	strb	r2, [r3, #24]
      break;
 800934e:	e0c0      	b.n	80094d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	795b      	ldrb	r3, [r3, #5]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fc4c 	bl	8009bf4 <USBH_LL_GetURBState>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d103      	bne.n	800936e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2207      	movs	r2, #7
 800936a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800936c:	e0ac      	b.n	80094c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b05      	cmp	r3, #5
 8009372:	d105      	bne.n	8009380 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	220c      	movs	r2, #12
 8009378:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800937a:	2303      	movs	r3, #3
 800937c:	73fb      	strb	r3, [r7, #15]
      break;
 800937e:	e0a3      	b.n	80094c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d103      	bne.n	800938e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2205      	movs	r2, #5
 800938a:	761a      	strb	r2, [r3, #24]
      break;
 800938c:	e09c      	b.n	80094c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b04      	cmp	r3, #4
 8009392:	f040 8099 	bne.w	80094c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	220b      	movs	r2, #11
 800939a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800939c:	2302      	movs	r3, #2
 800939e:	73fb      	strb	r3, [r7, #15]
      break;
 80093a0:	e092      	b.n	80094c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	791b      	ldrb	r3, [r3, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	2100      	movs	r1, #0
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8d5 	bl	800955a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2208      	movs	r2, #8
 80093c0:	761a      	strb	r2, [r3, #24]

      break;
 80093c2:	e086      	b.n	80094d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	791b      	ldrb	r3, [r3, #4]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fc12 	bl	8009bf4 <USBH_LL_GetURBState>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d105      	bne.n	80093e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	220d      	movs	r2, #13
 80093de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093e4:	e072      	b.n	80094cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d103      	bne.n	80093f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	220b      	movs	r2, #11
 80093f0:	761a      	strb	r2, [r3, #24]
      break;
 80093f2:	e06b      	b.n	80094cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	d168      	bne.n	80094cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80093fa:	2303      	movs	r3, #3
 80093fc:	73fb      	strb	r3, [r7, #15]
      break;
 80093fe:	e065      	b.n	80094cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	795b      	ldrb	r3, [r3, #5]
 8009404:	2201      	movs	r2, #1
 8009406:	9200      	str	r2, [sp, #0]
 8009408:	2200      	movs	r2, #0
 800940a:	2100      	movs	r1, #0
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f87f 	bl	8009510 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009418:	b29a      	uxth	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	220a      	movs	r2, #10
 8009422:	761a      	strb	r2, [r3, #24]
      break;
 8009424:	e055      	b.n	80094d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	795b      	ldrb	r3, [r3, #5]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fbe1 	bl	8009bf4 <USBH_LL_GetURBState>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d105      	bne.n	8009448 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	220d      	movs	r2, #13
 8009444:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009446:	e043      	b.n	80094d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d103      	bne.n	8009456 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2209      	movs	r2, #9
 8009452:	761a      	strb	r2, [r3, #24]
      break;
 8009454:	e03c      	b.n	80094d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d139      	bne.n	80094d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	220b      	movs	r2, #11
 8009460:	761a      	strb	r2, [r3, #24]
      break;
 8009462:	e035      	b.n	80094d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7e5b      	ldrb	r3, [r3, #25]
 8009468:	3301      	adds	r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	765a      	strb	r2, [r3, #25]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7e5b      	ldrb	r3, [r3, #25]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d806      	bhi.n	8009486 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009484:	e025      	b.n	80094d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800948c:	2106      	movs	r1, #6
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	795b      	ldrb	r3, [r3, #5]
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f90c 	bl	80096bc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	791b      	ldrb	r3, [r3, #4]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f906 	bl	80096bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094b6:	2302      	movs	r3, #2
 80094b8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ba:	e00a      	b.n	80094d2 <USBH_HandleControl+0x2de>

    default:
      break;
 80094bc:	bf00      	nop
 80094be:	e008      	b.n	80094d2 <USBH_HandleControl+0x2de>
      break;
 80094c0:	bf00      	nop
 80094c2:	e006      	b.n	80094d2 <USBH_HandleControl+0x2de>
      break;
 80094c4:	bf00      	nop
 80094c6:	e004      	b.n	80094d2 <USBH_HandleControl+0x2de>
      break;
 80094c8:	bf00      	nop
 80094ca:	e002      	b.n	80094d2 <USBH_HandleControl+0x2de>
      break;
 80094cc:	bf00      	nop
 80094ce:	e000      	b.n	80094d2 <USBH_HandleControl+0x2de>
      break;
 80094d0:	bf00      	nop
  }

  return status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af04      	add	r7, sp, #16
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094ea:	79f9      	ldrb	r1, [r7, #7]
 80094ec:	2300      	movs	r3, #0
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	2308      	movs	r3, #8
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	2300      	movs	r3, #0
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fb46 	bl	8009b92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af04      	add	r7, sp, #16
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4611      	mov	r1, r2
 800951c:	461a      	mov	r2, r3
 800951e:	460b      	mov	r3, r1
 8009520:	80fb      	strh	r3, [r7, #6]
 8009522:	4613      	mov	r3, r2
 8009524:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009534:	7979      	ldrb	r1, [r7, #5]
 8009536:	7e3b      	ldrb	r3, [r7, #24]
 8009538:	9303      	str	r3, [sp, #12]
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	9302      	str	r3, [sp, #8]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	2301      	movs	r3, #1
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fb21 	bl	8009b92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af04      	add	r7, sp, #16
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	4611      	mov	r1, r2
 8009566:	461a      	mov	r2, r3
 8009568:	460b      	mov	r3, r1
 800956a:	80fb      	strh	r3, [r7, #6]
 800956c:	4613      	mov	r3, r2
 800956e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009570:	7979      	ldrb	r1, [r7, #5]
 8009572:	2300      	movs	r3, #0
 8009574:	9303      	str	r3, [sp, #12]
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	2301      	movs	r3, #1
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	2201      	movs	r2, #1
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fb03 	bl	8009b92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800958c:	2300      	movs	r3, #0

}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af04      	add	r7, sp, #16
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	4611      	mov	r1, r2
 80095a2:	461a      	mov	r2, r3
 80095a4:	460b      	mov	r3, r1
 80095a6:	80fb      	strh	r3, [r7, #6]
 80095a8:	4613      	mov	r3, r2
 80095aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095ba:	7979      	ldrb	r1, [r7, #5]
 80095bc:	7e3b      	ldrb	r3, [r7, #24]
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	9302      	str	r3, [sp, #8]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	2301      	movs	r3, #1
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	2302      	movs	r3, #2
 80095ce:	2200      	movs	r2, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fade 	bl	8009b92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af04      	add	r7, sp, #16
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4611      	mov	r1, r2
 80095ec:	461a      	mov	r2, r3
 80095ee:	460b      	mov	r3, r1
 80095f0:	80fb      	strh	r3, [r7, #6]
 80095f2:	4613      	mov	r3, r2
 80095f4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095f6:	7979      	ldrb	r1, [r7, #5]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	2301      	movs	r3, #1
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	2302      	movs	r3, #2
 800960a:	2201      	movs	r2, #1
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 fac0 	bl	8009b92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af04      	add	r7, sp, #16
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	4608      	mov	r0, r1
 8009626:	4611      	mov	r1, r2
 8009628:	461a      	mov	r2, r3
 800962a:	4603      	mov	r3, r0
 800962c:	70fb      	strb	r3, [r7, #3]
 800962e:	460b      	mov	r3, r1
 8009630:	70bb      	strb	r3, [r7, #2]
 8009632:	4613      	mov	r3, r2
 8009634:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009636:	7878      	ldrb	r0, [r7, #1]
 8009638:	78ba      	ldrb	r2, [r7, #2]
 800963a:	78f9      	ldrb	r1, [r7, #3]
 800963c:	8b3b      	ldrh	r3, [r7, #24]
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	7d3b      	ldrb	r3, [r7, #20]
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	7c3b      	ldrb	r3, [r7, #16]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4603      	mov	r3, r0
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa53 	bl	8009af6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa72 	bl	8009b54 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f836 	bl	80096f8 <USBH_GetFreePipe>
 800968c:	4603      	mov	r3, r0
 800968e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009690:	89fb      	ldrh	r3, [r7, #14]
 8009692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009696:	4293      	cmp	r3, r2
 8009698:	d00a      	beq.n	80096b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	f003 030f 	and.w	r3, r3, #15
 80096a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	33e0      	adds	r3, #224	; 0xe0
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	b2db      	uxtb	r3, r3
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	2b0f      	cmp	r3, #15
 80096cc:	d80d      	bhi.n	80096ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	33e0      	adds	r3, #224	; 0xe0
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	33e0      	adds	r3, #224	; 0xe0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
 8009708:	e00f      	b.n	800972a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	33e0      	adds	r3, #224	; 0xe0
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d102      	bne.n	8009724 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	b29b      	uxth	r3, r3
 8009722:	e007      	b.n	8009734 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	3301      	adds	r3, #1
 8009728:	73fb      	strb	r3, [r7, #15]
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b0f      	cmp	r3, #15
 800972e:	d9ec      	bls.n	800970a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009730:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009744:	2201      	movs	r2, #1
 8009746:	490e      	ldr	r1, [pc, #56]	; (8009780 <MX_USB_HOST_Init+0x40>)
 8009748:	480e      	ldr	r0, [pc, #56]	; (8009784 <MX_USB_HOST_Init+0x44>)
 800974a:	f7fe fba5 	bl	8007e98 <USBH_Init>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009754:	f7f7 ff78 	bl	8001648 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009758:	490b      	ldr	r1, [pc, #44]	; (8009788 <MX_USB_HOST_Init+0x48>)
 800975a:	480a      	ldr	r0, [pc, #40]	; (8009784 <MX_USB_HOST_Init+0x44>)
 800975c:	f7fe fc2a 	bl	8007fb4 <USBH_RegisterClass>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009766:	f7f7 ff6f 	bl	8001648 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800976a:	4806      	ldr	r0, [pc, #24]	; (8009784 <MX_USB_HOST_Init+0x44>)
 800976c:	f7fe fcae 	bl	80080cc <USBH_Start>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009776:	f7f7 ff67 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800977a:	bf00      	nop
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	080097a1 	.word	0x080097a1
 8009784:	20000f64 	.word	0x20000f64
 8009788:	2000000c 	.word	0x2000000c

0800978c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009790:	4802      	ldr	r0, [pc, #8]	; (800979c <MX_USB_HOST_Process+0x10>)
 8009792:	f7fe fcab 	bl	80080ec <USBH_Process>
}
 8009796:	bf00      	nop
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000f64 	.word	0x20000f64

080097a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d819      	bhi.n	80097e8 <USBH_UserProcess+0x48>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <USBH_UserProcess+0x1c>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	080097d9 	.word	0x080097d9
 80097c4:	080097e9 	.word	0x080097e9
 80097c8:	080097e1 	.word	0x080097e1
 80097cc:	080097d1 	.word	0x080097d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <USBH_UserProcess+0x58>)
 80097d2:	2203      	movs	r2, #3
 80097d4:	701a      	strb	r2, [r3, #0]
  break;
 80097d6:	e008      	b.n	80097ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <USBH_UserProcess+0x58>)
 80097da:	2202      	movs	r2, #2
 80097dc:	701a      	strb	r2, [r3, #0]
  break;
 80097de:	e004      	b.n	80097ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <USBH_UserProcess+0x58>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	701a      	strb	r2, [r3, #0]
  break;
 80097e6:	e000      	b.n	80097ea <USBH_UserProcess+0x4a>

  default:
  break;
 80097e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	2000133c 	.word	0x2000133c

080097fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08a      	sub	sp, #40	; 0x28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009804:	f107 0314 	add.w	r3, r7, #20
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	609a      	str	r2, [r3, #8]
 8009810:	60da      	str	r2, [r3, #12]
 8009812:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800981c:	d147      	bne.n	80098ae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	4a24      	ldr	r2, [pc, #144]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	6313      	str	r3, [r2, #48]	; 0x30
 800982e:	4b22      	ldr	r3, [pc, #136]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800983a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800983e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009840:	2300      	movs	r3, #0
 8009842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4619      	mov	r1, r3
 800984e:	481b      	ldr	r0, [pc, #108]	; (80098bc <HAL_HCD_MspInit+0xc0>)
 8009850:	f7f8 fb5e 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009854:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985a:	2302      	movs	r3, #2
 800985c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009862:	2300      	movs	r3, #0
 8009864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009866:	230a      	movs	r3, #10
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800986a:	f107 0314 	add.w	r3, r7, #20
 800986e:	4619      	mov	r1, r3
 8009870:	4812      	ldr	r0, [pc, #72]	; (80098bc <HAL_HCD_MspInit+0xc0>)
 8009872:	f7f8 fb4d 	bl	8001f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009876:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987a:	4a0f      	ldr	r2, [pc, #60]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	6353      	str	r3, [r2, #52]	; 0x34
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988a:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 800988c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009890:	6453      	str	r3, [r2, #68]	; 0x44
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <HAL_HCD_MspInit+0xbc>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800989e:	2200      	movs	r2, #0
 80098a0:	2100      	movs	r1, #0
 80098a2:	2043      	movs	r0, #67	; 0x43
 80098a4:	f7f8 fafd 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098a8:	2043      	movs	r0, #67	; 0x43
 80098aa:	f7f8 fb16 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098ae:	bf00      	nop
 80098b0:	3728      	adds	r7, #40	; 0x28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40023800 	.word	0x40023800
 80098bc:	40020000 	.word	0x40020000

080098c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe ffeb 	bl	80088aa <USBH_LL_IncTimer>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff f823 	bl	8008936 <USBH_LL_Connect>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff f82c 	bl	8008964 <USBH_LL_Disconnect>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
 8009920:	4613      	mov	r3, r2
 8009922:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe ffdd 	bl	80088fe <USBH_LL_PortEnabled>
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe ffdd 	bl	800891a <USBH_LL_PortDisabled>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009976:	2b01      	cmp	r3, #1
 8009978:	d12a      	bne.n	80099d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800997a:	4a18      	ldr	r2, [pc, #96]	; (80099dc <USBH_LL_Init+0x74>)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a15      	ldr	r2, [pc, #84]	; (80099dc <USBH_LL_Init+0x74>)
 8009986:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800998a:	4b14      	ldr	r3, [pc, #80]	; (80099dc <USBH_LL_Init+0x74>)
 800998c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009990:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <USBH_LL_Init+0x74>)
 8009994:	2208      	movs	r2, #8
 8009996:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009998:	4b10      	ldr	r3, [pc, #64]	; (80099dc <USBH_LL_Init+0x74>)
 800999a:	2201      	movs	r2, #1
 800999c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <USBH_LL_Init+0x74>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80099a4:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <USBH_LL_Init+0x74>)
 80099a6:	2202      	movs	r2, #2
 80099a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <USBH_LL_Init+0x74>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099b0:	480a      	ldr	r0, [pc, #40]	; (80099dc <USBH_LL_Init+0x74>)
 80099b2:	f7f8 fc62 	bl	800227a <HAL_HCD_Init>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80099bc:	f7f7 fe44 	bl	8001648 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099c0:	4806      	ldr	r0, [pc, #24]	; (80099dc <USBH_LL_Init+0x74>)
 80099c2:	f7f9 f846 	bl	8002a52 <HAL_HCD_GetCurrentFrame>
 80099c6:	4603      	mov	r3, r0
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe ff5e 	bl	800888c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20001340 	.word	0x20001340

080099e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f8 ffb5 	bl	8002966 <HAL_HCD_Start>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f95c 	bl	8009cc0 <USBH_Get_USB_Status>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7f8 ffbd 	bl	80029ac <HAL_HCD_Stop>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 f941 	bl	8009cc0 <USBH_Get_USB_Status>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f9 f805 	bl	8002a6e <HAL_HCD_GetCurrentSpeed>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d00c      	beq.n	8009a84 <USBH_LL_GetSpeed+0x38>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d80d      	bhi.n	8009a8a <USBH_LL_GetSpeed+0x3e>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <USBH_LL_GetSpeed+0x2c>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d003      	beq.n	8009a7e <USBH_LL_GetSpeed+0x32>
 8009a76:	e008      	b.n	8009a8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7c:	e008      	b.n	8009a90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	73fb      	strb	r3, [r7, #15]
    break;
 8009a82:	e005      	b.n	8009a90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a84:	2302      	movs	r3, #2
 8009a86:	73fb      	strb	r3, [r7, #15]
    break;
 8009a88:	e002      	b.n	8009a90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8e:	bf00      	nop
  }
  return  speed;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f8 ff98 	bl	80029e6 <HAL_HCD_ResetPort>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f8ff 	bl	8009cc0 <USBH_Get_USB_Status>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f8 ff9f 	bl	8002a2a <HAL_HCD_HC_GetXferCount>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009af6:	b590      	push	{r4, r7, lr}
 8009af8:	b089      	sub	sp, #36	; 0x24
 8009afa:	af04      	add	r7, sp, #16
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	461a      	mov	r2, r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	70fb      	strb	r3, [r7, #3]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70bb      	strb	r3, [r7, #2]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b1e:	787c      	ldrb	r4, [r7, #1]
 8009b20:	78ba      	ldrb	r2, [r7, #2]
 8009b22:	78f9      	ldrb	r1, [r7, #3]
 8009b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b26:	9302      	str	r3, [sp, #8]
 8009b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4623      	mov	r3, r4
 8009b36:	f7f8 fc02 	bl	800233e <HAL_HCD_HC_Init>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 f8bd 	bl	8009cc0 <USBH_Get_USB_Status>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd90      	pop	{r4, r7, pc}

08009b54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f8 fc72 	bl	800245c <HAL_HCD_HC_Halt>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 f89e 	bl	8009cc0 <USBH_Get_USB_Status>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b92:	b590      	push	{r4, r7, lr}
 8009b94:	b089      	sub	sp, #36	; 0x24
 8009b96:	af04      	add	r7, sp, #16
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	70fb      	strb	r3, [r7, #3]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70bb      	strb	r3, [r7, #2]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bba:	787c      	ldrb	r4, [r7, #1]
 8009bbc:	78ba      	ldrb	r2, [r7, #2]
 8009bbe:	78f9      	ldrb	r1, [r7, #3]
 8009bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bc8:	9302      	str	r3, [sp, #8]
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	f7f8 fc65 	bl	80024a4 <HAL_HCD_HC_SubmitRequest>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 f86d 	bl	8009cc0 <USBH_Get_USB_Status>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd90      	pop	{r4, r7, pc}

08009bf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f8 fef9 	bl	8002a02 <HAL_HCD_HC_GetURBState>
 8009c10:	4603      	mov	r3, r0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d103      	bne.n	8009c38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 f870 	bl	8009d18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c38:	20c8      	movs	r0, #200	; 0xc8
 8009c3a:	f7f8 f833 	bl	8001ca4 <HAL_Delay>
  return USBH_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
 8009c54:	4613      	mov	r3, r2
 8009c56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	212c      	movs	r1, #44	; 0x2c
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	333b      	adds	r3, #59	; 0x3b
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	212c      	movs	r1, #44	; 0x2c
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	3354      	adds	r3, #84	; 0x54
 8009c82:	78ba      	ldrb	r2, [r7, #2]
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e008      	b.n	8009c9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	212c      	movs	r1, #44	; 0x2c
 8009c8e:	fb01 f303 	mul.w	r3, r1, r3
 8009c92:	4413      	add	r3, r2
 8009c94:	3355      	adds	r3, #85	; 0x55
 8009c96:	78ba      	ldrb	r2, [r7, #2]
 8009c98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7f7 fff7 	bl	8001ca4 <HAL_Delay>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d817      	bhi.n	8009d04 <USBH_Get_USB_Status+0x44>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <USBH_Get_USB_Status+0x1c>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009cf3 	.word	0x08009cf3
 8009ce4:	08009cf9 	.word	0x08009cf9
 8009ce8:	08009cff 	.word	0x08009cff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf0:	e00b      	b.n	8009d0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf6:	e008      	b.n	8009d0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfc:	e005      	b.n	8009d0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	73fb      	strb	r3, [r7, #15]
    break;
 8009d02:	e002      	b.n	8009d0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d04:	2302      	movs	r3, #2
 8009d06:	73fb      	strb	r3, [r7, #15]
    break;
 8009d08:	bf00      	nop
  }
  return usb_status;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
 8009d30:	e001      	b.n	8009d36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d32:	2301      	movs	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4803      	ldr	r0, [pc, #12]	; (8009d4c <MX_DriverVbusFS+0x34>)
 8009d3e:	f7f8 fa83 	bl	8002248 <HAL_GPIO_WritePin>
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	40020800 	.word	0x40020800

08009d50 <malloc>:
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <malloc+0xc>)
 8009d52:	4601      	mov	r1, r0
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f000 b82b 	b.w	8009db0 <_malloc_r>
 8009d5a:	bf00      	nop
 8009d5c:	20000084 	.word	0x20000084

08009d60 <free>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <free+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f001 be1d 	b.w	800b9a4 <_free_r>
 8009d6a:	bf00      	nop
 8009d6c:	20000084 	.word	0x20000084

08009d70 <sbrk_aligned>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	4e0e      	ldr	r6, [pc, #56]	; (8009dac <sbrk_aligned+0x3c>)
 8009d74:	460c      	mov	r4, r1
 8009d76:	6831      	ldr	r1, [r6, #0]
 8009d78:	4605      	mov	r5, r0
 8009d7a:	b911      	cbnz	r1, 8009d82 <sbrk_aligned+0x12>
 8009d7c:	f000 ff48 	bl	800ac10 <_sbrk_r>
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	4621      	mov	r1, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 ff43 	bl	800ac10 <_sbrk_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d00a      	beq.n	8009da4 <sbrk_aligned+0x34>
 8009d8e:	1cc4      	adds	r4, r0, #3
 8009d90:	f024 0403 	bic.w	r4, r4, #3
 8009d94:	42a0      	cmp	r0, r4
 8009d96:	d007      	beq.n	8009da8 <sbrk_aligned+0x38>
 8009d98:	1a21      	subs	r1, r4, r0
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 ff38 	bl	800ac10 <_sbrk_r>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d101      	bne.n	8009da8 <sbrk_aligned+0x38>
 8009da4:	f04f 34ff 	mov.w	r4, #4294967295
 8009da8:	4620      	mov	r0, r4
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	20001648 	.word	0x20001648

08009db0 <_malloc_r>:
 8009db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db4:	1ccd      	adds	r5, r1, #3
 8009db6:	f025 0503 	bic.w	r5, r5, #3
 8009dba:	3508      	adds	r5, #8
 8009dbc:	2d0c      	cmp	r5, #12
 8009dbe:	bf38      	it	cc
 8009dc0:	250c      	movcc	r5, #12
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	db01      	blt.n	8009dcc <_malloc_r+0x1c>
 8009dc8:	42a9      	cmp	r1, r5
 8009dca:	d905      	bls.n	8009dd8 <_malloc_r+0x28>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009eac <_malloc_r+0xfc>
 8009ddc:	f000 f868 	bl	8009eb0 <__malloc_lock>
 8009de0:	f8d8 3000 	ldr.w	r3, [r8]
 8009de4:	461c      	mov	r4, r3
 8009de6:	bb5c      	cbnz	r4, 8009e40 <_malloc_r+0x90>
 8009de8:	4629      	mov	r1, r5
 8009dea:	4638      	mov	r0, r7
 8009dec:	f7ff ffc0 	bl	8009d70 <sbrk_aligned>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	4604      	mov	r4, r0
 8009df4:	d155      	bne.n	8009ea2 <_malloc_r+0xf2>
 8009df6:	f8d8 4000 	ldr.w	r4, [r8]
 8009dfa:	4626      	mov	r6, r4
 8009dfc:	2e00      	cmp	r6, #0
 8009dfe:	d145      	bne.n	8009e8c <_malloc_r+0xdc>
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	d048      	beq.n	8009e96 <_malloc_r+0xe6>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	4631      	mov	r1, r6
 8009e08:	4638      	mov	r0, r7
 8009e0a:	eb04 0903 	add.w	r9, r4, r3
 8009e0e:	f000 feff 	bl	800ac10 <_sbrk_r>
 8009e12:	4581      	cmp	r9, r0
 8009e14:	d13f      	bne.n	8009e96 <_malloc_r+0xe6>
 8009e16:	6821      	ldr	r1, [r4, #0]
 8009e18:	1a6d      	subs	r5, r5, r1
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ffa7 	bl	8009d70 <sbrk_aligned>
 8009e22:	3001      	adds	r0, #1
 8009e24:	d037      	beq.n	8009e96 <_malloc_r+0xe6>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	442b      	add	r3, r5
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d038      	beq.n	8009ea6 <_malloc_r+0xf6>
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	42a2      	cmp	r2, r4
 8009e38:	d12b      	bne.n	8009e92 <_malloc_r+0xe2>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	e00f      	b.n	8009e60 <_malloc_r+0xb0>
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	1b52      	subs	r2, r2, r5
 8009e44:	d41f      	bmi.n	8009e86 <_malloc_r+0xd6>
 8009e46:	2a0b      	cmp	r2, #11
 8009e48:	d917      	bls.n	8009e7a <_malloc_r+0xca>
 8009e4a:	1961      	adds	r1, r4, r5
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	6025      	str	r5, [r4, #0]
 8009e50:	bf18      	it	ne
 8009e52:	6059      	strne	r1, [r3, #4]
 8009e54:	6863      	ldr	r3, [r4, #4]
 8009e56:	bf08      	it	eq
 8009e58:	f8c8 1000 	streq.w	r1, [r8]
 8009e5c:	5162      	str	r2, [r4, r5]
 8009e5e:	604b      	str	r3, [r1, #4]
 8009e60:	4638      	mov	r0, r7
 8009e62:	f104 060b 	add.w	r6, r4, #11
 8009e66:	f000 f829 	bl	8009ebc <__malloc_unlock>
 8009e6a:	f026 0607 	bic.w	r6, r6, #7
 8009e6e:	1d23      	adds	r3, r4, #4
 8009e70:	1af2      	subs	r2, r6, r3
 8009e72:	d0ae      	beq.n	8009dd2 <_malloc_r+0x22>
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	50a3      	str	r3, [r4, r2]
 8009e78:	e7ab      	b.n	8009dd2 <_malloc_r+0x22>
 8009e7a:	42a3      	cmp	r3, r4
 8009e7c:	6862      	ldr	r2, [r4, #4]
 8009e7e:	d1dd      	bne.n	8009e3c <_malloc_r+0x8c>
 8009e80:	f8c8 2000 	str.w	r2, [r8]
 8009e84:	e7ec      	b.n	8009e60 <_malloc_r+0xb0>
 8009e86:	4623      	mov	r3, r4
 8009e88:	6864      	ldr	r4, [r4, #4]
 8009e8a:	e7ac      	b.n	8009de6 <_malloc_r+0x36>
 8009e8c:	4634      	mov	r4, r6
 8009e8e:	6876      	ldr	r6, [r6, #4]
 8009e90:	e7b4      	b.n	8009dfc <_malloc_r+0x4c>
 8009e92:	4613      	mov	r3, r2
 8009e94:	e7cc      	b.n	8009e30 <_malloc_r+0x80>
 8009e96:	230c      	movs	r3, #12
 8009e98:	603b      	str	r3, [r7, #0]
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f000 f80e 	bl	8009ebc <__malloc_unlock>
 8009ea0:	e797      	b.n	8009dd2 <_malloc_r+0x22>
 8009ea2:	6025      	str	r5, [r4, #0]
 8009ea4:	e7dc      	b.n	8009e60 <_malloc_r+0xb0>
 8009ea6:	605b      	str	r3, [r3, #4]
 8009ea8:	deff      	udf	#255	; 0xff
 8009eaa:	bf00      	nop
 8009eac:	20001644 	.word	0x20001644

08009eb0 <__malloc_lock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__malloc_lock+0x8>)
 8009eb2:	f000 bef9 	b.w	800aca8 <__retarget_lock_acquire_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	2000178c 	.word	0x2000178c

08009ebc <__malloc_unlock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__malloc_unlock+0x8>)
 8009ebe:	f000 bef4 	b.w	800acaa <__retarget_lock_release_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	2000178c 	.word	0x2000178c

08009ec8 <__cvt>:
 8009ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	ec55 4b10 	vmov	r4, r5, d0
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	460e      	mov	r6, r1
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	bfbb      	ittet	lt
 8009eda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ede:	461d      	movlt	r5, r3
 8009ee0:	2300      	movge	r3, #0
 8009ee2:	232d      	movlt	r3, #45	; 0x2d
 8009ee4:	700b      	strb	r3, [r1, #0]
 8009ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009eec:	4691      	mov	r9, r2
 8009eee:	f023 0820 	bic.w	r8, r3, #32
 8009ef2:	bfbc      	itt	lt
 8009ef4:	4622      	movlt	r2, r4
 8009ef6:	4614      	movlt	r4, r2
 8009ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009efc:	d005      	beq.n	8009f0a <__cvt+0x42>
 8009efe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f02:	d100      	bne.n	8009f06 <__cvt+0x3e>
 8009f04:	3601      	adds	r6, #1
 8009f06:	2102      	movs	r1, #2
 8009f08:	e000      	b.n	8009f0c <__cvt+0x44>
 8009f0a:	2103      	movs	r1, #3
 8009f0c:	ab03      	add	r3, sp, #12
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	ab02      	add	r3, sp, #8
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	ec45 4b10 	vmov	d0, r4, r5
 8009f18:	4653      	mov	r3, sl
 8009f1a:	4632      	mov	r2, r6
 8009f1c:	f000 ff50 	bl	800adc0 <_dtoa_r>
 8009f20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f24:	4607      	mov	r7, r0
 8009f26:	d102      	bne.n	8009f2e <__cvt+0x66>
 8009f28:	f019 0f01 	tst.w	r9, #1
 8009f2c:	d022      	beq.n	8009f74 <__cvt+0xac>
 8009f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f32:	eb07 0906 	add.w	r9, r7, r6
 8009f36:	d110      	bne.n	8009f5a <__cvt+0x92>
 8009f38:	783b      	ldrb	r3, [r7, #0]
 8009f3a:	2b30      	cmp	r3, #48	; 0x30
 8009f3c:	d10a      	bne.n	8009f54 <__cvt+0x8c>
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2300      	movs	r3, #0
 8009f42:	4620      	mov	r0, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f4a:	b918      	cbnz	r0, 8009f54 <__cvt+0x8c>
 8009f4c:	f1c6 0601 	rsb	r6, r6, #1
 8009f50:	f8ca 6000 	str.w	r6, [sl]
 8009f54:	f8da 3000 	ldr.w	r3, [sl]
 8009f58:	4499      	add	r9, r3
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f66:	b108      	cbz	r0, 8009f6c <__cvt+0xa4>
 8009f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f6c:	2230      	movs	r2, #48	; 0x30
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	454b      	cmp	r3, r9
 8009f72:	d307      	bcc.n	8009f84 <__cvt+0xbc>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f78:	1bdb      	subs	r3, r3, r7
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	b004      	add	sp, #16
 8009f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f84:	1c59      	adds	r1, r3, #1
 8009f86:	9103      	str	r1, [sp, #12]
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	e7f0      	b.n	8009f6e <__cvt+0xa6>

08009f8c <__exponent>:
 8009f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2900      	cmp	r1, #0
 8009f92:	bfb8      	it	lt
 8009f94:	4249      	neglt	r1, r1
 8009f96:	f803 2b02 	strb.w	r2, [r3], #2
 8009f9a:	bfb4      	ite	lt
 8009f9c:	222d      	movlt	r2, #45	; 0x2d
 8009f9e:	222b      	movge	r2, #43	; 0x2b
 8009fa0:	2909      	cmp	r1, #9
 8009fa2:	7042      	strb	r2, [r0, #1]
 8009fa4:	dd2a      	ble.n	8009ffc <__exponent+0x70>
 8009fa6:	f10d 0207 	add.w	r2, sp, #7
 8009faa:	4617      	mov	r7, r2
 8009fac:	260a      	movs	r6, #10
 8009fae:	4694      	mov	ip, r2
 8009fb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fb4:	fb06 1415 	mls	r4, r6, r5, r1
 8009fb8:	3430      	adds	r4, #48	; 0x30
 8009fba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	2c63      	cmp	r4, #99	; 0x63
 8009fc2:	f102 32ff 	add.w	r2, r2, #4294967295
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	dcf1      	bgt.n	8009fae <__exponent+0x22>
 8009fca:	3130      	adds	r1, #48	; 0x30
 8009fcc:	f1ac 0402 	sub.w	r4, ip, #2
 8009fd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fd4:	1c41      	adds	r1, r0, #1
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	42ba      	cmp	r2, r7
 8009fda:	d30a      	bcc.n	8009ff2 <__exponent+0x66>
 8009fdc:	f10d 0209 	add.w	r2, sp, #9
 8009fe0:	eba2 020c 	sub.w	r2, r2, ip
 8009fe4:	42bc      	cmp	r4, r7
 8009fe6:	bf88      	it	hi
 8009fe8:	2200      	movhi	r2, #0
 8009fea:	4413      	add	r3, r2
 8009fec:	1a18      	subs	r0, r3, r0
 8009fee:	b003      	add	sp, #12
 8009ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ffa:	e7ed      	b.n	8009fd8 <__exponent+0x4c>
 8009ffc:	2330      	movs	r3, #48	; 0x30
 8009ffe:	3130      	adds	r1, #48	; 0x30
 800a000:	7083      	strb	r3, [r0, #2]
 800a002:	70c1      	strb	r1, [r0, #3]
 800a004:	1d03      	adds	r3, r0, #4
 800a006:	e7f1      	b.n	8009fec <__exponent+0x60>

0800a008 <_printf_float>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	ed2d 8b02 	vpush	{d8}
 800a010:	b08d      	sub	sp, #52	; 0x34
 800a012:	460c      	mov	r4, r1
 800a014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a018:	4616      	mov	r6, r2
 800a01a:	461f      	mov	r7, r3
 800a01c:	4605      	mov	r5, r0
 800a01e:	f000 fdbf 	bl	800aba0 <_localeconv_r>
 800a022:	f8d0 a000 	ldr.w	sl, [r0]
 800a026:	4650      	mov	r0, sl
 800a028:	f7f6 f922 	bl	8000270 <strlen>
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	; 0x28
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	f8d8 3000 	ldr.w	r3, [r8]
 800a038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a03c:	3307      	adds	r3, #7
 800a03e:	f023 0307 	bic.w	r3, r3, #7
 800a042:	f103 0208 	add.w	r2, r3, #8
 800a046:	f8c8 2000 	str.w	r2, [r8]
 800a04a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a04e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a052:	9307      	str	r3, [sp, #28]
 800a054:	f8cd 8018 	str.w	r8, [sp, #24]
 800a058:	ee08 0a10 	vmov	s16, r0
 800a05c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a064:	4b9e      	ldr	r3, [pc, #632]	; (800a2e0 <_printf_float+0x2d8>)
 800a066:	f04f 32ff 	mov.w	r2, #4294967295
 800a06a:	f7f6 fd5f 	bl	8000b2c <__aeabi_dcmpun>
 800a06e:	bb88      	cbnz	r0, 800a0d4 <_printf_float+0xcc>
 800a070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a074:	4b9a      	ldr	r3, [pc, #616]	; (800a2e0 <_printf_float+0x2d8>)
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	f7f6 fd39 	bl	8000af0 <__aeabi_dcmple>
 800a07e:	bb48      	cbnz	r0, 800a0d4 <_printf_float+0xcc>
 800a080:	2200      	movs	r2, #0
 800a082:	2300      	movs	r3, #0
 800a084:	4640      	mov	r0, r8
 800a086:	4649      	mov	r1, r9
 800a088:	f7f6 fd28 	bl	8000adc <__aeabi_dcmplt>
 800a08c:	b110      	cbz	r0, 800a094 <_printf_float+0x8c>
 800a08e:	232d      	movs	r3, #45	; 0x2d
 800a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a094:	4a93      	ldr	r2, [pc, #588]	; (800a2e4 <_printf_float+0x2dc>)
 800a096:	4b94      	ldr	r3, [pc, #592]	; (800a2e8 <_printf_float+0x2e0>)
 800a098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a09c:	bf94      	ite	ls
 800a09e:	4690      	movls	r8, r2
 800a0a0:	4698      	movhi	r8, r3
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	9b05      	ldr	r3, [sp, #20]
 800a0a8:	f023 0304 	bic.w	r3, r3, #4
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	9700      	str	r7, [sp, #0]
 800a0b4:	4633      	mov	r3, r6
 800a0b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 f9da 	bl	800a474 <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	f040 8090 	bne.w	800a1e6 <_printf_float+0x1de>
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	b00d      	add	sp, #52	; 0x34
 800a0cc:	ecbd 8b02 	vpop	{d8}
 800a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 fd26 	bl	8000b2c <__aeabi_dcmpun>
 800a0e0:	b140      	cbz	r0, 800a0f4 <_printf_float+0xec>
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bfbc      	itt	lt
 800a0e8:	232d      	movlt	r3, #45	; 0x2d
 800a0ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0ee:	4a7f      	ldr	r2, [pc, #508]	; (800a2ec <_printf_float+0x2e4>)
 800a0f0:	4b7f      	ldr	r3, [pc, #508]	; (800a2f0 <_printf_float+0x2e8>)
 800a0f2:	e7d1      	b.n	800a098 <_printf_float+0x90>
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0fa:	9206      	str	r2, [sp, #24]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	d13f      	bne.n	800a180 <_printf_float+0x178>
 800a100:	2306      	movs	r3, #6
 800a102:	6063      	str	r3, [r4, #4]
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	6861      	ldr	r1, [r4, #4]
 800a108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a10c:	2300      	movs	r3, #0
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	ab0a      	add	r3, sp, #40	; 0x28
 800a112:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a116:	ab09      	add	r3, sp, #36	; 0x24
 800a118:	ec49 8b10 	vmov	d0, r8, r9
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	6022      	str	r2, [r4, #0]
 800a120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a124:	4628      	mov	r0, r5
 800a126:	f7ff fecf 	bl	8009ec8 <__cvt>
 800a12a:	9b06      	ldr	r3, [sp, #24]
 800a12c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a12e:	2b47      	cmp	r3, #71	; 0x47
 800a130:	4680      	mov	r8, r0
 800a132:	d108      	bne.n	800a146 <_printf_float+0x13e>
 800a134:	1cc8      	adds	r0, r1, #3
 800a136:	db02      	blt.n	800a13e <_printf_float+0x136>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	4299      	cmp	r1, r3
 800a13c:	dd41      	ble.n	800a1c2 <_printf_float+0x1ba>
 800a13e:	f1ab 0302 	sub.w	r3, fp, #2
 800a142:	fa5f fb83 	uxtb.w	fp, r3
 800a146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a14a:	d820      	bhi.n	800a18e <_printf_float+0x186>
 800a14c:	3901      	subs	r1, #1
 800a14e:	465a      	mov	r2, fp
 800a150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a154:	9109      	str	r1, [sp, #36]	; 0x24
 800a156:	f7ff ff19 	bl	8009f8c <__exponent>
 800a15a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15c:	1813      	adds	r3, r2, r0
 800a15e:	2a01      	cmp	r2, #1
 800a160:	4681      	mov	r9, r0
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	dc02      	bgt.n	800a16c <_printf_float+0x164>
 800a166:	6822      	ldr	r2, [r4, #0]
 800a168:	07d2      	lsls	r2, r2, #31
 800a16a:	d501      	bpl.n	800a170 <_printf_float+0x168>
 800a16c:	3301      	adds	r3, #1
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a174:	2b00      	cmp	r3, #0
 800a176:	d09c      	beq.n	800a0b2 <_printf_float+0xaa>
 800a178:	232d      	movs	r3, #45	; 0x2d
 800a17a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17e:	e798      	b.n	800a0b2 <_printf_float+0xaa>
 800a180:	9a06      	ldr	r2, [sp, #24]
 800a182:	2a47      	cmp	r2, #71	; 0x47
 800a184:	d1be      	bne.n	800a104 <_printf_float+0xfc>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1bc      	bne.n	800a104 <_printf_float+0xfc>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e7b9      	b.n	800a102 <_printf_float+0xfa>
 800a18e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a192:	d118      	bne.n	800a1c6 <_printf_float+0x1be>
 800a194:	2900      	cmp	r1, #0
 800a196:	6863      	ldr	r3, [r4, #4]
 800a198:	dd0b      	ble.n	800a1b2 <_printf_float+0x1aa>
 800a19a:	6121      	str	r1, [r4, #16]
 800a19c:	b913      	cbnz	r3, 800a1a4 <_printf_float+0x19c>
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d502      	bpl.n	800a1aa <_printf_float+0x1a2>
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	440b      	add	r3, r1
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1ac:	f04f 0900 	mov.w	r9, #0
 800a1b0:	e7de      	b.n	800a170 <_printf_float+0x168>
 800a1b2:	b913      	cbnz	r3, 800a1ba <_printf_float+0x1b2>
 800a1b4:	6822      	ldr	r2, [r4, #0]
 800a1b6:	07d2      	lsls	r2, r2, #31
 800a1b8:	d501      	bpl.n	800a1be <_printf_float+0x1b6>
 800a1ba:	3302      	adds	r3, #2
 800a1bc:	e7f4      	b.n	800a1a8 <_printf_float+0x1a0>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e7f2      	b.n	800a1a8 <_printf_float+0x1a0>
 800a1c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	db05      	blt.n	800a1d8 <_printf_float+0x1d0>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	6121      	str	r1, [r4, #16]
 800a1d0:	07d8      	lsls	r0, r3, #31
 800a1d2:	d5ea      	bpl.n	800a1aa <_printf_float+0x1a2>
 800a1d4:	1c4b      	adds	r3, r1, #1
 800a1d6:	e7e7      	b.n	800a1a8 <_printf_float+0x1a0>
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	bfd4      	ite	le
 800a1dc:	f1c1 0202 	rsble	r2, r1, #2
 800a1e0:	2201      	movgt	r2, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	e7e0      	b.n	800a1a8 <_printf_float+0x1a0>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	055a      	lsls	r2, r3, #21
 800a1ea:	d407      	bmi.n	800a1fc <_printf_float+0x1f4>
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d12c      	bne.n	800a254 <_printf_float+0x24c>
 800a1fa:	e764      	b.n	800a0c6 <_printf_float+0xbe>
 800a1fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a200:	f240 80e0 	bls.w	800a3c4 <_printf_float+0x3bc>
 800a204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a208:	2200      	movs	r2, #0
 800a20a:	2300      	movs	r3, #0
 800a20c:	f7f6 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a210:	2800      	cmp	r0, #0
 800a212:	d034      	beq.n	800a27e <_printf_float+0x276>
 800a214:	4a37      	ldr	r2, [pc, #220]	; (800a2f4 <_printf_float+0x2ec>)
 800a216:	2301      	movs	r3, #1
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f af51 	beq.w	800a0c6 <_printf_float+0xbe>
 800a224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a228:	429a      	cmp	r2, r3
 800a22a:	db02      	blt.n	800a232 <_printf_float+0x22a>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	07d8      	lsls	r0, r3, #31
 800a230:	d510      	bpl.n	800a254 <_printf_float+0x24c>
 800a232:	ee18 3a10 	vmov	r3, s16
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f af41 	beq.w	800a0c6 <_printf_float+0xbe>
 800a244:	f04f 0800 	mov.w	r8, #0
 800a248:	f104 091a 	add.w	r9, r4, #26
 800a24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24e:	3b01      	subs	r3, #1
 800a250:	4543      	cmp	r3, r8
 800a252:	dc09      	bgt.n	800a268 <_printf_float+0x260>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	f100 8107 	bmi.w	800a46a <_printf_float+0x462>
 800a25c:	68e0      	ldr	r0, [r4, #12]
 800a25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a260:	4298      	cmp	r0, r3
 800a262:	bfb8      	it	lt
 800a264:	4618      	movlt	r0, r3
 800a266:	e730      	b.n	800a0ca <_printf_float+0xc2>
 800a268:	2301      	movs	r3, #1
 800a26a:	464a      	mov	r2, r9
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af27 	beq.w	800a0c6 <_printf_float+0xbe>
 800a278:	f108 0801 	add.w	r8, r8, #1
 800a27c:	e7e6      	b.n	800a24c <_printf_float+0x244>
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	2b00      	cmp	r3, #0
 800a282:	dc39      	bgt.n	800a2f8 <_printf_float+0x2f0>
 800a284:	4a1b      	ldr	r2, [pc, #108]	; (800a2f4 <_printf_float+0x2ec>)
 800a286:	2301      	movs	r3, #1
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	f43f af19 	beq.w	800a0c6 <_printf_float+0xbe>
 800a294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a298:	4313      	orrs	r3, r2
 800a29a:	d102      	bne.n	800a2a2 <_printf_float+0x29a>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	07d9      	lsls	r1, r3, #31
 800a2a0:	d5d8      	bpl.n	800a254 <_printf_float+0x24c>
 800a2a2:	ee18 3a10 	vmov	r3, s16
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f af09 	beq.w	800a0c6 <_printf_float+0xbe>
 800a2b4:	f04f 0900 	mov.w	r9, #0
 800a2b8:	f104 0a1a 	add.w	sl, r4, #26
 800a2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2be:	425b      	negs	r3, r3
 800a2c0:	454b      	cmp	r3, r9
 800a2c2:	dc01      	bgt.n	800a2c8 <_printf_float+0x2c0>
 800a2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c6:	e792      	b.n	800a1ee <_printf_float+0x1e6>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4652      	mov	r2, sl
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f aef7 	beq.w	800a0c6 <_printf_float+0xbe>
 800a2d8:	f109 0901 	add.w	r9, r9, #1
 800a2dc:	e7ee      	b.n	800a2bc <_printf_float+0x2b4>
 800a2de:	bf00      	nop
 800a2e0:	7fefffff 	.word	0x7fefffff
 800a2e4:	0800c848 	.word	0x0800c848
 800a2e8:	0800c84c 	.word	0x0800c84c
 800a2ec:	0800c850 	.word	0x0800c850
 800a2f0:	0800c854 	.word	0x0800c854
 800a2f4:	0800c858 	.word	0x0800c858
 800a2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	bfa8      	it	ge
 800a300:	461a      	movge	r2, r3
 800a302:	2a00      	cmp	r2, #0
 800a304:	4691      	mov	r9, r2
 800a306:	dc37      	bgt.n	800a378 <_printf_float+0x370>
 800a308:	f04f 0b00 	mov.w	fp, #0
 800a30c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a310:	f104 021a 	add.w	r2, r4, #26
 800a314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	eba3 0309 	sub.w	r3, r3, r9
 800a31c:	455b      	cmp	r3, fp
 800a31e:	dc33      	bgt.n	800a388 <_printf_float+0x380>
 800a320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a324:	429a      	cmp	r2, r3
 800a326:	db3b      	blt.n	800a3a0 <_printf_float+0x398>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	07da      	lsls	r2, r3, #31
 800a32c:	d438      	bmi.n	800a3a0 <_printf_float+0x398>
 800a32e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a332:	eba2 0903 	sub.w	r9, r2, r3
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	4591      	cmp	r9, r2
 800a33c:	bfa8      	it	ge
 800a33e:	4691      	movge	r9, r2
 800a340:	f1b9 0f00 	cmp.w	r9, #0
 800a344:	dc35      	bgt.n	800a3b2 <_printf_float+0x3aa>
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a34e:	f104 0a1a 	add.w	sl, r4, #26
 800a352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	eba3 0309 	sub.w	r3, r3, r9
 800a35c:	4543      	cmp	r3, r8
 800a35e:	f77f af79 	ble.w	800a254 <_printf_float+0x24c>
 800a362:	2301      	movs	r3, #1
 800a364:	4652      	mov	r2, sl
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	47b8      	blx	r7
 800a36c:	3001      	adds	r0, #1
 800a36e:	f43f aeaa 	beq.w	800a0c6 <_printf_float+0xbe>
 800a372:	f108 0801 	add.w	r8, r8, #1
 800a376:	e7ec      	b.n	800a352 <_printf_float+0x34a>
 800a378:	4613      	mov	r3, r2
 800a37a:	4631      	mov	r1, r6
 800a37c:	4642      	mov	r2, r8
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	d1c0      	bne.n	800a308 <_printf_float+0x300>
 800a386:	e69e      	b.n	800a0c6 <_printf_float+0xbe>
 800a388:	2301      	movs	r3, #1
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	9205      	str	r2, [sp, #20]
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f ae97 	beq.w	800a0c6 <_printf_float+0xbe>
 800a398:	9a05      	ldr	r2, [sp, #20]
 800a39a:	f10b 0b01 	add.w	fp, fp, #1
 800a39e:	e7b9      	b.n	800a314 <_printf_float+0x30c>
 800a3a0:	ee18 3a10 	vmov	r3, s16
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d1be      	bne.n	800a32e <_printf_float+0x326>
 800a3b0:	e689      	b.n	800a0c6 <_printf_float+0xbe>
 800a3b2:	9a05      	ldr	r2, [sp, #20]
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	4442      	add	r2, r8
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d1c1      	bne.n	800a346 <_printf_float+0x33e>
 800a3c2:	e680      	b.n	800a0c6 <_printf_float+0xbe>
 800a3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c6:	2a01      	cmp	r2, #1
 800a3c8:	dc01      	bgt.n	800a3ce <_printf_float+0x3c6>
 800a3ca:	07db      	lsls	r3, r3, #31
 800a3cc:	d53a      	bpl.n	800a444 <_printf_float+0x43c>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f43f ae74 	beq.w	800a0c6 <_printf_float+0xbe>
 800a3de:	ee18 3a10 	vmov	r3, s16
 800a3e2:	4652      	mov	r2, sl
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f43f ae6b 	beq.w	800a0c6 <_printf_float+0xbe>
 800a3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3fc:	f7f6 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 800a400:	b9d8      	cbnz	r0, 800a43a <_printf_float+0x432>
 800a402:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a406:	f108 0201 	add.w	r2, r8, #1
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	d10e      	bne.n	800a432 <_printf_float+0x42a>
 800a414:	e657      	b.n	800a0c6 <_printf_float+0xbe>
 800a416:	2301      	movs	r3, #1
 800a418:	4652      	mov	r2, sl
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	f43f ae50 	beq.w	800a0c6 <_printf_float+0xbe>
 800a426:	f108 0801 	add.w	r8, r8, #1
 800a42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4543      	cmp	r3, r8
 800a430:	dcf1      	bgt.n	800a416 <_printf_float+0x40e>
 800a432:	464b      	mov	r3, r9
 800a434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a438:	e6da      	b.n	800a1f0 <_printf_float+0x1e8>
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	f104 0a1a 	add.w	sl, r4, #26
 800a442:	e7f2      	b.n	800a42a <_printf_float+0x422>
 800a444:	2301      	movs	r3, #1
 800a446:	4642      	mov	r2, r8
 800a448:	e7df      	b.n	800a40a <_printf_float+0x402>
 800a44a:	2301      	movs	r3, #1
 800a44c:	464a      	mov	r2, r9
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f ae36 	beq.w	800a0c6 <_printf_float+0xbe>
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	4543      	cmp	r3, r8
 800a466:	dcf0      	bgt.n	800a44a <_printf_float+0x442>
 800a468:	e6f8      	b.n	800a25c <_printf_float+0x254>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	f104 0919 	add.w	r9, r4, #25
 800a472:	e7f4      	b.n	800a45e <_printf_float+0x456>

0800a474 <_printf_common>:
 800a474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	4616      	mov	r6, r2
 800a47a:	4699      	mov	r9, r3
 800a47c:	688a      	ldr	r2, [r1, #8]
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a484:	4293      	cmp	r3, r2
 800a486:	bfb8      	it	lt
 800a488:	4613      	movlt	r3, r2
 800a48a:	6033      	str	r3, [r6, #0]
 800a48c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a490:	4607      	mov	r7, r0
 800a492:	460c      	mov	r4, r1
 800a494:	b10a      	cbz	r2, 800a49a <_printf_common+0x26>
 800a496:	3301      	adds	r3, #1
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	0699      	lsls	r1, r3, #26
 800a49e:	bf42      	ittt	mi
 800a4a0:	6833      	ldrmi	r3, [r6, #0]
 800a4a2:	3302      	addmi	r3, #2
 800a4a4:	6033      	strmi	r3, [r6, #0]
 800a4a6:	6825      	ldr	r5, [r4, #0]
 800a4a8:	f015 0506 	ands.w	r5, r5, #6
 800a4ac:	d106      	bne.n	800a4bc <_printf_common+0x48>
 800a4ae:	f104 0a19 	add.w	sl, r4, #25
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	6832      	ldr	r2, [r6, #0]
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc26      	bgt.n	800a50a <_printf_common+0x96>
 800a4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4c0:	1e13      	subs	r3, r2, #0
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	bf18      	it	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	0692      	lsls	r2, r2, #26
 800a4ca:	d42b      	bmi.n	800a524 <_printf_common+0xb0>
 800a4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d01e      	beq.n	800a518 <_printf_common+0xa4>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	6922      	ldr	r2, [r4, #16]
 800a4de:	f003 0306 	and.w	r3, r3, #6
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	bf02      	ittt	eq
 800a4e6:	68e5      	ldreq	r5, [r4, #12]
 800a4e8:	6833      	ldreq	r3, [r6, #0]
 800a4ea:	1aed      	subeq	r5, r5, r3
 800a4ec:	68a3      	ldr	r3, [r4, #8]
 800a4ee:	bf0c      	ite	eq
 800a4f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f4:	2500      	movne	r5, #0
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	bfc4      	itt	gt
 800a4fa:	1a9b      	subgt	r3, r3, r2
 800a4fc:	18ed      	addgt	r5, r5, r3
 800a4fe:	2600      	movs	r6, #0
 800a500:	341a      	adds	r4, #26
 800a502:	42b5      	cmp	r5, r6
 800a504:	d11a      	bne.n	800a53c <_printf_common+0xc8>
 800a506:	2000      	movs	r0, #0
 800a508:	e008      	b.n	800a51c <_printf_common+0xa8>
 800a50a:	2301      	movs	r3, #1
 800a50c:	4652      	mov	r2, sl
 800a50e:	4649      	mov	r1, r9
 800a510:	4638      	mov	r0, r7
 800a512:	47c0      	blx	r8
 800a514:	3001      	adds	r0, #1
 800a516:	d103      	bne.n	800a520 <_printf_common+0xac>
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a520:	3501      	adds	r5, #1
 800a522:	e7c6      	b.n	800a4b2 <_printf_common+0x3e>
 800a524:	18e1      	adds	r1, r4, r3
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	2030      	movs	r0, #48	; 0x30
 800a52a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a52e:	4422      	add	r2, r4
 800a530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a538:	3302      	adds	r3, #2
 800a53a:	e7c7      	b.n	800a4cc <_printf_common+0x58>
 800a53c:	2301      	movs	r3, #1
 800a53e:	4622      	mov	r2, r4
 800a540:	4649      	mov	r1, r9
 800a542:	4638      	mov	r0, r7
 800a544:	47c0      	blx	r8
 800a546:	3001      	adds	r0, #1
 800a548:	d0e6      	beq.n	800a518 <_printf_common+0xa4>
 800a54a:	3601      	adds	r6, #1
 800a54c:	e7d9      	b.n	800a502 <_printf_common+0x8e>
	...

0800a550 <_printf_i>:
 800a550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	7e0f      	ldrb	r7, [r1, #24]
 800a556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a558:	2f78      	cmp	r7, #120	; 0x78
 800a55a:	4691      	mov	r9, r2
 800a55c:	4680      	mov	r8, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	469a      	mov	sl, r3
 800a562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a566:	d807      	bhi.n	800a578 <_printf_i+0x28>
 800a568:	2f62      	cmp	r7, #98	; 0x62
 800a56a:	d80a      	bhi.n	800a582 <_printf_i+0x32>
 800a56c:	2f00      	cmp	r7, #0
 800a56e:	f000 80d4 	beq.w	800a71a <_printf_i+0x1ca>
 800a572:	2f58      	cmp	r7, #88	; 0x58
 800a574:	f000 80c0 	beq.w	800a6f8 <_printf_i+0x1a8>
 800a578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a580:	e03a      	b.n	800a5f8 <_printf_i+0xa8>
 800a582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a586:	2b15      	cmp	r3, #21
 800a588:	d8f6      	bhi.n	800a578 <_printf_i+0x28>
 800a58a:	a101      	add	r1, pc, #4	; (adr r1, 800a590 <_printf_i+0x40>)
 800a58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a5fd 	.word	0x0800a5fd
 800a598:	0800a579 	.word	0x0800a579
 800a59c:	0800a579 	.word	0x0800a579
 800a5a0:	0800a579 	.word	0x0800a579
 800a5a4:	0800a579 	.word	0x0800a579
 800a5a8:	0800a5fd 	.word	0x0800a5fd
 800a5ac:	0800a579 	.word	0x0800a579
 800a5b0:	0800a579 	.word	0x0800a579
 800a5b4:	0800a579 	.word	0x0800a579
 800a5b8:	0800a579 	.word	0x0800a579
 800a5bc:	0800a701 	.word	0x0800a701
 800a5c0:	0800a629 	.word	0x0800a629
 800a5c4:	0800a6bb 	.word	0x0800a6bb
 800a5c8:	0800a579 	.word	0x0800a579
 800a5cc:	0800a579 	.word	0x0800a579
 800a5d0:	0800a723 	.word	0x0800a723
 800a5d4:	0800a579 	.word	0x0800a579
 800a5d8:	0800a629 	.word	0x0800a629
 800a5dc:	0800a579 	.word	0x0800a579
 800a5e0:	0800a579 	.word	0x0800a579
 800a5e4:	0800a6c3 	.word	0x0800a6c3
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	1d1a      	adds	r2, r3, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	602a      	str	r2, [r5, #0]
 800a5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e09f      	b.n	800a73c <_printf_i+0x1ec>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	0607      	lsls	r7, r0, #24
 800a602:	f103 0104 	add.w	r1, r3, #4
 800a606:	6029      	str	r1, [r5, #0]
 800a608:	d501      	bpl.n	800a60e <_printf_i+0xbe>
 800a60a:	681e      	ldr	r6, [r3, #0]
 800a60c:	e003      	b.n	800a616 <_printf_i+0xc6>
 800a60e:	0646      	lsls	r6, r0, #25
 800a610:	d5fb      	bpl.n	800a60a <_printf_i+0xba>
 800a612:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a616:	2e00      	cmp	r6, #0
 800a618:	da03      	bge.n	800a622 <_printf_i+0xd2>
 800a61a:	232d      	movs	r3, #45	; 0x2d
 800a61c:	4276      	negs	r6, r6
 800a61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a622:	485a      	ldr	r0, [pc, #360]	; (800a78c <_printf_i+0x23c>)
 800a624:	230a      	movs	r3, #10
 800a626:	e012      	b.n	800a64e <_printf_i+0xfe>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	6820      	ldr	r0, [r4, #0]
 800a62c:	1d19      	adds	r1, r3, #4
 800a62e:	6029      	str	r1, [r5, #0]
 800a630:	0605      	lsls	r5, r0, #24
 800a632:	d501      	bpl.n	800a638 <_printf_i+0xe8>
 800a634:	681e      	ldr	r6, [r3, #0]
 800a636:	e002      	b.n	800a63e <_printf_i+0xee>
 800a638:	0641      	lsls	r1, r0, #25
 800a63a:	d5fb      	bpl.n	800a634 <_printf_i+0xe4>
 800a63c:	881e      	ldrh	r6, [r3, #0]
 800a63e:	4853      	ldr	r0, [pc, #332]	; (800a78c <_printf_i+0x23c>)
 800a640:	2f6f      	cmp	r7, #111	; 0x6f
 800a642:	bf0c      	ite	eq
 800a644:	2308      	moveq	r3, #8
 800a646:	230a      	movne	r3, #10
 800a648:	2100      	movs	r1, #0
 800a64a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a64e:	6865      	ldr	r5, [r4, #4]
 800a650:	60a5      	str	r5, [r4, #8]
 800a652:	2d00      	cmp	r5, #0
 800a654:	bfa2      	ittt	ge
 800a656:	6821      	ldrge	r1, [r4, #0]
 800a658:	f021 0104 	bicge.w	r1, r1, #4
 800a65c:	6021      	strge	r1, [r4, #0]
 800a65e:	b90e      	cbnz	r6, 800a664 <_printf_i+0x114>
 800a660:	2d00      	cmp	r5, #0
 800a662:	d04b      	beq.n	800a6fc <_printf_i+0x1ac>
 800a664:	4615      	mov	r5, r2
 800a666:	fbb6 f1f3 	udiv	r1, r6, r3
 800a66a:	fb03 6711 	mls	r7, r3, r1, r6
 800a66e:	5dc7      	ldrb	r7, [r0, r7]
 800a670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a674:	4637      	mov	r7, r6
 800a676:	42bb      	cmp	r3, r7
 800a678:	460e      	mov	r6, r1
 800a67a:	d9f4      	bls.n	800a666 <_printf_i+0x116>
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d10b      	bne.n	800a698 <_printf_i+0x148>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	07de      	lsls	r6, r3, #31
 800a684:	d508      	bpl.n	800a698 <_printf_i+0x148>
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6861      	ldr	r1, [r4, #4]
 800a68a:	4299      	cmp	r1, r3
 800a68c:	bfde      	ittt	le
 800a68e:	2330      	movle	r3, #48	; 0x30
 800a690:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a694:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a698:	1b52      	subs	r2, r2, r5
 800a69a:	6122      	str	r2, [r4, #16]
 800a69c:	f8cd a000 	str.w	sl, [sp]
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	aa03      	add	r2, sp, #12
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f7ff fee4 	bl	800a474 <_printf_common>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d14a      	bne.n	800a746 <_printf_i+0x1f6>
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	b004      	add	sp, #16
 800a6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	f043 0320 	orr.w	r3, r3, #32
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	4833      	ldr	r0, [pc, #204]	; (800a790 <_printf_i+0x240>)
 800a6c4:	2778      	movs	r7, #120	; 0x78
 800a6c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6829      	ldr	r1, [r5, #0]
 800a6ce:	061f      	lsls	r7, r3, #24
 800a6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6d4:	d402      	bmi.n	800a6dc <_printf_i+0x18c>
 800a6d6:	065f      	lsls	r7, r3, #25
 800a6d8:	bf48      	it	mi
 800a6da:	b2b6      	uxthmi	r6, r6
 800a6dc:	07df      	lsls	r7, r3, #31
 800a6de:	bf48      	it	mi
 800a6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a6e4:	6029      	str	r1, [r5, #0]
 800a6e6:	bf48      	it	mi
 800a6e8:	6023      	strmi	r3, [r4, #0]
 800a6ea:	b91e      	cbnz	r6, 800a6f4 <_printf_i+0x1a4>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	e7a7      	b.n	800a648 <_printf_i+0xf8>
 800a6f8:	4824      	ldr	r0, [pc, #144]	; (800a78c <_printf_i+0x23c>)
 800a6fa:	e7e4      	b.n	800a6c6 <_printf_i+0x176>
 800a6fc:	4615      	mov	r5, r2
 800a6fe:	e7bd      	b.n	800a67c <_printf_i+0x12c>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	6826      	ldr	r6, [r4, #0]
 800a704:	6961      	ldr	r1, [r4, #20]
 800a706:	1d18      	adds	r0, r3, #4
 800a708:	6028      	str	r0, [r5, #0]
 800a70a:	0635      	lsls	r5, r6, #24
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	d501      	bpl.n	800a714 <_printf_i+0x1c4>
 800a710:	6019      	str	r1, [r3, #0]
 800a712:	e002      	b.n	800a71a <_printf_i+0x1ca>
 800a714:	0670      	lsls	r0, r6, #25
 800a716:	d5fb      	bpl.n	800a710 <_printf_i+0x1c0>
 800a718:	8019      	strh	r1, [r3, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	6123      	str	r3, [r4, #16]
 800a71e:	4615      	mov	r5, r2
 800a720:	e7bc      	b.n	800a69c <_printf_i+0x14c>
 800a722:	682b      	ldr	r3, [r5, #0]
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	602a      	str	r2, [r5, #0]
 800a728:	681d      	ldr	r5, [r3, #0]
 800a72a:	6862      	ldr	r2, [r4, #4]
 800a72c:	2100      	movs	r1, #0
 800a72e:	4628      	mov	r0, r5
 800a730:	f7f5 fd4e 	bl	80001d0 <memchr>
 800a734:	b108      	cbz	r0, 800a73a <_printf_i+0x1ea>
 800a736:	1b40      	subs	r0, r0, r5
 800a738:	6060      	str	r0, [r4, #4]
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	6123      	str	r3, [r4, #16]
 800a73e:	2300      	movs	r3, #0
 800a740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a744:	e7aa      	b.n	800a69c <_printf_i+0x14c>
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	462a      	mov	r2, r5
 800a74a:	4649      	mov	r1, r9
 800a74c:	4640      	mov	r0, r8
 800a74e:	47d0      	blx	sl
 800a750:	3001      	adds	r0, #1
 800a752:	d0ad      	beq.n	800a6b0 <_printf_i+0x160>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	079b      	lsls	r3, r3, #30
 800a758:	d413      	bmi.n	800a782 <_printf_i+0x232>
 800a75a:	68e0      	ldr	r0, [r4, #12]
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	4298      	cmp	r0, r3
 800a760:	bfb8      	it	lt
 800a762:	4618      	movlt	r0, r3
 800a764:	e7a6      	b.n	800a6b4 <_printf_i+0x164>
 800a766:	2301      	movs	r3, #1
 800a768:	4632      	mov	r2, r6
 800a76a:	4649      	mov	r1, r9
 800a76c:	4640      	mov	r0, r8
 800a76e:	47d0      	blx	sl
 800a770:	3001      	adds	r0, #1
 800a772:	d09d      	beq.n	800a6b0 <_printf_i+0x160>
 800a774:	3501      	adds	r5, #1
 800a776:	68e3      	ldr	r3, [r4, #12]
 800a778:	9903      	ldr	r1, [sp, #12]
 800a77a:	1a5b      	subs	r3, r3, r1
 800a77c:	42ab      	cmp	r3, r5
 800a77e:	dcf2      	bgt.n	800a766 <_printf_i+0x216>
 800a780:	e7eb      	b.n	800a75a <_printf_i+0x20a>
 800a782:	2500      	movs	r5, #0
 800a784:	f104 0619 	add.w	r6, r4, #25
 800a788:	e7f5      	b.n	800a776 <_printf_i+0x226>
 800a78a:	bf00      	nop
 800a78c:	0800c85a 	.word	0x0800c85a
 800a790:	0800c86b 	.word	0x0800c86b

0800a794 <std>:
 800a794:	2300      	movs	r3, #0
 800a796:	b510      	push	{r4, lr}
 800a798:	4604      	mov	r4, r0
 800a79a:	e9c0 3300 	strd	r3, r3, [r0]
 800a79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7a2:	6083      	str	r3, [r0, #8]
 800a7a4:	8181      	strh	r1, [r0, #12]
 800a7a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7a8:	81c2      	strh	r2, [r0, #14]
 800a7aa:	6183      	str	r3, [r0, #24]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	2208      	movs	r2, #8
 800a7b0:	305c      	adds	r0, #92	; 0x5c
 800a7b2:	f000 f9ed 	bl	800ab90 <memset>
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <std+0x38>)
 800a7b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ba:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <std+0x3c>)
 800a7bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <std+0x40>)
 800a7c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <std+0x44>)
 800a7c4:	6224      	str	r4, [r4, #32]
 800a7c6:	6323      	str	r3, [r4, #48]	; 0x30
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	bf00      	nop
 800a7cc:	0800a9e1 	.word	0x0800a9e1
 800a7d0:	0800aa03 	.word	0x0800aa03
 800a7d4:	0800aa3b 	.word	0x0800aa3b
 800a7d8:	0800aa5f 	.word	0x0800aa5f

0800a7dc <stdio_exit_handler>:
 800a7dc:	4a02      	ldr	r2, [pc, #8]	; (800a7e8 <stdio_exit_handler+0xc>)
 800a7de:	4903      	ldr	r1, [pc, #12]	; (800a7ec <stdio_exit_handler+0x10>)
 800a7e0:	4803      	ldr	r0, [pc, #12]	; (800a7f0 <stdio_exit_handler+0x14>)
 800a7e2:	f000 b869 	b.w	800a8b8 <_fwalk_sglue>
 800a7e6:	bf00      	nop
 800a7e8:	2000002c 	.word	0x2000002c
 800a7ec:	0800c4c9 	.word	0x0800c4c9
 800a7f0:	20000038 	.word	0x20000038

0800a7f4 <cleanup_stdio>:
 800a7f4:	6841      	ldr	r1, [r0, #4]
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <cleanup_stdio+0x34>)
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	d001      	beq.n	800a804 <cleanup_stdio+0x10>
 800a800:	f001 fe62 	bl	800c4c8 <_fflush_r>
 800a804:	68a1      	ldr	r1, [r4, #8]
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <cleanup_stdio+0x38>)
 800a808:	4299      	cmp	r1, r3
 800a80a:	d002      	beq.n	800a812 <cleanup_stdio+0x1e>
 800a80c:	4620      	mov	r0, r4
 800a80e:	f001 fe5b 	bl	800c4c8 <_fflush_r>
 800a812:	68e1      	ldr	r1, [r4, #12]
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <cleanup_stdio+0x3c>)
 800a816:	4299      	cmp	r1, r3
 800a818:	d004      	beq.n	800a824 <cleanup_stdio+0x30>
 800a81a:	4620      	mov	r0, r4
 800a81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a820:	f001 be52 	b.w	800c4c8 <_fflush_r>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	bf00      	nop
 800a828:	2000164c 	.word	0x2000164c
 800a82c:	200016b4 	.word	0x200016b4
 800a830:	2000171c 	.word	0x2000171c

0800a834 <global_stdio_init.part.0>:
 800a834:	b510      	push	{r4, lr}
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <global_stdio_init.part.0+0x30>)
 800a838:	4c0b      	ldr	r4, [pc, #44]	; (800a868 <global_stdio_init.part.0+0x34>)
 800a83a:	4a0c      	ldr	r2, [pc, #48]	; (800a86c <global_stdio_init.part.0+0x38>)
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	4620      	mov	r0, r4
 800a840:	2200      	movs	r2, #0
 800a842:	2104      	movs	r1, #4
 800a844:	f7ff ffa6 	bl	800a794 <std>
 800a848:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a84c:	2201      	movs	r2, #1
 800a84e:	2109      	movs	r1, #9
 800a850:	f7ff ffa0 	bl	800a794 <std>
 800a854:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a858:	2202      	movs	r2, #2
 800a85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85e:	2112      	movs	r1, #18
 800a860:	f7ff bf98 	b.w	800a794 <std>
 800a864:	20001784 	.word	0x20001784
 800a868:	2000164c 	.word	0x2000164c
 800a86c:	0800a7dd 	.word	0x0800a7dd

0800a870 <__sfp_lock_acquire>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__sfp_lock_acquire+0x8>)
 800a872:	f000 ba19 	b.w	800aca8 <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	2000178d 	.word	0x2000178d

0800a87c <__sfp_lock_release>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sfp_lock_release+0x8>)
 800a87e:	f000 ba14 	b.w	800acaa <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	2000178d 	.word	0x2000178d

0800a888 <__sinit>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4604      	mov	r4, r0
 800a88c:	f7ff fff0 	bl	800a870 <__sfp_lock_acquire>
 800a890:	6a23      	ldr	r3, [r4, #32]
 800a892:	b11b      	cbz	r3, 800a89c <__sinit+0x14>
 800a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a898:	f7ff bff0 	b.w	800a87c <__sfp_lock_release>
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <__sinit+0x28>)
 800a89e:	6223      	str	r3, [r4, #32]
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <__sinit+0x2c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f5      	bne.n	800a894 <__sinit+0xc>
 800a8a8:	f7ff ffc4 	bl	800a834 <global_stdio_init.part.0>
 800a8ac:	e7f2      	b.n	800a894 <__sinit+0xc>
 800a8ae:	bf00      	nop
 800a8b0:	0800a7f5 	.word	0x0800a7f5
 800a8b4:	20001784 	.word	0x20001784

0800a8b8 <_fwalk_sglue>:
 800a8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8bc:	4607      	mov	r7, r0
 800a8be:	4688      	mov	r8, r1
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	2600      	movs	r6, #0
 800a8c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8cc:	d505      	bpl.n	800a8da <_fwalk_sglue+0x22>
 800a8ce:	6824      	ldr	r4, [r4, #0]
 800a8d0:	2c00      	cmp	r4, #0
 800a8d2:	d1f7      	bne.n	800a8c4 <_fwalk_sglue+0xc>
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d907      	bls.n	800a8f0 <_fwalk_sglue+0x38>
 800a8e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	d003      	beq.n	800a8f0 <_fwalk_sglue+0x38>
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	47c0      	blx	r8
 800a8ee:	4306      	orrs	r6, r0
 800a8f0:	3568      	adds	r5, #104	; 0x68
 800a8f2:	e7e9      	b.n	800a8c8 <_fwalk_sglue+0x10>

0800a8f4 <iprintf>:
 800a8f4:	b40f      	push	{r0, r1, r2, r3}
 800a8f6:	b507      	push	{r0, r1, r2, lr}
 800a8f8:	4906      	ldr	r1, [pc, #24]	; (800a914 <iprintf+0x20>)
 800a8fa:	ab04      	add	r3, sp, #16
 800a8fc:	6808      	ldr	r0, [r1, #0]
 800a8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a902:	6881      	ldr	r1, [r0, #8]
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	f001 fc3f 	bl	800c188 <_vfiprintf_r>
 800a90a:	b003      	add	sp, #12
 800a90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a910:	b004      	add	sp, #16
 800a912:	4770      	bx	lr
 800a914:	20000084 	.word	0x20000084

0800a918 <putchar>:
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <putchar+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	6882      	ldr	r2, [r0, #8]
 800a920:	f001 be5c 	b.w	800c5dc <_putc_r>
 800a924:	20000084 	.word	0x20000084

0800a928 <_puts_r>:
 800a928:	6a03      	ldr	r3, [r0, #32]
 800a92a:	b570      	push	{r4, r5, r6, lr}
 800a92c:	6884      	ldr	r4, [r0, #8]
 800a92e:	4605      	mov	r5, r0
 800a930:	460e      	mov	r6, r1
 800a932:	b90b      	cbnz	r3, 800a938 <_puts_r+0x10>
 800a934:	f7ff ffa8 	bl	800a888 <__sinit>
 800a938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a93a:	07db      	lsls	r3, r3, #31
 800a93c:	d405      	bmi.n	800a94a <_puts_r+0x22>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	0598      	lsls	r0, r3, #22
 800a942:	d402      	bmi.n	800a94a <_puts_r+0x22>
 800a944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a946:	f000 f9af 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	0719      	lsls	r1, r3, #28
 800a94e:	d513      	bpl.n	800a978 <_puts_r+0x50>
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	b18b      	cbz	r3, 800a978 <_puts_r+0x50>
 800a954:	3e01      	subs	r6, #1
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a95c:	3b01      	subs	r3, #1
 800a95e:	60a3      	str	r3, [r4, #8]
 800a960:	b9e9      	cbnz	r1, 800a99e <_puts_r+0x76>
 800a962:	2b00      	cmp	r3, #0
 800a964:	da2e      	bge.n	800a9c4 <_puts_r+0x9c>
 800a966:	4622      	mov	r2, r4
 800a968:	210a      	movs	r1, #10
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 f87b 	bl	800aa66 <__swbuf_r>
 800a970:	3001      	adds	r0, #1
 800a972:	d007      	beq.n	800a984 <_puts_r+0x5c>
 800a974:	250a      	movs	r5, #10
 800a976:	e007      	b.n	800a988 <_puts_r+0x60>
 800a978:	4621      	mov	r1, r4
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f8b0 	bl	800aae0 <__swsetup_r>
 800a980:	2800      	cmp	r0, #0
 800a982:	d0e7      	beq.n	800a954 <_puts_r+0x2c>
 800a984:	f04f 35ff 	mov.w	r5, #4294967295
 800a988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a98a:	07da      	lsls	r2, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_puts_r+0x72>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	059b      	lsls	r3, r3, #22
 800a992:	d402      	bmi.n	800a99a <_puts_r+0x72>
 800a994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a996:	f000 f988 	bl	800acaa <__retarget_lock_release_recursive>
 800a99a:	4628      	mov	r0, r5
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da04      	bge.n	800a9ac <_puts_r+0x84>
 800a9a2:	69a2      	ldr	r2, [r4, #24]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	dc06      	bgt.n	800a9b6 <_puts_r+0x8e>
 800a9a8:	290a      	cmp	r1, #10
 800a9aa:	d004      	beq.n	800a9b6 <_puts_r+0x8e>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	7019      	strb	r1, [r3, #0]
 800a9b4:	e7cf      	b.n	800a956 <_puts_r+0x2e>
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 f854 	bl	800aa66 <__swbuf_r>
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d1c9      	bne.n	800a956 <_puts_r+0x2e>
 800a9c2:	e7df      	b.n	800a984 <_puts_r+0x5c>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	250a      	movs	r5, #10
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	6022      	str	r2, [r4, #0]
 800a9cc:	701d      	strb	r5, [r3, #0]
 800a9ce:	e7db      	b.n	800a988 <_puts_r+0x60>

0800a9d0 <puts>:
 800a9d0:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <puts+0xc>)
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	f7ff bfa7 	b.w	800a928 <_puts_r>
 800a9da:	bf00      	nop
 800a9dc:	20000084 	.word	0x20000084

0800a9e0 <__sread>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e8:	f000 f900 	bl	800abec <_read_r>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	bfab      	itete	ge
 800a9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9f4:	181b      	addge	r3, r3, r0
 800a9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9fa:	bfac      	ite	ge
 800a9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9fe:	81a3      	strhlt	r3, [r4, #12]
 800aa00:	bd10      	pop	{r4, pc}

0800aa02 <__swrite>:
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	461f      	mov	r7, r3
 800aa08:	898b      	ldrh	r3, [r1, #12]
 800aa0a:	05db      	lsls	r3, r3, #23
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4616      	mov	r6, r2
 800aa12:	d505      	bpl.n	800aa20 <__swrite+0x1e>
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	2302      	movs	r3, #2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f000 f8d4 	bl	800abc8 <_lseek_r>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	463b      	mov	r3, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	f000 b8fb 	b.w	800ac30 <_write_r>

0800aa3a <__sseek>:
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 f8c1 	bl	800abc8 <_lseek_r>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	bf15      	itete	ne
 800aa4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa56:	81a3      	strheq	r3, [r4, #12]
 800aa58:	bf18      	it	ne
 800aa5a:	81a3      	strhne	r3, [r4, #12]
 800aa5c:	bd10      	pop	{r4, pc}

0800aa5e <__sclose>:
 800aa5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa62:	f000 b8a1 	b.w	800aba8 <_close_r>

0800aa66 <__swbuf_r>:
 800aa66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa68:	460e      	mov	r6, r1
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	b118      	cbz	r0, 800aa78 <__swbuf_r+0x12>
 800aa70:	6a03      	ldr	r3, [r0, #32]
 800aa72:	b90b      	cbnz	r3, 800aa78 <__swbuf_r+0x12>
 800aa74:	f7ff ff08 	bl	800a888 <__sinit>
 800aa78:	69a3      	ldr	r3, [r4, #24]
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	071a      	lsls	r2, r3, #28
 800aa80:	d525      	bpl.n	800aace <__swbuf_r+0x68>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	b31b      	cbz	r3, 800aace <__swbuf_r+0x68>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	6922      	ldr	r2, [r4, #16]
 800aa8a:	1a98      	subs	r0, r3, r2
 800aa8c:	6963      	ldr	r3, [r4, #20]
 800aa8e:	b2f6      	uxtb	r6, r6
 800aa90:	4283      	cmp	r3, r0
 800aa92:	4637      	mov	r7, r6
 800aa94:	dc04      	bgt.n	800aaa0 <__swbuf_r+0x3a>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f001 fd15 	bl	800c4c8 <_fflush_r>
 800aa9e:	b9e0      	cbnz	r0, 800aada <__swbuf_r+0x74>
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	701e      	strb	r6, [r3, #0]
 800aaae:	6962      	ldr	r2, [r4, #20]
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d004      	beq.n	800aac0 <__swbuf_r+0x5a>
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	07db      	lsls	r3, r3, #31
 800aaba:	d506      	bpl.n	800aaca <__swbuf_r+0x64>
 800aabc:	2e0a      	cmp	r6, #10
 800aabe:	d104      	bne.n	800aaca <__swbuf_r+0x64>
 800aac0:	4621      	mov	r1, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	f001 fd00 	bl	800c4c8 <_fflush_r>
 800aac8:	b938      	cbnz	r0, 800aada <__swbuf_r+0x74>
 800aaca:	4638      	mov	r0, r7
 800aacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f805 	bl	800aae0 <__swsetup_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0d5      	beq.n	800aa86 <__swbuf_r+0x20>
 800aada:	f04f 37ff 	mov.w	r7, #4294967295
 800aade:	e7f4      	b.n	800aaca <__swbuf_r+0x64>

0800aae0 <__swsetup_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4b2a      	ldr	r3, [pc, #168]	; (800ab8c <__swsetup_r+0xac>)
 800aae4:	4605      	mov	r5, r0
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	460c      	mov	r4, r1
 800aaea:	b118      	cbz	r0, 800aaf4 <__swsetup_r+0x14>
 800aaec:	6a03      	ldr	r3, [r0, #32]
 800aaee:	b90b      	cbnz	r3, 800aaf4 <__swsetup_r+0x14>
 800aaf0:	f7ff feca 	bl	800a888 <__sinit>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafa:	0718      	lsls	r0, r3, #28
 800aafc:	d422      	bmi.n	800ab44 <__swsetup_r+0x64>
 800aafe:	06d9      	lsls	r1, r3, #27
 800ab00:	d407      	bmi.n	800ab12 <__swsetup_r+0x32>
 800ab02:	2309      	movs	r3, #9
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab0a:	81a3      	strh	r3, [r4, #12]
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	e034      	b.n	800ab7c <__swsetup_r+0x9c>
 800ab12:	0758      	lsls	r0, r3, #29
 800ab14:	d512      	bpl.n	800ab3c <__swsetup_r+0x5c>
 800ab16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab18:	b141      	cbz	r1, 800ab2c <__swsetup_r+0x4c>
 800ab1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	d002      	beq.n	800ab28 <__swsetup_r+0x48>
 800ab22:	4628      	mov	r0, r5
 800ab24:	f000 ff3e 	bl	800b9a4 <_free_r>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6363      	str	r3, [r4, #52]	; 0x34
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	2300      	movs	r3, #0
 800ab36:	6063      	str	r3, [r4, #4]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f043 0308 	orr.w	r3, r3, #8
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b94b      	cbnz	r3, 800ab5c <__swsetup_r+0x7c>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab52:	d003      	beq.n	800ab5c <__swsetup_r+0x7c>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	f001 fd04 	bl	800c564 <__smakebuf_r>
 800ab5c:	89a0      	ldrh	r0, [r4, #12]
 800ab5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab62:	f010 0301 	ands.w	r3, r0, #1
 800ab66:	d00a      	beq.n	800ab7e <__swsetup_r+0x9e>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60a3      	str	r3, [r4, #8]
 800ab6c:	6963      	ldr	r3, [r4, #20]
 800ab6e:	425b      	negs	r3, r3
 800ab70:	61a3      	str	r3, [r4, #24]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	b943      	cbnz	r3, 800ab88 <__swsetup_r+0xa8>
 800ab76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab7a:	d1c4      	bne.n	800ab06 <__swsetup_r+0x26>
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	0781      	lsls	r1, r0, #30
 800ab80:	bf58      	it	pl
 800ab82:	6963      	ldrpl	r3, [r4, #20]
 800ab84:	60a3      	str	r3, [r4, #8]
 800ab86:	e7f4      	b.n	800ab72 <__swsetup_r+0x92>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	e7f7      	b.n	800ab7c <__swsetup_r+0x9c>
 800ab8c:	20000084 	.word	0x20000084

0800ab90 <memset>:
 800ab90:	4402      	add	r2, r0
 800ab92:	4603      	mov	r3, r0
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d100      	bne.n	800ab9a <memset+0xa>
 800ab98:	4770      	bx	lr
 800ab9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9e:	e7f9      	b.n	800ab94 <memset+0x4>

0800aba0 <_localeconv_r>:
 800aba0:	4800      	ldr	r0, [pc, #0]	; (800aba4 <_localeconv_r+0x4>)
 800aba2:	4770      	bx	lr
 800aba4:	20000178 	.word	0x20000178

0800aba8 <_close_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d06      	ldr	r5, [pc, #24]	; (800abc4 <_close_r+0x1c>)
 800abac:	2300      	movs	r3, #0
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f6 ff5d 	bl	8001a72 <_close>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_close_r+0x1a>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_close_r+0x1a>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20001788 	.word	0x20001788

0800abc8 <_lseek_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d07      	ldr	r5, [pc, #28]	; (800abe8 <_lseek_r+0x20>)
 800abcc:	4604      	mov	r4, r0
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7f6 ff72 	bl	8001ac0 <_lseek>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_lseek_r+0x1e>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_lseek_r+0x1e>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	20001788 	.word	0x20001788

0800abec <_read_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_read_r+0x20>)
 800abf0:	4604      	mov	r4, r0
 800abf2:	4608      	mov	r0, r1
 800abf4:	4611      	mov	r1, r2
 800abf6:	2200      	movs	r2, #0
 800abf8:	602a      	str	r2, [r5, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	f7f6 ff00 	bl	8001a00 <_read>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_read_r+0x1e>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_read_r+0x1e>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20001788 	.word	0x20001788

0800ac10 <_sbrk_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_sbrk_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f6 ff5e 	bl	8001adc <_sbrk>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_sbrk_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_sbrk_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	20001788 	.word	0x20001788

0800ac30 <_write_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_write_r+0x20>)
 800ac34:	4604      	mov	r4, r0
 800ac36:	4608      	mov	r0, r1
 800ac38:	4611      	mov	r1, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	602a      	str	r2, [r5, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f7f6 fefb 	bl	8001a3a <_write>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_write_r+0x1e>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_write_r+0x1e>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20001788 	.word	0x20001788

0800ac54 <__errno>:
 800ac54:	4b01      	ldr	r3, [pc, #4]	; (800ac5c <__errno+0x8>)
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20000084 	.word	0x20000084

0800ac60 <__libc_init_array>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	4d0d      	ldr	r5, [pc, #52]	; (800ac98 <__libc_init_array+0x38>)
 800ac64:	4c0d      	ldr	r4, [pc, #52]	; (800ac9c <__libc_init_array+0x3c>)
 800ac66:	1b64      	subs	r4, r4, r5
 800ac68:	10a4      	asrs	r4, r4, #2
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	d109      	bne.n	800ac84 <__libc_init_array+0x24>
 800ac70:	4d0b      	ldr	r5, [pc, #44]	; (800aca0 <__libc_init_array+0x40>)
 800ac72:	4c0c      	ldr	r4, [pc, #48]	; (800aca4 <__libc_init_array+0x44>)
 800ac74:	f001 fdc8 	bl	800c808 <_init>
 800ac78:	1b64      	subs	r4, r4, r5
 800ac7a:	10a4      	asrs	r4, r4, #2
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	42a6      	cmp	r6, r4
 800ac80:	d105      	bne.n	800ac8e <__libc_init_array+0x2e>
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac88:	4798      	blx	r3
 800ac8a:	3601      	adds	r6, #1
 800ac8c:	e7ee      	b.n	800ac6c <__libc_init_array+0xc>
 800ac8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac92:	4798      	blx	r3
 800ac94:	3601      	adds	r6, #1
 800ac96:	e7f2      	b.n	800ac7e <__libc_init_array+0x1e>
 800ac98:	0800cbc4 	.word	0x0800cbc4
 800ac9c:	0800cbc4 	.word	0x0800cbc4
 800aca0:	0800cbc4 	.word	0x0800cbc4
 800aca4:	0800cbc8 	.word	0x0800cbc8

0800aca8 <__retarget_lock_acquire_recursive>:
 800aca8:	4770      	bx	lr

0800acaa <__retarget_lock_release_recursive>:
 800acaa:	4770      	bx	lr

0800acac <quorem>:
 800acac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	6903      	ldr	r3, [r0, #16]
 800acb2:	690c      	ldr	r4, [r1, #16]
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	4607      	mov	r7, r0
 800acb8:	db7e      	blt.n	800adb8 <quorem+0x10c>
 800acba:	3c01      	subs	r4, #1
 800acbc:	f101 0814 	add.w	r8, r1, #20
 800acc0:	f100 0514 	add.w	r5, r0, #20
 800acc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acd2:	3301      	adds	r3, #1
 800acd4:	429a      	cmp	r2, r3
 800acd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800acda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acde:	fbb2 f6f3 	udiv	r6, r2, r3
 800ace2:	d331      	bcc.n	800ad48 <quorem+0x9c>
 800ace4:	f04f 0e00 	mov.w	lr, #0
 800ace8:	4640      	mov	r0, r8
 800acea:	46ac      	mov	ip, r5
 800acec:	46f2      	mov	sl, lr
 800acee:	f850 2b04 	ldr.w	r2, [r0], #4
 800acf2:	b293      	uxth	r3, r2
 800acf4:	fb06 e303 	mla	r3, r6, r3, lr
 800acf8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acfc:	0c1a      	lsrs	r2, r3, #16
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	ebaa 0303 	sub.w	r3, sl, r3
 800ad04:	f8dc a000 	ldr.w	sl, [ip]
 800ad08:	fa13 f38a 	uxtah	r3, r3, sl
 800ad0c:	fb06 220e 	mla	r2, r6, lr, r2
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad18:	b292      	uxth	r2, r2
 800ad1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad22:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad26:	4581      	cmp	r9, r0
 800ad28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad2c:	f84c 3b04 	str.w	r3, [ip], #4
 800ad30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad34:	d2db      	bcs.n	800acee <quorem+0x42>
 800ad36:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad3a:	b92b      	cbnz	r3, 800ad48 <quorem+0x9c>
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	3b04      	subs	r3, #4
 800ad40:	429d      	cmp	r5, r3
 800ad42:	461a      	mov	r2, r3
 800ad44:	d32c      	bcc.n	800ada0 <quorem+0xf4>
 800ad46:	613c      	str	r4, [r7, #16]
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f001 f8f3 	bl	800bf34 <__mcmp>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	db22      	blt.n	800ad98 <quorem+0xec>
 800ad52:	3601      	adds	r6, #1
 800ad54:	4629      	mov	r1, r5
 800ad56:	2000      	movs	r0, #0
 800ad58:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad5c:	f8d1 c000 	ldr.w	ip, [r1]
 800ad60:	b293      	uxth	r3, r2
 800ad62:	1ac3      	subs	r3, r0, r3
 800ad64:	0c12      	lsrs	r2, r2, #16
 800ad66:	fa13 f38c 	uxtah	r3, r3, ip
 800ad6a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ad6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad78:	45c1      	cmp	r9, r8
 800ad7a:	f841 3b04 	str.w	r3, [r1], #4
 800ad7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad82:	d2e9      	bcs.n	800ad58 <quorem+0xac>
 800ad84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad8c:	b922      	cbnz	r2, 800ad98 <quorem+0xec>
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	429d      	cmp	r5, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	d30a      	bcc.n	800adac <quorem+0x100>
 800ad96:	613c      	str	r4, [r7, #16]
 800ad98:	4630      	mov	r0, r6
 800ad9a:	b003      	add	sp, #12
 800ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada0:	6812      	ldr	r2, [r2, #0]
 800ada2:	3b04      	subs	r3, #4
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	d1ce      	bne.n	800ad46 <quorem+0x9a>
 800ada8:	3c01      	subs	r4, #1
 800adaa:	e7c9      	b.n	800ad40 <quorem+0x94>
 800adac:	6812      	ldr	r2, [r2, #0]
 800adae:	3b04      	subs	r3, #4
 800adb0:	2a00      	cmp	r2, #0
 800adb2:	d1f0      	bne.n	800ad96 <quorem+0xea>
 800adb4:	3c01      	subs	r4, #1
 800adb6:	e7eb      	b.n	800ad90 <quorem+0xe4>
 800adb8:	2000      	movs	r0, #0
 800adba:	e7ee      	b.n	800ad9a <quorem+0xee>
 800adbc:	0000      	movs	r0, r0
	...

0800adc0 <_dtoa_r>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	ed2d 8b04 	vpush	{d8-d9}
 800adc8:	69c5      	ldr	r5, [r0, #28]
 800adca:	b093      	sub	sp, #76	; 0x4c
 800adcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800add8:	9107      	str	r1, [sp, #28]
 800adda:	4604      	mov	r4, r0
 800addc:	920a      	str	r2, [sp, #40]	; 0x28
 800adde:	930d      	str	r3, [sp, #52]	; 0x34
 800ade0:	b975      	cbnz	r5, 800ae00 <_dtoa_r+0x40>
 800ade2:	2010      	movs	r0, #16
 800ade4:	f7fe ffb4 	bl	8009d50 <malloc>
 800ade8:	4602      	mov	r2, r0
 800adea:	61e0      	str	r0, [r4, #28]
 800adec:	b920      	cbnz	r0, 800adf8 <_dtoa_r+0x38>
 800adee:	4bae      	ldr	r3, [pc, #696]	; (800b0a8 <_dtoa_r+0x2e8>)
 800adf0:	21ef      	movs	r1, #239	; 0xef
 800adf2:	48ae      	ldr	r0, [pc, #696]	; (800b0ac <_dtoa_r+0x2ec>)
 800adf4:	f001 fc56 	bl	800c6a4 <__assert_func>
 800adf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adfc:	6005      	str	r5, [r0, #0]
 800adfe:	60c5      	str	r5, [r0, #12]
 800ae00:	69e3      	ldr	r3, [r4, #28]
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	b151      	cbz	r1, 800ae1c <_dtoa_r+0x5c>
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	604a      	str	r2, [r1, #4]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4093      	lsls	r3, r2
 800ae0e:	608b      	str	r3, [r1, #8]
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fe53 	bl	800babc <_Bfree>
 800ae16:	69e3      	ldr	r3, [r4, #28]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	1e3b      	subs	r3, r7, #0
 800ae1e:	bfbb      	ittet	lt
 800ae20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae24:	9303      	strlt	r3, [sp, #12]
 800ae26:	2300      	movge	r3, #0
 800ae28:	2201      	movlt	r2, #1
 800ae2a:	bfac      	ite	ge
 800ae2c:	f8c8 3000 	strge.w	r3, [r8]
 800ae30:	f8c8 2000 	strlt.w	r2, [r8]
 800ae34:	4b9e      	ldr	r3, [pc, #632]	; (800b0b0 <_dtoa_r+0x2f0>)
 800ae36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae3a:	ea33 0308 	bics.w	r3, r3, r8
 800ae3e:	d11b      	bne.n	800ae78 <_dtoa_r+0xb8>
 800ae40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae42:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ae4c:	4333      	orrs	r3, r6
 800ae4e:	f000 8593 	beq.w	800b978 <_dtoa_r+0xbb8>
 800ae52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae54:	b963      	cbnz	r3, 800ae70 <_dtoa_r+0xb0>
 800ae56:	4b97      	ldr	r3, [pc, #604]	; (800b0b4 <_dtoa_r+0x2f4>)
 800ae58:	e027      	b.n	800aeaa <_dtoa_r+0xea>
 800ae5a:	4b97      	ldr	r3, [pc, #604]	; (800b0b8 <_dtoa_r+0x2f8>)
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	9800      	ldr	r0, [sp, #0]
 800ae66:	b013      	add	sp, #76	; 0x4c
 800ae68:	ecbd 8b04 	vpop	{d8-d9}
 800ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae70:	4b90      	ldr	r3, [pc, #576]	; (800b0b4 <_dtoa_r+0x2f4>)
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	3303      	adds	r3, #3
 800ae76:	e7f3      	b.n	800ae60 <_dtoa_r+0xa0>
 800ae78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	ec51 0b17 	vmov	r0, r1, d7
 800ae82:	eeb0 8a47 	vmov.f32	s16, s14
 800ae86:	eef0 8a67 	vmov.f32	s17, s15
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f7f5 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae90:	4681      	mov	r9, r0
 800ae92:	b160      	cbz	r0, 800aeae <_dtoa_r+0xee>
 800ae94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae96:	2301      	movs	r3, #1
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 8568 	beq.w	800b972 <_dtoa_r+0xbb2>
 800aea2:	4b86      	ldr	r3, [pc, #536]	; (800b0bc <_dtoa_r+0x2fc>)
 800aea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	e7da      	b.n	800ae64 <_dtoa_r+0xa4>
 800aeae:	aa10      	add	r2, sp, #64	; 0x40
 800aeb0:	a911      	add	r1, sp, #68	; 0x44
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb8:	eef0 0a68 	vmov.f32	s1, s17
 800aebc:	f001 f8e0 	bl	800c080 <__d2b>
 800aec0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aec4:	4682      	mov	sl, r0
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	d07f      	beq.n	800afca <_dtoa_r+0x20a>
 800aeca:	ee18 3a90 	vmov	r3, s17
 800aece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aed2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aed6:	ec51 0b18 	vmov	r0, r1, d8
 800aeda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aee2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aee6:	4619      	mov	r1, r3
 800aee8:	2200      	movs	r2, #0
 800aeea:	4b75      	ldr	r3, [pc, #468]	; (800b0c0 <_dtoa_r+0x300>)
 800aeec:	f7f5 f9cc 	bl	8000288 <__aeabi_dsub>
 800aef0:	a367      	add	r3, pc, #412	; (adr r3, 800b090 <_dtoa_r+0x2d0>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 fb7f 	bl	80005f8 <__aeabi_dmul>
 800aefa:	a367      	add	r3, pc, #412	; (adr r3, 800b098 <_dtoa_r+0x2d8>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f7f5 f9c4 	bl	800028c <__adddf3>
 800af04:	4606      	mov	r6, r0
 800af06:	4628      	mov	r0, r5
 800af08:	460f      	mov	r7, r1
 800af0a:	f7f5 fb0b 	bl	8000524 <__aeabi_i2d>
 800af0e:	a364      	add	r3, pc, #400	; (adr r3, 800b0a0 <_dtoa_r+0x2e0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 fb70 	bl	80005f8 <__aeabi_dmul>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4630      	mov	r0, r6
 800af1e:	4639      	mov	r1, r7
 800af20:	f7f5 f9b4 	bl	800028c <__adddf3>
 800af24:	4606      	mov	r6, r0
 800af26:	460f      	mov	r7, r1
 800af28:	f7f5 fe16 	bl	8000b58 <__aeabi_d2iz>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4683      	mov	fp, r0
 800af30:	2300      	movs	r3, #0
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 fdd1 	bl	8000adc <__aeabi_dcmplt>
 800af3a:	b148      	cbz	r0, 800af50 <_dtoa_r+0x190>
 800af3c:	4658      	mov	r0, fp
 800af3e:	f7f5 faf1 	bl	8000524 <__aeabi_i2d>
 800af42:	4632      	mov	r2, r6
 800af44:	463b      	mov	r3, r7
 800af46:	f7f5 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4a:	b908      	cbnz	r0, 800af50 <_dtoa_r+0x190>
 800af4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af50:	f1bb 0f16 	cmp.w	fp, #22
 800af54:	d857      	bhi.n	800b006 <_dtoa_r+0x246>
 800af56:	4b5b      	ldr	r3, [pc, #364]	; (800b0c4 <_dtoa_r+0x304>)
 800af58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	ec51 0b18 	vmov	r0, r1, d8
 800af64:	f7f5 fdba 	bl	8000adc <__aeabi_dcmplt>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d04e      	beq.n	800b00a <_dtoa_r+0x24a>
 800af6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af70:	2300      	movs	r3, #0
 800af72:	930c      	str	r3, [sp, #48]	; 0x30
 800af74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af76:	1b5b      	subs	r3, r3, r5
 800af78:	1e5a      	subs	r2, r3, #1
 800af7a:	bf45      	ittet	mi
 800af7c:	f1c3 0301 	rsbmi	r3, r3, #1
 800af80:	9305      	strmi	r3, [sp, #20]
 800af82:	2300      	movpl	r3, #0
 800af84:	2300      	movmi	r3, #0
 800af86:	9206      	str	r2, [sp, #24]
 800af88:	bf54      	ite	pl
 800af8a:	9305      	strpl	r3, [sp, #20]
 800af8c:	9306      	strmi	r3, [sp, #24]
 800af8e:	f1bb 0f00 	cmp.w	fp, #0
 800af92:	db3c      	blt.n	800b00e <_dtoa_r+0x24e>
 800af94:	9b06      	ldr	r3, [sp, #24]
 800af96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af9a:	445b      	add	r3, fp
 800af9c:	9306      	str	r3, [sp, #24]
 800af9e:	2300      	movs	r3, #0
 800afa0:	9308      	str	r3, [sp, #32]
 800afa2:	9b07      	ldr	r3, [sp, #28]
 800afa4:	2b09      	cmp	r3, #9
 800afa6:	d868      	bhi.n	800b07a <_dtoa_r+0x2ba>
 800afa8:	2b05      	cmp	r3, #5
 800afaa:	bfc4      	itt	gt
 800afac:	3b04      	subgt	r3, #4
 800afae:	9307      	strgt	r3, [sp, #28]
 800afb0:	9b07      	ldr	r3, [sp, #28]
 800afb2:	f1a3 0302 	sub.w	r3, r3, #2
 800afb6:	bfcc      	ite	gt
 800afb8:	2500      	movgt	r5, #0
 800afba:	2501      	movle	r5, #1
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	f200 8085 	bhi.w	800b0cc <_dtoa_r+0x30c>
 800afc2:	e8df f003 	tbb	[pc, r3]
 800afc6:	3b2e      	.short	0x3b2e
 800afc8:	5839      	.short	0x5839
 800afca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afce:	441d      	add	r5, r3
 800afd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	bfc1      	itttt	gt
 800afd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afdc:	fa08 f803 	lslgt.w	r8, r8, r3
 800afe0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800afe4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800afe8:	bfd6      	itet	le
 800afea:	f1c3 0320 	rsble	r3, r3, #32
 800afee:	ea48 0003 	orrgt.w	r0, r8, r3
 800aff2:	fa06 f003 	lslle.w	r0, r6, r3
 800aff6:	f7f5 fa85 	bl	8000504 <__aeabi_ui2d>
 800affa:	2201      	movs	r2, #1
 800affc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b000:	3d01      	subs	r5, #1
 800b002:	920e      	str	r2, [sp, #56]	; 0x38
 800b004:	e76f      	b.n	800aee6 <_dtoa_r+0x126>
 800b006:	2301      	movs	r3, #1
 800b008:	e7b3      	b.n	800af72 <_dtoa_r+0x1b2>
 800b00a:	900c      	str	r0, [sp, #48]	; 0x30
 800b00c:	e7b2      	b.n	800af74 <_dtoa_r+0x1b4>
 800b00e:	9b05      	ldr	r3, [sp, #20]
 800b010:	eba3 030b 	sub.w	r3, r3, fp
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	f1cb 0300 	rsb	r3, fp, #0
 800b01a:	9308      	str	r3, [sp, #32]
 800b01c:	2300      	movs	r3, #0
 800b01e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b020:	e7bf      	b.n	800afa2 <_dtoa_r+0x1e2>
 800b022:	2300      	movs	r3, #0
 800b024:	9309      	str	r3, [sp, #36]	; 0x24
 800b026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dc52      	bgt.n	800b0d2 <_dtoa_r+0x312>
 800b02c:	2301      	movs	r3, #1
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	461a      	mov	r2, r3
 800b034:	920a      	str	r2, [sp, #40]	; 0x28
 800b036:	e00b      	b.n	800b050 <_dtoa_r+0x290>
 800b038:	2301      	movs	r3, #1
 800b03a:	e7f3      	b.n	800b024 <_dtoa_r+0x264>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b042:	445b      	add	r3, fp
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	3301      	adds	r3, #1
 800b048:	2b01      	cmp	r3, #1
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	bfb8      	it	lt
 800b04e:	2301      	movlt	r3, #1
 800b050:	69e0      	ldr	r0, [r4, #28]
 800b052:	2100      	movs	r1, #0
 800b054:	2204      	movs	r2, #4
 800b056:	f102 0614 	add.w	r6, r2, #20
 800b05a:	429e      	cmp	r6, r3
 800b05c:	d93d      	bls.n	800b0da <_dtoa_r+0x31a>
 800b05e:	6041      	str	r1, [r0, #4]
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fceb 	bl	800ba3c <_Balloc>
 800b066:	9000      	str	r0, [sp, #0]
 800b068:	2800      	cmp	r0, #0
 800b06a:	d139      	bne.n	800b0e0 <_dtoa_r+0x320>
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <_dtoa_r+0x308>)
 800b06e:	4602      	mov	r2, r0
 800b070:	f240 11af 	movw	r1, #431	; 0x1af
 800b074:	e6bd      	b.n	800adf2 <_dtoa_r+0x32>
 800b076:	2301      	movs	r3, #1
 800b078:	e7e1      	b.n	800b03e <_dtoa_r+0x27e>
 800b07a:	2501      	movs	r5, #1
 800b07c:	2300      	movs	r3, #0
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	9509      	str	r5, [sp, #36]	; 0x24
 800b082:	f04f 33ff 	mov.w	r3, #4294967295
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	2200      	movs	r2, #0
 800b08c:	2312      	movs	r3, #18
 800b08e:	e7d1      	b.n	800b034 <_dtoa_r+0x274>
 800b090:	636f4361 	.word	0x636f4361
 800b094:	3fd287a7 	.word	0x3fd287a7
 800b098:	8b60c8b3 	.word	0x8b60c8b3
 800b09c:	3fc68a28 	.word	0x3fc68a28
 800b0a0:	509f79fb 	.word	0x509f79fb
 800b0a4:	3fd34413 	.word	0x3fd34413
 800b0a8:	0800c889 	.word	0x0800c889
 800b0ac:	0800c8a0 	.word	0x0800c8a0
 800b0b0:	7ff00000 	.word	0x7ff00000
 800b0b4:	0800c885 	.word	0x0800c885
 800b0b8:	0800c87c 	.word	0x0800c87c
 800b0bc:	0800c859 	.word	0x0800c859
 800b0c0:	3ff80000 	.word	0x3ff80000
 800b0c4:	0800c990 	.word	0x0800c990
 800b0c8:	0800c8f8 	.word	0x0800c8f8
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d0:	e7d7      	b.n	800b082 <_dtoa_r+0x2c2>
 800b0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	e7ba      	b.n	800b050 <_dtoa_r+0x290>
 800b0da:	3101      	adds	r1, #1
 800b0dc:	0052      	lsls	r2, r2, #1
 800b0de:	e7ba      	b.n	800b056 <_dtoa_r+0x296>
 800b0e0:	69e3      	ldr	r3, [r4, #28]
 800b0e2:	9a00      	ldr	r2, [sp, #0]
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	2b0e      	cmp	r3, #14
 800b0ea:	f200 80a8 	bhi.w	800b23e <_dtoa_r+0x47e>
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	f000 80a5 	beq.w	800b23e <_dtoa_r+0x47e>
 800b0f4:	f1bb 0f00 	cmp.w	fp, #0
 800b0f8:	dd38      	ble.n	800b16c <_dtoa_r+0x3ac>
 800b0fa:	4bc0      	ldr	r3, [pc, #768]	; (800b3fc <_dtoa_r+0x63c>)
 800b0fc:	f00b 020f 	and.w	r2, fp, #15
 800b100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b104:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b108:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b10c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b110:	d019      	beq.n	800b146 <_dtoa_r+0x386>
 800b112:	4bbb      	ldr	r3, [pc, #748]	; (800b400 <_dtoa_r+0x640>)
 800b114:	ec51 0b18 	vmov	r0, r1, d8
 800b118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b11c:	f7f5 fb96 	bl	800084c <__aeabi_ddiv>
 800b120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b124:	f008 080f 	and.w	r8, r8, #15
 800b128:	2503      	movs	r5, #3
 800b12a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b400 <_dtoa_r+0x640>
 800b12e:	f1b8 0f00 	cmp.w	r8, #0
 800b132:	d10a      	bne.n	800b14a <_dtoa_r+0x38a>
 800b134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b138:	4632      	mov	r2, r6
 800b13a:	463b      	mov	r3, r7
 800b13c:	f7f5 fb86 	bl	800084c <__aeabi_ddiv>
 800b140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b144:	e02b      	b.n	800b19e <_dtoa_r+0x3de>
 800b146:	2502      	movs	r5, #2
 800b148:	e7ef      	b.n	800b12a <_dtoa_r+0x36a>
 800b14a:	f018 0f01 	tst.w	r8, #1
 800b14e:	d008      	beq.n	800b162 <_dtoa_r+0x3a2>
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	3501      	adds	r5, #1
 800b15e:	4606      	mov	r6, r0
 800b160:	460f      	mov	r7, r1
 800b162:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b166:	f109 0908 	add.w	r9, r9, #8
 800b16a:	e7e0      	b.n	800b12e <_dtoa_r+0x36e>
 800b16c:	f000 809f 	beq.w	800b2ae <_dtoa_r+0x4ee>
 800b170:	f1cb 0600 	rsb	r6, fp, #0
 800b174:	4ba1      	ldr	r3, [pc, #644]	; (800b3fc <_dtoa_r+0x63c>)
 800b176:	4fa2      	ldr	r7, [pc, #648]	; (800b400 <_dtoa_r+0x640>)
 800b178:	f006 020f 	and.w	r2, r6, #15
 800b17c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	ec51 0b18 	vmov	r0, r1, d8
 800b188:	f7f5 fa36 	bl	80005f8 <__aeabi_dmul>
 800b18c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b190:	1136      	asrs	r6, r6, #4
 800b192:	2300      	movs	r3, #0
 800b194:	2502      	movs	r5, #2
 800b196:	2e00      	cmp	r6, #0
 800b198:	d17e      	bne.n	800b298 <_dtoa_r+0x4d8>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1d0      	bne.n	800b140 <_dtoa_r+0x380>
 800b19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8084 	beq.w	800b2b2 <_dtoa_r+0x4f2>
 800b1aa:	4b96      	ldr	r3, [pc, #600]	; (800b404 <_dtoa_r+0x644>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 fc93 	bl	8000adc <__aeabi_dcmplt>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d07b      	beq.n	800b2b2 <_dtoa_r+0x4f2>
 800b1ba:	9b04      	ldr	r3, [sp, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d078      	beq.n	800b2b2 <_dtoa_r+0x4f2>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dd39      	ble.n	800b23a <_dtoa_r+0x47a>
 800b1c6:	4b90      	ldr	r3, [pc, #576]	; (800b408 <_dtoa_r+0x648>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	f7f5 fa13 	bl	80005f8 <__aeabi_dmul>
 800b1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1d6:	9e01      	ldr	r6, [sp, #4]
 800b1d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b1dc:	3501      	adds	r5, #1
 800b1de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7f5 f99e 	bl	8000524 <__aeabi_i2d>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	4b86      	ldr	r3, [pc, #536]	; (800b40c <_dtoa_r+0x64c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f7f5 f84a 	bl	800028c <__adddf3>
 800b1f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	2e00      	cmp	r6, #0
 800b204:	d158      	bne.n	800b2b8 <_dtoa_r+0x4f8>
 800b206:	4b82      	ldr	r3, [pc, #520]	; (800b410 <_dtoa_r+0x650>)
 800b208:	2200      	movs	r2, #0
 800b20a:	4640      	mov	r0, r8
 800b20c:	4649      	mov	r1, r9
 800b20e:	f7f5 f83b 	bl	8000288 <__aeabi_dsub>
 800b212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b216:	4680      	mov	r8, r0
 800b218:	4689      	mov	r9, r1
 800b21a:	f7f5 fc7d 	bl	8000b18 <__aeabi_dcmpgt>
 800b21e:	2800      	cmp	r0, #0
 800b220:	f040 8296 	bne.w	800b750 <_dtoa_r+0x990>
 800b224:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b228:	4640      	mov	r0, r8
 800b22a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b22e:	4649      	mov	r1, r9
 800b230:	f7f5 fc54 	bl	8000adc <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	f040 8289 	bne.w	800b74c <_dtoa_r+0x98c>
 800b23a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b240:	2b00      	cmp	r3, #0
 800b242:	f2c0 814e 	blt.w	800b4e2 <_dtoa_r+0x722>
 800b246:	f1bb 0f0e 	cmp.w	fp, #14
 800b24a:	f300 814a 	bgt.w	800b4e2 <_dtoa_r+0x722>
 800b24e:	4b6b      	ldr	r3, [pc, #428]	; (800b3fc <_dtoa_r+0x63c>)
 800b250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b254:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f280 80dc 	bge.w	800b418 <_dtoa_r+0x658>
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f300 80d8 	bgt.w	800b418 <_dtoa_r+0x658>
 800b268:	f040 826f 	bne.w	800b74a <_dtoa_r+0x98a>
 800b26c:	4b68      	ldr	r3, [pc, #416]	; (800b410 <_dtoa_r+0x650>)
 800b26e:	2200      	movs	r2, #0
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	f7f5 f9c0 	bl	80005f8 <__aeabi_dmul>
 800b278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b27c:	f7f5 fc42 	bl	8000b04 <__aeabi_dcmpge>
 800b280:	9e04      	ldr	r6, [sp, #16]
 800b282:	4637      	mov	r7, r6
 800b284:	2800      	cmp	r0, #0
 800b286:	f040 8245 	bne.w	800b714 <_dtoa_r+0x954>
 800b28a:	9d00      	ldr	r5, [sp, #0]
 800b28c:	2331      	movs	r3, #49	; 0x31
 800b28e:	f805 3b01 	strb.w	r3, [r5], #1
 800b292:	f10b 0b01 	add.w	fp, fp, #1
 800b296:	e241      	b.n	800b71c <_dtoa_r+0x95c>
 800b298:	07f2      	lsls	r2, r6, #31
 800b29a:	d505      	bpl.n	800b2a8 <_dtoa_r+0x4e8>
 800b29c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a0:	f7f5 f9aa 	bl	80005f8 <__aeabi_dmul>
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	1076      	asrs	r6, r6, #1
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	e773      	b.n	800b196 <_dtoa_r+0x3d6>
 800b2ae:	2502      	movs	r5, #2
 800b2b0:	e775      	b.n	800b19e <_dtoa_r+0x3de>
 800b2b2:	9e04      	ldr	r6, [sp, #16]
 800b2b4:	465f      	mov	r7, fp
 800b2b6:	e792      	b.n	800b1de <_dtoa_r+0x41e>
 800b2b8:	9900      	ldr	r1, [sp, #0]
 800b2ba:	4b50      	ldr	r3, [pc, #320]	; (800b3fc <_dtoa_r+0x63c>)
 800b2bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2c0:	4431      	add	r1, r6
 800b2c2:	9102      	str	r1, [sp, #8]
 800b2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c6:	eeb0 9a47 	vmov.f32	s18, s14
 800b2ca:	eef0 9a67 	vmov.f32	s19, s15
 800b2ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d044      	beq.n	800b364 <_dtoa_r+0x5a4>
 800b2da:	494e      	ldr	r1, [pc, #312]	; (800b414 <_dtoa_r+0x654>)
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f7f5 fab5 	bl	800084c <__aeabi_ddiv>
 800b2e2:	ec53 2b19 	vmov	r2, r3, d9
 800b2e6:	f7f4 ffcf 	bl	8000288 <__aeabi_dsub>
 800b2ea:	9d00      	ldr	r5, [sp, #0]
 800b2ec:	ec41 0b19 	vmov	d9, r0, r1
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	f7f5 fc30 	bl	8000b58 <__aeabi_d2iz>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	f7f5 f913 	bl	8000524 <__aeabi_i2d>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4640      	mov	r0, r8
 800b304:	4649      	mov	r1, r9
 800b306:	f7f4 ffbf 	bl	8000288 <__aeabi_dsub>
 800b30a:	3630      	adds	r6, #48	; 0x30
 800b30c:	f805 6b01 	strb.w	r6, [r5], #1
 800b310:	ec53 2b19 	vmov	r2, r3, d9
 800b314:	4680      	mov	r8, r0
 800b316:	4689      	mov	r9, r1
 800b318:	f7f5 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d164      	bne.n	800b3ea <_dtoa_r+0x62a>
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	4937      	ldr	r1, [pc, #220]	; (800b404 <_dtoa_r+0x644>)
 800b326:	2000      	movs	r0, #0
 800b328:	f7f4 ffae 	bl	8000288 <__aeabi_dsub>
 800b32c:	ec53 2b19 	vmov	r2, r3, d9
 800b330:	f7f5 fbd4 	bl	8000adc <__aeabi_dcmplt>
 800b334:	2800      	cmp	r0, #0
 800b336:	f040 80b6 	bne.w	800b4a6 <_dtoa_r+0x6e6>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	429d      	cmp	r5, r3
 800b33e:	f43f af7c 	beq.w	800b23a <_dtoa_r+0x47a>
 800b342:	4b31      	ldr	r3, [pc, #196]	; (800b408 <_dtoa_r+0x648>)
 800b344:	ec51 0b19 	vmov	r0, r1, d9
 800b348:	2200      	movs	r2, #0
 800b34a:	f7f5 f955 	bl	80005f8 <__aeabi_dmul>
 800b34e:	4b2e      	ldr	r3, [pc, #184]	; (800b408 <_dtoa_r+0x648>)
 800b350:	ec41 0b19 	vmov	d9, r0, r1
 800b354:	2200      	movs	r2, #0
 800b356:	4640      	mov	r0, r8
 800b358:	4649      	mov	r1, r9
 800b35a:	f7f5 f94d 	bl	80005f8 <__aeabi_dmul>
 800b35e:	4680      	mov	r8, r0
 800b360:	4689      	mov	r9, r1
 800b362:	e7c5      	b.n	800b2f0 <_dtoa_r+0x530>
 800b364:	ec51 0b17 	vmov	r0, r1, d7
 800b368:	f7f5 f946 	bl	80005f8 <__aeabi_dmul>
 800b36c:	9b02      	ldr	r3, [sp, #8]
 800b36e:	9d00      	ldr	r5, [sp, #0]
 800b370:	930f      	str	r3, [sp, #60]	; 0x3c
 800b372:	ec41 0b19 	vmov	d9, r0, r1
 800b376:	4649      	mov	r1, r9
 800b378:	4640      	mov	r0, r8
 800b37a:	f7f5 fbed 	bl	8000b58 <__aeabi_d2iz>
 800b37e:	4606      	mov	r6, r0
 800b380:	f7f5 f8d0 	bl	8000524 <__aeabi_i2d>
 800b384:	3630      	adds	r6, #48	; 0x30
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4640      	mov	r0, r8
 800b38c:	4649      	mov	r1, r9
 800b38e:	f7f4 ff7b 	bl	8000288 <__aeabi_dsub>
 800b392:	f805 6b01 	strb.w	r6, [r5], #1
 800b396:	9b02      	ldr	r3, [sp, #8]
 800b398:	429d      	cmp	r5, r3
 800b39a:	4680      	mov	r8, r0
 800b39c:	4689      	mov	r9, r1
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	d124      	bne.n	800b3ee <_dtoa_r+0x62e>
 800b3a4:	4b1b      	ldr	r3, [pc, #108]	; (800b414 <_dtoa_r+0x654>)
 800b3a6:	ec51 0b19 	vmov	r0, r1, d9
 800b3aa:	f7f4 ff6f 	bl	800028c <__adddf3>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f7f5 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d173      	bne.n	800b4a6 <_dtoa_r+0x6e6>
 800b3be:	ec53 2b19 	vmov	r2, r3, d9
 800b3c2:	4914      	ldr	r1, [pc, #80]	; (800b414 <_dtoa_r+0x654>)
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f7f4 ff5f 	bl	8000288 <__aeabi_dsub>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	f7f5 fb83 	bl	8000adc <__aeabi_dcmplt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f af2f 	beq.w	800b23a <_dtoa_r+0x47a>
 800b3dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3de:	1e6b      	subs	r3, r5, #1
 800b3e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3e6:	2b30      	cmp	r3, #48	; 0x30
 800b3e8:	d0f8      	beq.n	800b3dc <_dtoa_r+0x61c>
 800b3ea:	46bb      	mov	fp, r7
 800b3ec:	e04a      	b.n	800b484 <_dtoa_r+0x6c4>
 800b3ee:	4b06      	ldr	r3, [pc, #24]	; (800b408 <_dtoa_r+0x648>)
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	e7bd      	b.n	800b376 <_dtoa_r+0x5b6>
 800b3fa:	bf00      	nop
 800b3fc:	0800c990 	.word	0x0800c990
 800b400:	0800c968 	.word	0x0800c968
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	40240000 	.word	0x40240000
 800b40c:	401c0000 	.word	0x401c0000
 800b410:	40140000 	.word	0x40140000
 800b414:	3fe00000 	.word	0x3fe00000
 800b418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b41c:	9d00      	ldr	r5, [sp, #0]
 800b41e:	4642      	mov	r2, r8
 800b420:	464b      	mov	r3, r9
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 fa11 	bl	800084c <__aeabi_ddiv>
 800b42a:	f7f5 fb95 	bl	8000b58 <__aeabi_d2iz>
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	f7f5 f878 	bl	8000524 <__aeabi_i2d>
 800b434:	4642      	mov	r2, r8
 800b436:	464b      	mov	r3, r9
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f4 ff20 	bl	8000288 <__aeabi_dsub>
 800b448:	9e01      	ldr	r6, [sp, #4]
 800b44a:	9f04      	ldr	r7, [sp, #16]
 800b44c:	3630      	adds	r6, #48	; 0x30
 800b44e:	f805 6b01 	strb.w	r6, [r5], #1
 800b452:	9e00      	ldr	r6, [sp, #0]
 800b454:	1bae      	subs	r6, r5, r6
 800b456:	42b7      	cmp	r7, r6
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	d134      	bne.n	800b4c8 <_dtoa_r+0x708>
 800b45e:	f7f4 ff15 	bl	800028c <__adddf3>
 800b462:	4642      	mov	r2, r8
 800b464:	464b      	mov	r3, r9
 800b466:	4606      	mov	r6, r0
 800b468:	460f      	mov	r7, r1
 800b46a:	f7f5 fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800b46e:	b9c8      	cbnz	r0, 800b4a4 <_dtoa_r+0x6e4>
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	4630      	mov	r0, r6
 800b476:	4639      	mov	r1, r7
 800b478:	f7f5 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800b47c:	b110      	cbz	r0, 800b484 <_dtoa_r+0x6c4>
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	07db      	lsls	r3, r3, #31
 800b482:	d40f      	bmi.n	800b4a4 <_dtoa_r+0x6e4>
 800b484:	4651      	mov	r1, sl
 800b486:	4620      	mov	r0, r4
 800b488:	f000 fb18 	bl	800babc <_Bfree>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b490:	702b      	strb	r3, [r5, #0]
 800b492:	f10b 0301 	add.w	r3, fp, #1
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f43f ace2 	beq.w	800ae64 <_dtoa_r+0xa4>
 800b4a0:	601d      	str	r5, [r3, #0]
 800b4a2:	e4df      	b.n	800ae64 <_dtoa_r+0xa4>
 800b4a4:	465f      	mov	r7, fp
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	461d      	mov	r5, r3
 800b4aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ae:	2a39      	cmp	r2, #57	; 0x39
 800b4b0:	d106      	bne.n	800b4c0 <_dtoa_r+0x700>
 800b4b2:	9a00      	ldr	r2, [sp, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d1f7      	bne.n	800b4a8 <_dtoa_r+0x6e8>
 800b4b8:	9900      	ldr	r1, [sp, #0]
 800b4ba:	2230      	movs	r2, #48	; 0x30
 800b4bc:	3701      	adds	r7, #1
 800b4be:	700a      	strb	r2, [r1, #0]
 800b4c0:	781a      	ldrb	r2, [r3, #0]
 800b4c2:	3201      	adds	r2, #1
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	e790      	b.n	800b3ea <_dtoa_r+0x62a>
 800b4c8:	4ba3      	ldr	r3, [pc, #652]	; (800b758 <_dtoa_r+0x998>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f7f5 f894 	bl	80005f8 <__aeabi_dmul>
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	f7f5 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d09e      	beq.n	800b41e <_dtoa_r+0x65e>
 800b4e0:	e7d0      	b.n	800b484 <_dtoa_r+0x6c4>
 800b4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	f000 80ca 	beq.w	800b67e <_dtoa_r+0x8be>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	2a01      	cmp	r2, #1
 800b4ee:	f300 80ad 	bgt.w	800b64c <_dtoa_r+0x88c>
 800b4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	f000 80a5 	beq.w	800b644 <_dtoa_r+0x884>
 800b4fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4fe:	9e08      	ldr	r6, [sp, #32]
 800b500:	9d05      	ldr	r5, [sp, #20]
 800b502:	9a05      	ldr	r2, [sp, #20]
 800b504:	441a      	add	r2, r3
 800b506:	9205      	str	r2, [sp, #20]
 800b508:	9a06      	ldr	r2, [sp, #24]
 800b50a:	2101      	movs	r1, #1
 800b50c:	441a      	add	r2, r3
 800b50e:	4620      	mov	r0, r4
 800b510:	9206      	str	r2, [sp, #24]
 800b512:	f000 fb89 	bl	800bc28 <__i2b>
 800b516:	4607      	mov	r7, r0
 800b518:	b165      	cbz	r5, 800b534 <_dtoa_r+0x774>
 800b51a:	9b06      	ldr	r3, [sp, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	dd09      	ble.n	800b534 <_dtoa_r+0x774>
 800b520:	42ab      	cmp	r3, r5
 800b522:	9a05      	ldr	r2, [sp, #20]
 800b524:	bfa8      	it	ge
 800b526:	462b      	movge	r3, r5
 800b528:	1ad2      	subs	r2, r2, r3
 800b52a:	9205      	str	r2, [sp, #20]
 800b52c:	9a06      	ldr	r2, [sp, #24]
 800b52e:	1aed      	subs	r5, r5, r3
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	9306      	str	r3, [sp, #24]
 800b534:	9b08      	ldr	r3, [sp, #32]
 800b536:	b1f3      	cbz	r3, 800b576 <_dtoa_r+0x7b6>
 800b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 80a3 	beq.w	800b686 <_dtoa_r+0x8c6>
 800b540:	2e00      	cmp	r6, #0
 800b542:	dd10      	ble.n	800b566 <_dtoa_r+0x7a6>
 800b544:	4639      	mov	r1, r7
 800b546:	4632      	mov	r2, r6
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 fc2d 	bl	800bda8 <__pow5mult>
 800b54e:	4652      	mov	r2, sl
 800b550:	4601      	mov	r1, r0
 800b552:	4607      	mov	r7, r0
 800b554:	4620      	mov	r0, r4
 800b556:	f000 fb7d 	bl	800bc54 <__multiply>
 800b55a:	4651      	mov	r1, sl
 800b55c:	4680      	mov	r8, r0
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 faac 	bl	800babc <_Bfree>
 800b564:	46c2      	mov	sl, r8
 800b566:	9b08      	ldr	r3, [sp, #32]
 800b568:	1b9a      	subs	r2, r3, r6
 800b56a:	d004      	beq.n	800b576 <_dtoa_r+0x7b6>
 800b56c:	4651      	mov	r1, sl
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fc1a 	bl	800bda8 <__pow5mult>
 800b574:	4682      	mov	sl, r0
 800b576:	2101      	movs	r1, #1
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fb55 	bl	800bc28 <__i2b>
 800b57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b580:	2b00      	cmp	r3, #0
 800b582:	4606      	mov	r6, r0
 800b584:	f340 8081 	ble.w	800b68a <_dtoa_r+0x8ca>
 800b588:	461a      	mov	r2, r3
 800b58a:	4601      	mov	r1, r0
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 fc0b 	bl	800bda8 <__pow5mult>
 800b592:	9b07      	ldr	r3, [sp, #28]
 800b594:	2b01      	cmp	r3, #1
 800b596:	4606      	mov	r6, r0
 800b598:	dd7a      	ble.n	800b690 <_dtoa_r+0x8d0>
 800b59a:	f04f 0800 	mov.w	r8, #0
 800b59e:	6933      	ldr	r3, [r6, #16]
 800b5a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5a4:	6918      	ldr	r0, [r3, #16]
 800b5a6:	f000 faf1 	bl	800bb8c <__hi0bits>
 800b5aa:	f1c0 0020 	rsb	r0, r0, #32
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	4418      	add	r0, r3
 800b5b2:	f010 001f 	ands.w	r0, r0, #31
 800b5b6:	f000 8094 	beq.w	800b6e2 <_dtoa_r+0x922>
 800b5ba:	f1c0 0320 	rsb	r3, r0, #32
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	f340 8085 	ble.w	800b6ce <_dtoa_r+0x90e>
 800b5c4:	9b05      	ldr	r3, [sp, #20]
 800b5c6:	f1c0 001c 	rsb	r0, r0, #28
 800b5ca:	4403      	add	r3, r0
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	9b06      	ldr	r3, [sp, #24]
 800b5d0:	4403      	add	r3, r0
 800b5d2:	4405      	add	r5, r0
 800b5d4:	9306      	str	r3, [sp, #24]
 800b5d6:	9b05      	ldr	r3, [sp, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dd05      	ble.n	800b5e8 <_dtoa_r+0x828>
 800b5dc:	4651      	mov	r1, sl
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fc3b 	bl	800be5c <__lshift>
 800b5e6:	4682      	mov	sl, r0
 800b5e8:	9b06      	ldr	r3, [sp, #24]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dd05      	ble.n	800b5fa <_dtoa_r+0x83a>
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 fc32 	bl	800be5c <__lshift>
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d072      	beq.n	800b6e6 <_dtoa_r+0x926>
 800b600:	4631      	mov	r1, r6
 800b602:	4650      	mov	r0, sl
 800b604:	f000 fc96 	bl	800bf34 <__mcmp>
 800b608:	2800      	cmp	r0, #0
 800b60a:	da6c      	bge.n	800b6e6 <_dtoa_r+0x926>
 800b60c:	2300      	movs	r3, #0
 800b60e:	4651      	mov	r1, sl
 800b610:	220a      	movs	r2, #10
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fa74 	bl	800bb00 <__multadd>
 800b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b61e:	4682      	mov	sl, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 81b0 	beq.w	800b986 <_dtoa_r+0xbc6>
 800b626:	2300      	movs	r3, #0
 800b628:	4639      	mov	r1, r7
 800b62a:	220a      	movs	r2, #10
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 fa67 	bl	800bb00 <__multadd>
 800b632:	9b01      	ldr	r3, [sp, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	4607      	mov	r7, r0
 800b638:	f300 8096 	bgt.w	800b768 <_dtoa_r+0x9a8>
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	dc59      	bgt.n	800b6f6 <_dtoa_r+0x936>
 800b642:	e091      	b.n	800b768 <_dtoa_r+0x9a8>
 800b644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b64a:	e758      	b.n	800b4fe <_dtoa_r+0x73e>
 800b64c:	9b04      	ldr	r3, [sp, #16]
 800b64e:	1e5e      	subs	r6, r3, #1
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	42b3      	cmp	r3, r6
 800b654:	bfbf      	itttt	lt
 800b656:	9b08      	ldrlt	r3, [sp, #32]
 800b658:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b65a:	9608      	strlt	r6, [sp, #32]
 800b65c:	1af3      	sublt	r3, r6, r3
 800b65e:	bfb4      	ite	lt
 800b660:	18d2      	addlt	r2, r2, r3
 800b662:	1b9e      	subge	r6, r3, r6
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	bfbc      	itt	lt
 800b668:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b66a:	2600      	movlt	r6, #0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfb7      	itett	lt
 800b670:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b674:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b678:	1a9d      	sublt	r5, r3, r2
 800b67a:	2300      	movlt	r3, #0
 800b67c:	e741      	b.n	800b502 <_dtoa_r+0x742>
 800b67e:	9e08      	ldr	r6, [sp, #32]
 800b680:	9d05      	ldr	r5, [sp, #20]
 800b682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b684:	e748      	b.n	800b518 <_dtoa_r+0x758>
 800b686:	9a08      	ldr	r2, [sp, #32]
 800b688:	e770      	b.n	800b56c <_dtoa_r+0x7ac>
 800b68a:	9b07      	ldr	r3, [sp, #28]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	dc19      	bgt.n	800b6c4 <_dtoa_r+0x904>
 800b690:	9b02      	ldr	r3, [sp, #8]
 800b692:	b9bb      	cbnz	r3, 800b6c4 <_dtoa_r+0x904>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b69a:	b99b      	cbnz	r3, 800b6c4 <_dtoa_r+0x904>
 800b69c:	9b03      	ldr	r3, [sp, #12]
 800b69e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6a2:	0d1b      	lsrs	r3, r3, #20
 800b6a4:	051b      	lsls	r3, r3, #20
 800b6a6:	b183      	cbz	r3, 800b6ca <_dtoa_r+0x90a>
 800b6a8:	9b05      	ldr	r3, [sp, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9306      	str	r3, [sp, #24]
 800b6b4:	f04f 0801 	mov.w	r8, #1
 800b6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f47f af6f 	bne.w	800b59e <_dtoa_r+0x7de>
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	e774      	b.n	800b5ae <_dtoa_r+0x7ee>
 800b6c4:	f04f 0800 	mov.w	r8, #0
 800b6c8:	e7f6      	b.n	800b6b8 <_dtoa_r+0x8f8>
 800b6ca:	4698      	mov	r8, r3
 800b6cc:	e7f4      	b.n	800b6b8 <_dtoa_r+0x8f8>
 800b6ce:	d082      	beq.n	800b5d6 <_dtoa_r+0x816>
 800b6d0:	9a05      	ldr	r2, [sp, #20]
 800b6d2:	331c      	adds	r3, #28
 800b6d4:	441a      	add	r2, r3
 800b6d6:	9205      	str	r2, [sp, #20]
 800b6d8:	9a06      	ldr	r2, [sp, #24]
 800b6da:	441a      	add	r2, r3
 800b6dc:	441d      	add	r5, r3
 800b6de:	9206      	str	r2, [sp, #24]
 800b6e0:	e779      	b.n	800b5d6 <_dtoa_r+0x816>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	e7f4      	b.n	800b6d0 <_dtoa_r+0x910>
 800b6e6:	9b04      	ldr	r3, [sp, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dc37      	bgt.n	800b75c <_dtoa_r+0x99c>
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	dd34      	ble.n	800b75c <_dtoa_r+0x99c>
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	b963      	cbnz	r3, 800b714 <_dtoa_r+0x954>
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	2205      	movs	r2, #5
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 f9fe 	bl	800bb00 <__multadd>
 800b704:	4601      	mov	r1, r0
 800b706:	4606      	mov	r6, r0
 800b708:	4650      	mov	r0, sl
 800b70a:	f000 fc13 	bl	800bf34 <__mcmp>
 800b70e:	2800      	cmp	r0, #0
 800b710:	f73f adbb 	bgt.w	800b28a <_dtoa_r+0x4ca>
 800b714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b716:	9d00      	ldr	r5, [sp, #0]
 800b718:	ea6f 0b03 	mvn.w	fp, r3
 800b71c:	f04f 0800 	mov.w	r8, #0
 800b720:	4631      	mov	r1, r6
 800b722:	4620      	mov	r0, r4
 800b724:	f000 f9ca 	bl	800babc <_Bfree>
 800b728:	2f00      	cmp	r7, #0
 800b72a:	f43f aeab 	beq.w	800b484 <_dtoa_r+0x6c4>
 800b72e:	f1b8 0f00 	cmp.w	r8, #0
 800b732:	d005      	beq.n	800b740 <_dtoa_r+0x980>
 800b734:	45b8      	cmp	r8, r7
 800b736:	d003      	beq.n	800b740 <_dtoa_r+0x980>
 800b738:	4641      	mov	r1, r8
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f9be 	bl	800babc <_Bfree>
 800b740:	4639      	mov	r1, r7
 800b742:	4620      	mov	r0, r4
 800b744:	f000 f9ba 	bl	800babc <_Bfree>
 800b748:	e69c      	b.n	800b484 <_dtoa_r+0x6c4>
 800b74a:	2600      	movs	r6, #0
 800b74c:	4637      	mov	r7, r6
 800b74e:	e7e1      	b.n	800b714 <_dtoa_r+0x954>
 800b750:	46bb      	mov	fp, r7
 800b752:	4637      	mov	r7, r6
 800b754:	e599      	b.n	800b28a <_dtoa_r+0x4ca>
 800b756:	bf00      	nop
 800b758:	40240000 	.word	0x40240000
 800b75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 80c8 	beq.w	800b8f4 <_dtoa_r+0xb34>
 800b764:	9b04      	ldr	r3, [sp, #16]
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	2d00      	cmp	r5, #0
 800b76a:	dd05      	ble.n	800b778 <_dtoa_r+0x9b8>
 800b76c:	4639      	mov	r1, r7
 800b76e:	462a      	mov	r2, r5
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fb73 	bl	800be5c <__lshift>
 800b776:	4607      	mov	r7, r0
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	d05b      	beq.n	800b836 <_dtoa_r+0xa76>
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4620      	mov	r0, r4
 800b782:	f000 f95b 	bl	800ba3c <_Balloc>
 800b786:	4605      	mov	r5, r0
 800b788:	b928      	cbnz	r0, 800b796 <_dtoa_r+0x9d6>
 800b78a:	4b83      	ldr	r3, [pc, #524]	; (800b998 <_dtoa_r+0xbd8>)
 800b78c:	4602      	mov	r2, r0
 800b78e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b792:	f7ff bb2e 	b.w	800adf2 <_dtoa_r+0x32>
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	3202      	adds	r2, #2
 800b79a:	0092      	lsls	r2, r2, #2
 800b79c:	f107 010c 	add.w	r1, r7, #12
 800b7a0:	300c      	adds	r0, #12
 800b7a2:	f000 ff71 	bl	800c688 <memcpy>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 fb56 	bl	800be5c <__lshift>
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	9308      	str	r3, [sp, #32]
 800b7be:	9b02      	ldr	r3, [sp, #8]
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	46b8      	mov	r8, r7
 800b7c6:	9306      	str	r3, [sp, #24]
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	f7ff fa6a 	bl	800acac <quorem>
 800b7d8:	4641      	mov	r1, r8
 800b7da:	9002      	str	r0, [sp, #8]
 800b7dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	f000 fba7 	bl	800bf34 <__mcmp>
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	9005      	str	r0, [sp, #20]
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fbbd 	bl	800bf6c <__mdiff>
 800b7f2:	68c2      	ldr	r2, [r0, #12]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	bb02      	cbnz	r2, 800b83a <_dtoa_r+0xa7a>
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	f000 fb9a 	bl	800bf34 <__mcmp>
 800b800:	4602      	mov	r2, r0
 800b802:	4629      	mov	r1, r5
 800b804:	4620      	mov	r0, r4
 800b806:	9209      	str	r2, [sp, #36]	; 0x24
 800b808:	f000 f958 	bl	800babc <_Bfree>
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b810:	9d04      	ldr	r5, [sp, #16]
 800b812:	ea43 0102 	orr.w	r1, r3, r2
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	4319      	orrs	r1, r3
 800b81a:	d110      	bne.n	800b83e <_dtoa_r+0xa7e>
 800b81c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b820:	d029      	beq.n	800b876 <_dtoa_r+0xab6>
 800b822:	9b05      	ldr	r3, [sp, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd02      	ble.n	800b82e <_dtoa_r+0xa6e>
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	f883 9000 	strb.w	r9, [r3]
 800b834:	e774      	b.n	800b720 <_dtoa_r+0x960>
 800b836:	4638      	mov	r0, r7
 800b838:	e7ba      	b.n	800b7b0 <_dtoa_r+0x9f0>
 800b83a:	2201      	movs	r2, #1
 800b83c:	e7e1      	b.n	800b802 <_dtoa_r+0xa42>
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	db04      	blt.n	800b84e <_dtoa_r+0xa8e>
 800b844:	9907      	ldr	r1, [sp, #28]
 800b846:	430b      	orrs	r3, r1
 800b848:	9906      	ldr	r1, [sp, #24]
 800b84a:	430b      	orrs	r3, r1
 800b84c:	d120      	bne.n	800b890 <_dtoa_r+0xad0>
 800b84e:	2a00      	cmp	r2, #0
 800b850:	dded      	ble.n	800b82e <_dtoa_r+0xa6e>
 800b852:	4651      	mov	r1, sl
 800b854:	2201      	movs	r2, #1
 800b856:	4620      	mov	r0, r4
 800b858:	f000 fb00 	bl	800be5c <__lshift>
 800b85c:	4631      	mov	r1, r6
 800b85e:	4682      	mov	sl, r0
 800b860:	f000 fb68 	bl	800bf34 <__mcmp>
 800b864:	2800      	cmp	r0, #0
 800b866:	dc03      	bgt.n	800b870 <_dtoa_r+0xab0>
 800b868:	d1e1      	bne.n	800b82e <_dtoa_r+0xa6e>
 800b86a:	f019 0f01 	tst.w	r9, #1
 800b86e:	d0de      	beq.n	800b82e <_dtoa_r+0xa6e>
 800b870:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b874:	d1d8      	bne.n	800b828 <_dtoa_r+0xa68>
 800b876:	9a01      	ldr	r2, [sp, #4]
 800b878:	2339      	movs	r3, #57	; 0x39
 800b87a:	7013      	strb	r3, [r2, #0]
 800b87c:	462b      	mov	r3, r5
 800b87e:	461d      	mov	r5, r3
 800b880:	3b01      	subs	r3, #1
 800b882:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b886:	2a39      	cmp	r2, #57	; 0x39
 800b888:	d06c      	beq.n	800b964 <_dtoa_r+0xba4>
 800b88a:	3201      	adds	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	e747      	b.n	800b720 <_dtoa_r+0x960>
 800b890:	2a00      	cmp	r2, #0
 800b892:	dd07      	ble.n	800b8a4 <_dtoa_r+0xae4>
 800b894:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b898:	d0ed      	beq.n	800b876 <_dtoa_r+0xab6>
 800b89a:	9a01      	ldr	r2, [sp, #4]
 800b89c:	f109 0301 	add.w	r3, r9, #1
 800b8a0:	7013      	strb	r3, [r2, #0]
 800b8a2:	e73d      	b.n	800b720 <_dtoa_r+0x960>
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	9a08      	ldr	r2, [sp, #32]
 800b8a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d043      	beq.n	800b938 <_dtoa_r+0xb78>
 800b8b0:	4651      	mov	r1, sl
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	220a      	movs	r2, #10
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 f922 	bl	800bb00 <__multadd>
 800b8bc:	45b8      	cmp	r8, r7
 800b8be:	4682      	mov	sl, r0
 800b8c0:	f04f 0300 	mov.w	r3, #0
 800b8c4:	f04f 020a 	mov.w	r2, #10
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	d107      	bne.n	800b8de <_dtoa_r+0xb1e>
 800b8ce:	f000 f917 	bl	800bb00 <__multadd>
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	9b04      	ldr	r3, [sp, #16]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	e775      	b.n	800b7ca <_dtoa_r+0xa0a>
 800b8de:	f000 f90f 	bl	800bb00 <__multadd>
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	220a      	movs	r2, #10
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 f908 	bl	800bb00 <__multadd>
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	e7f0      	b.n	800b8d6 <_dtoa_r+0xb16>
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	9d00      	ldr	r5, [sp, #0]
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	f7ff f9d5 	bl	800acac <quorem>
 800b902:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	f805 9b01 	strb.w	r9, [r5], #1
 800b90c:	1aea      	subs	r2, r5, r3
 800b90e:	9b01      	ldr	r3, [sp, #4]
 800b910:	4293      	cmp	r3, r2
 800b912:	dd07      	ble.n	800b924 <_dtoa_r+0xb64>
 800b914:	4651      	mov	r1, sl
 800b916:	2300      	movs	r3, #0
 800b918:	220a      	movs	r2, #10
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 f8f0 	bl	800bb00 <__multadd>
 800b920:	4682      	mov	sl, r0
 800b922:	e7ea      	b.n	800b8fa <_dtoa_r+0xb3a>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	bfc8      	it	gt
 800b92a:	461d      	movgt	r5, r3
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	bfd8      	it	le
 800b930:	2501      	movle	r5, #1
 800b932:	441d      	add	r5, r3
 800b934:	f04f 0800 	mov.w	r8, #0
 800b938:	4651      	mov	r1, sl
 800b93a:	2201      	movs	r2, #1
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 fa8d 	bl	800be5c <__lshift>
 800b942:	4631      	mov	r1, r6
 800b944:	4682      	mov	sl, r0
 800b946:	f000 faf5 	bl	800bf34 <__mcmp>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	dc96      	bgt.n	800b87c <_dtoa_r+0xabc>
 800b94e:	d102      	bne.n	800b956 <_dtoa_r+0xb96>
 800b950:	f019 0f01 	tst.w	r9, #1
 800b954:	d192      	bne.n	800b87c <_dtoa_r+0xabc>
 800b956:	462b      	mov	r3, r5
 800b958:	461d      	mov	r5, r3
 800b95a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b95e:	2a30      	cmp	r2, #48	; 0x30
 800b960:	d0fa      	beq.n	800b958 <_dtoa_r+0xb98>
 800b962:	e6dd      	b.n	800b720 <_dtoa_r+0x960>
 800b964:	9a00      	ldr	r2, [sp, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d189      	bne.n	800b87e <_dtoa_r+0xabe>
 800b96a:	f10b 0b01 	add.w	fp, fp, #1
 800b96e:	2331      	movs	r3, #49	; 0x31
 800b970:	e796      	b.n	800b8a0 <_dtoa_r+0xae0>
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <_dtoa_r+0xbdc>)
 800b974:	f7ff ba99 	b.w	800aeaa <_dtoa_r+0xea>
 800b978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f47f aa6d 	bne.w	800ae5a <_dtoa_r+0x9a>
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <_dtoa_r+0xbe0>)
 800b982:	f7ff ba92 	b.w	800aeaa <_dtoa_r+0xea>
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	dcb5      	bgt.n	800b8f8 <_dtoa_r+0xb38>
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	2b02      	cmp	r3, #2
 800b990:	f73f aeb1 	bgt.w	800b6f6 <_dtoa_r+0x936>
 800b994:	e7b0      	b.n	800b8f8 <_dtoa_r+0xb38>
 800b996:	bf00      	nop
 800b998:	0800c8f8 	.word	0x0800c8f8
 800b99c:	0800c858 	.word	0x0800c858
 800b9a0:	0800c87c 	.word	0x0800c87c

0800b9a4 <_free_r>:
 800b9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d044      	beq.n	800ba34 <_free_r+0x90>
 800b9aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ae:	9001      	str	r0, [sp, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b9b6:	bfb8      	it	lt
 800b9b8:	18e4      	addlt	r4, r4, r3
 800b9ba:	f7fe fa79 	bl	8009eb0 <__malloc_lock>
 800b9be:	4a1e      	ldr	r2, [pc, #120]	; (800ba38 <_free_r+0x94>)
 800b9c0:	9801      	ldr	r0, [sp, #4]
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	b933      	cbnz	r3, 800b9d4 <_free_r+0x30>
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	6014      	str	r4, [r2, #0]
 800b9ca:	b003      	add	sp, #12
 800b9cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9d0:	f7fe ba74 	b.w	8009ebc <__malloc_unlock>
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	d908      	bls.n	800b9ea <_free_r+0x46>
 800b9d8:	6825      	ldr	r5, [r4, #0]
 800b9da:	1961      	adds	r1, r4, r5
 800b9dc:	428b      	cmp	r3, r1
 800b9de:	bf01      	itttt	eq
 800b9e0:	6819      	ldreq	r1, [r3, #0]
 800b9e2:	685b      	ldreq	r3, [r3, #4]
 800b9e4:	1949      	addeq	r1, r1, r5
 800b9e6:	6021      	streq	r1, [r4, #0]
 800b9e8:	e7ed      	b.n	800b9c6 <_free_r+0x22>
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	b10b      	cbz	r3, 800b9f4 <_free_r+0x50>
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	d9fa      	bls.n	800b9ea <_free_r+0x46>
 800b9f4:	6811      	ldr	r1, [r2, #0]
 800b9f6:	1855      	adds	r5, r2, r1
 800b9f8:	42a5      	cmp	r5, r4
 800b9fa:	d10b      	bne.n	800ba14 <_free_r+0x70>
 800b9fc:	6824      	ldr	r4, [r4, #0]
 800b9fe:	4421      	add	r1, r4
 800ba00:	1854      	adds	r4, r2, r1
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	6011      	str	r1, [r2, #0]
 800ba06:	d1e0      	bne.n	800b9ca <_free_r+0x26>
 800ba08:	681c      	ldr	r4, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	6053      	str	r3, [r2, #4]
 800ba0e:	440c      	add	r4, r1
 800ba10:	6014      	str	r4, [r2, #0]
 800ba12:	e7da      	b.n	800b9ca <_free_r+0x26>
 800ba14:	d902      	bls.n	800ba1c <_free_r+0x78>
 800ba16:	230c      	movs	r3, #12
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	e7d6      	b.n	800b9ca <_free_r+0x26>
 800ba1c:	6825      	ldr	r5, [r4, #0]
 800ba1e:	1961      	adds	r1, r4, r5
 800ba20:	428b      	cmp	r3, r1
 800ba22:	bf04      	itt	eq
 800ba24:	6819      	ldreq	r1, [r3, #0]
 800ba26:	685b      	ldreq	r3, [r3, #4]
 800ba28:	6063      	str	r3, [r4, #4]
 800ba2a:	bf04      	itt	eq
 800ba2c:	1949      	addeq	r1, r1, r5
 800ba2e:	6021      	streq	r1, [r4, #0]
 800ba30:	6054      	str	r4, [r2, #4]
 800ba32:	e7ca      	b.n	800b9ca <_free_r+0x26>
 800ba34:	b003      	add	sp, #12
 800ba36:	bd30      	pop	{r4, r5, pc}
 800ba38:	20001644 	.word	0x20001644

0800ba3c <_Balloc>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	69c6      	ldr	r6, [r0, #28]
 800ba40:	4604      	mov	r4, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	b976      	cbnz	r6, 800ba64 <_Balloc+0x28>
 800ba46:	2010      	movs	r0, #16
 800ba48:	f7fe f982 	bl	8009d50 <malloc>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	61e0      	str	r0, [r4, #28]
 800ba50:	b920      	cbnz	r0, 800ba5c <_Balloc+0x20>
 800ba52:	4b18      	ldr	r3, [pc, #96]	; (800bab4 <_Balloc+0x78>)
 800ba54:	4818      	ldr	r0, [pc, #96]	; (800bab8 <_Balloc+0x7c>)
 800ba56:	216b      	movs	r1, #107	; 0x6b
 800ba58:	f000 fe24 	bl	800c6a4 <__assert_func>
 800ba5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba60:	6006      	str	r6, [r0, #0]
 800ba62:	60c6      	str	r6, [r0, #12]
 800ba64:	69e6      	ldr	r6, [r4, #28]
 800ba66:	68f3      	ldr	r3, [r6, #12]
 800ba68:	b183      	cbz	r3, 800ba8c <_Balloc+0x50>
 800ba6a:	69e3      	ldr	r3, [r4, #28]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba72:	b9b8      	cbnz	r0, 800baa4 <_Balloc+0x68>
 800ba74:	2101      	movs	r1, #1
 800ba76:	fa01 f605 	lsl.w	r6, r1, r5
 800ba7a:	1d72      	adds	r2, r6, #5
 800ba7c:	0092      	lsls	r2, r2, #2
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 fe2e 	bl	800c6e0 <_calloc_r>
 800ba84:	b160      	cbz	r0, 800baa0 <_Balloc+0x64>
 800ba86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba8a:	e00e      	b.n	800baaa <_Balloc+0x6e>
 800ba8c:	2221      	movs	r2, #33	; 0x21
 800ba8e:	2104      	movs	r1, #4
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 fe25 	bl	800c6e0 <_calloc_r>
 800ba96:	69e3      	ldr	r3, [r4, #28]
 800ba98:	60f0      	str	r0, [r6, #12]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1e4      	bne.n	800ba6a <_Balloc+0x2e>
 800baa0:	2000      	movs	r0, #0
 800baa2:	bd70      	pop	{r4, r5, r6, pc}
 800baa4:	6802      	ldr	r2, [r0, #0]
 800baa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baaa:	2300      	movs	r3, #0
 800baac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bab0:	e7f7      	b.n	800baa2 <_Balloc+0x66>
 800bab2:	bf00      	nop
 800bab4:	0800c889 	.word	0x0800c889
 800bab8:	0800c909 	.word	0x0800c909

0800babc <_Bfree>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	69c6      	ldr	r6, [r0, #28]
 800bac0:	4605      	mov	r5, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	b976      	cbnz	r6, 800bae4 <_Bfree+0x28>
 800bac6:	2010      	movs	r0, #16
 800bac8:	f7fe f942 	bl	8009d50 <malloc>
 800bacc:	4602      	mov	r2, r0
 800bace:	61e8      	str	r0, [r5, #28]
 800bad0:	b920      	cbnz	r0, 800badc <_Bfree+0x20>
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <_Bfree+0x3c>)
 800bad4:	4809      	ldr	r0, [pc, #36]	; (800bafc <_Bfree+0x40>)
 800bad6:	218f      	movs	r1, #143	; 0x8f
 800bad8:	f000 fde4 	bl	800c6a4 <__assert_func>
 800badc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae0:	6006      	str	r6, [r0, #0]
 800bae2:	60c6      	str	r6, [r0, #12]
 800bae4:	b13c      	cbz	r4, 800baf6 <_Bfree+0x3a>
 800bae6:	69eb      	ldr	r3, [r5, #28]
 800bae8:	6862      	ldr	r2, [r4, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baf0:	6021      	str	r1, [r4, #0]
 800baf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
 800baf8:	0800c889 	.word	0x0800c889
 800bafc:	0800c909 	.word	0x0800c909

0800bb00 <__multadd>:
 800bb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb04:	690d      	ldr	r5, [r1, #16]
 800bb06:	4607      	mov	r7, r0
 800bb08:	460c      	mov	r4, r1
 800bb0a:	461e      	mov	r6, r3
 800bb0c:	f101 0c14 	add.w	ip, r1, #20
 800bb10:	2000      	movs	r0, #0
 800bb12:	f8dc 3000 	ldr.w	r3, [ip]
 800bb16:	b299      	uxth	r1, r3
 800bb18:	fb02 6101 	mla	r1, r2, r1, r6
 800bb1c:	0c1e      	lsrs	r6, r3, #16
 800bb1e:	0c0b      	lsrs	r3, r1, #16
 800bb20:	fb02 3306 	mla	r3, r2, r6, r3
 800bb24:	b289      	uxth	r1, r1
 800bb26:	3001      	adds	r0, #1
 800bb28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb2c:	4285      	cmp	r5, r0
 800bb2e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb36:	dcec      	bgt.n	800bb12 <__multadd+0x12>
 800bb38:	b30e      	cbz	r6, 800bb7e <__multadd+0x7e>
 800bb3a:	68a3      	ldr	r3, [r4, #8]
 800bb3c:	42ab      	cmp	r3, r5
 800bb3e:	dc19      	bgt.n	800bb74 <__multadd+0x74>
 800bb40:	6861      	ldr	r1, [r4, #4]
 800bb42:	4638      	mov	r0, r7
 800bb44:	3101      	adds	r1, #1
 800bb46:	f7ff ff79 	bl	800ba3c <_Balloc>
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	b928      	cbnz	r0, 800bb5a <__multadd+0x5a>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	4b0c      	ldr	r3, [pc, #48]	; (800bb84 <__multadd+0x84>)
 800bb52:	480d      	ldr	r0, [pc, #52]	; (800bb88 <__multadd+0x88>)
 800bb54:	21ba      	movs	r1, #186	; 0xba
 800bb56:	f000 fda5 	bl	800c6a4 <__assert_func>
 800bb5a:	6922      	ldr	r2, [r4, #16]
 800bb5c:	3202      	adds	r2, #2
 800bb5e:	f104 010c 	add.w	r1, r4, #12
 800bb62:	0092      	lsls	r2, r2, #2
 800bb64:	300c      	adds	r0, #12
 800bb66:	f000 fd8f 	bl	800c688 <memcpy>
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	f7ff ffa5 	bl	800babc <_Bfree>
 800bb72:	4644      	mov	r4, r8
 800bb74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb78:	3501      	adds	r5, #1
 800bb7a:	615e      	str	r6, [r3, #20]
 800bb7c:	6125      	str	r5, [r4, #16]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb84:	0800c8f8 	.word	0x0800c8f8
 800bb88:	0800c909 	.word	0x0800c909

0800bb8c <__hi0bits>:
 800bb8c:	0c03      	lsrs	r3, r0, #16
 800bb8e:	041b      	lsls	r3, r3, #16
 800bb90:	b9d3      	cbnz	r3, 800bbc8 <__hi0bits+0x3c>
 800bb92:	0400      	lsls	r0, r0, #16
 800bb94:	2310      	movs	r3, #16
 800bb96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb9a:	bf04      	itt	eq
 800bb9c:	0200      	lsleq	r0, r0, #8
 800bb9e:	3308      	addeq	r3, #8
 800bba0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bba4:	bf04      	itt	eq
 800bba6:	0100      	lsleq	r0, r0, #4
 800bba8:	3304      	addeq	r3, #4
 800bbaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbae:	bf04      	itt	eq
 800bbb0:	0080      	lsleq	r0, r0, #2
 800bbb2:	3302      	addeq	r3, #2
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	db05      	blt.n	800bbc4 <__hi0bits+0x38>
 800bbb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbbc:	f103 0301 	add.w	r3, r3, #1
 800bbc0:	bf08      	it	eq
 800bbc2:	2320      	moveq	r3, #32
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	4770      	bx	lr
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e7e4      	b.n	800bb96 <__hi0bits+0xa>

0800bbcc <__lo0bits>:
 800bbcc:	6803      	ldr	r3, [r0, #0]
 800bbce:	f013 0207 	ands.w	r2, r3, #7
 800bbd2:	d00c      	beq.n	800bbee <__lo0bits+0x22>
 800bbd4:	07d9      	lsls	r1, r3, #31
 800bbd6:	d422      	bmi.n	800bc1e <__lo0bits+0x52>
 800bbd8:	079a      	lsls	r2, r3, #30
 800bbda:	bf49      	itett	mi
 800bbdc:	085b      	lsrmi	r3, r3, #1
 800bbde:	089b      	lsrpl	r3, r3, #2
 800bbe0:	6003      	strmi	r3, [r0, #0]
 800bbe2:	2201      	movmi	r2, #1
 800bbe4:	bf5c      	itt	pl
 800bbe6:	6003      	strpl	r3, [r0, #0]
 800bbe8:	2202      	movpl	r2, #2
 800bbea:	4610      	mov	r0, r2
 800bbec:	4770      	bx	lr
 800bbee:	b299      	uxth	r1, r3
 800bbf0:	b909      	cbnz	r1, 800bbf6 <__lo0bits+0x2a>
 800bbf2:	0c1b      	lsrs	r3, r3, #16
 800bbf4:	2210      	movs	r2, #16
 800bbf6:	b2d9      	uxtb	r1, r3
 800bbf8:	b909      	cbnz	r1, 800bbfe <__lo0bits+0x32>
 800bbfa:	3208      	adds	r2, #8
 800bbfc:	0a1b      	lsrs	r3, r3, #8
 800bbfe:	0719      	lsls	r1, r3, #28
 800bc00:	bf04      	itt	eq
 800bc02:	091b      	lsreq	r3, r3, #4
 800bc04:	3204      	addeq	r2, #4
 800bc06:	0799      	lsls	r1, r3, #30
 800bc08:	bf04      	itt	eq
 800bc0a:	089b      	lsreq	r3, r3, #2
 800bc0c:	3202      	addeq	r2, #2
 800bc0e:	07d9      	lsls	r1, r3, #31
 800bc10:	d403      	bmi.n	800bc1a <__lo0bits+0x4e>
 800bc12:	085b      	lsrs	r3, r3, #1
 800bc14:	f102 0201 	add.w	r2, r2, #1
 800bc18:	d003      	beq.n	800bc22 <__lo0bits+0x56>
 800bc1a:	6003      	str	r3, [r0, #0]
 800bc1c:	e7e5      	b.n	800bbea <__lo0bits+0x1e>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	e7e3      	b.n	800bbea <__lo0bits+0x1e>
 800bc22:	2220      	movs	r2, #32
 800bc24:	e7e1      	b.n	800bbea <__lo0bits+0x1e>
	...

0800bc28 <__i2b>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	f7ff ff05 	bl	800ba3c <_Balloc>
 800bc32:	4602      	mov	r2, r0
 800bc34:	b928      	cbnz	r0, 800bc42 <__i2b+0x1a>
 800bc36:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <__i2b+0x24>)
 800bc38:	4805      	ldr	r0, [pc, #20]	; (800bc50 <__i2b+0x28>)
 800bc3a:	f240 1145 	movw	r1, #325	; 0x145
 800bc3e:	f000 fd31 	bl	800c6a4 <__assert_func>
 800bc42:	2301      	movs	r3, #1
 800bc44:	6144      	str	r4, [r0, #20]
 800bc46:	6103      	str	r3, [r0, #16]
 800bc48:	bd10      	pop	{r4, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0800c8f8 	.word	0x0800c8f8
 800bc50:	0800c909 	.word	0x0800c909

0800bc54 <__multiply>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4691      	mov	r9, r2
 800bc5a:	690a      	ldr	r2, [r1, #16]
 800bc5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	bfb8      	it	lt
 800bc64:	460b      	movlt	r3, r1
 800bc66:	460c      	mov	r4, r1
 800bc68:	bfbc      	itt	lt
 800bc6a:	464c      	movlt	r4, r9
 800bc6c:	4699      	movlt	r9, r3
 800bc6e:	6927      	ldr	r7, [r4, #16]
 800bc70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	6861      	ldr	r1, [r4, #4]
 800bc78:	eb07 060a 	add.w	r6, r7, sl
 800bc7c:	42b3      	cmp	r3, r6
 800bc7e:	b085      	sub	sp, #20
 800bc80:	bfb8      	it	lt
 800bc82:	3101      	addlt	r1, #1
 800bc84:	f7ff feda 	bl	800ba3c <_Balloc>
 800bc88:	b930      	cbnz	r0, 800bc98 <__multiply+0x44>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	4b44      	ldr	r3, [pc, #272]	; (800bda0 <__multiply+0x14c>)
 800bc8e:	4845      	ldr	r0, [pc, #276]	; (800bda4 <__multiply+0x150>)
 800bc90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc94:	f000 fd06 	bl	800c6a4 <__assert_func>
 800bc98:	f100 0514 	add.w	r5, r0, #20
 800bc9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bca0:	462b      	mov	r3, r5
 800bca2:	2200      	movs	r2, #0
 800bca4:	4543      	cmp	r3, r8
 800bca6:	d321      	bcc.n	800bcec <__multiply+0x98>
 800bca8:	f104 0314 	add.w	r3, r4, #20
 800bcac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcb0:	f109 0314 	add.w	r3, r9, #20
 800bcb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcb8:	9202      	str	r2, [sp, #8]
 800bcba:	1b3a      	subs	r2, r7, r4
 800bcbc:	3a15      	subs	r2, #21
 800bcbe:	f022 0203 	bic.w	r2, r2, #3
 800bcc2:	3204      	adds	r2, #4
 800bcc4:	f104 0115 	add.w	r1, r4, #21
 800bcc8:	428f      	cmp	r7, r1
 800bcca:	bf38      	it	cc
 800bccc:	2204      	movcc	r2, #4
 800bcce:	9201      	str	r2, [sp, #4]
 800bcd0:	9a02      	ldr	r2, [sp, #8]
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d80c      	bhi.n	800bcf2 <__multiply+0x9e>
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	dd03      	ble.n	800bce4 <__multiply+0x90>
 800bcdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d05b      	beq.n	800bd9c <__multiply+0x148>
 800bce4:	6106      	str	r6, [r0, #16]
 800bce6:	b005      	add	sp, #20
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	f843 2b04 	str.w	r2, [r3], #4
 800bcf0:	e7d8      	b.n	800bca4 <__multiply+0x50>
 800bcf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcf6:	f1ba 0f00 	cmp.w	sl, #0
 800bcfa:	d024      	beq.n	800bd46 <__multiply+0xf2>
 800bcfc:	f104 0e14 	add.w	lr, r4, #20
 800bd00:	46a9      	mov	r9, r5
 800bd02:	f04f 0c00 	mov.w	ip, #0
 800bd06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd0a:	f8d9 1000 	ldr.w	r1, [r9]
 800bd0e:	fa1f fb82 	uxth.w	fp, r2
 800bd12:	b289      	uxth	r1, r1
 800bd14:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd1c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd20:	4461      	add	r1, ip
 800bd22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd26:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd2e:	b289      	uxth	r1, r1
 800bd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd34:	4577      	cmp	r7, lr
 800bd36:	f849 1b04 	str.w	r1, [r9], #4
 800bd3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd3e:	d8e2      	bhi.n	800bd06 <__multiply+0xb2>
 800bd40:	9a01      	ldr	r2, [sp, #4]
 800bd42:	f845 c002 	str.w	ip, [r5, r2]
 800bd46:	9a03      	ldr	r2, [sp, #12]
 800bd48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	f1b9 0f00 	cmp.w	r9, #0
 800bd52:	d021      	beq.n	800bd98 <__multiply+0x144>
 800bd54:	6829      	ldr	r1, [r5, #0]
 800bd56:	f104 0c14 	add.w	ip, r4, #20
 800bd5a:	46ae      	mov	lr, r5
 800bd5c:	f04f 0a00 	mov.w	sl, #0
 800bd60:	f8bc b000 	ldrh.w	fp, [ip]
 800bd64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd68:	fb09 220b 	mla	r2, r9, fp, r2
 800bd6c:	4452      	add	r2, sl
 800bd6e:	b289      	uxth	r1, r1
 800bd70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd74:	f84e 1b04 	str.w	r1, [lr], #4
 800bd78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd80:	f8be 1000 	ldrh.w	r1, [lr]
 800bd84:	fb09 110a 	mla	r1, r9, sl, r1
 800bd88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd8c:	4567      	cmp	r7, ip
 800bd8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd92:	d8e5      	bhi.n	800bd60 <__multiply+0x10c>
 800bd94:	9a01      	ldr	r2, [sp, #4]
 800bd96:	50a9      	str	r1, [r5, r2]
 800bd98:	3504      	adds	r5, #4
 800bd9a:	e799      	b.n	800bcd0 <__multiply+0x7c>
 800bd9c:	3e01      	subs	r6, #1
 800bd9e:	e79b      	b.n	800bcd8 <__multiply+0x84>
 800bda0:	0800c8f8 	.word	0x0800c8f8
 800bda4:	0800c909 	.word	0x0800c909

0800bda8 <__pow5mult>:
 800bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdac:	4615      	mov	r5, r2
 800bdae:	f012 0203 	ands.w	r2, r2, #3
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	d007      	beq.n	800bdc8 <__pow5mult+0x20>
 800bdb8:	4c25      	ldr	r4, [pc, #148]	; (800be50 <__pow5mult+0xa8>)
 800bdba:	3a01      	subs	r2, #1
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdc2:	f7ff fe9d 	bl	800bb00 <__multadd>
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	10ad      	asrs	r5, r5, #2
 800bdca:	d03d      	beq.n	800be48 <__pow5mult+0xa0>
 800bdcc:	69f4      	ldr	r4, [r6, #28]
 800bdce:	b97c      	cbnz	r4, 800bdf0 <__pow5mult+0x48>
 800bdd0:	2010      	movs	r0, #16
 800bdd2:	f7fd ffbd 	bl	8009d50 <malloc>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	61f0      	str	r0, [r6, #28]
 800bdda:	b928      	cbnz	r0, 800bde8 <__pow5mult+0x40>
 800bddc:	4b1d      	ldr	r3, [pc, #116]	; (800be54 <__pow5mult+0xac>)
 800bdde:	481e      	ldr	r0, [pc, #120]	; (800be58 <__pow5mult+0xb0>)
 800bde0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bde4:	f000 fc5e 	bl	800c6a4 <__assert_func>
 800bde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdec:	6004      	str	r4, [r0, #0]
 800bdee:	60c4      	str	r4, [r0, #12]
 800bdf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdf8:	b94c      	cbnz	r4, 800be0e <__pow5mult+0x66>
 800bdfa:	f240 2171 	movw	r1, #625	; 0x271
 800bdfe:	4630      	mov	r0, r6
 800be00:	f7ff ff12 	bl	800bc28 <__i2b>
 800be04:	2300      	movs	r3, #0
 800be06:	f8c8 0008 	str.w	r0, [r8, #8]
 800be0a:	4604      	mov	r4, r0
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	f04f 0900 	mov.w	r9, #0
 800be12:	07eb      	lsls	r3, r5, #31
 800be14:	d50a      	bpl.n	800be2c <__pow5mult+0x84>
 800be16:	4639      	mov	r1, r7
 800be18:	4622      	mov	r2, r4
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ff1a 	bl	800bc54 <__multiply>
 800be20:	4639      	mov	r1, r7
 800be22:	4680      	mov	r8, r0
 800be24:	4630      	mov	r0, r6
 800be26:	f7ff fe49 	bl	800babc <_Bfree>
 800be2a:	4647      	mov	r7, r8
 800be2c:	106d      	asrs	r5, r5, #1
 800be2e:	d00b      	beq.n	800be48 <__pow5mult+0xa0>
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	b938      	cbnz	r0, 800be44 <__pow5mult+0x9c>
 800be34:	4622      	mov	r2, r4
 800be36:	4621      	mov	r1, r4
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ff0b 	bl	800bc54 <__multiply>
 800be3e:	6020      	str	r0, [r4, #0]
 800be40:	f8c0 9000 	str.w	r9, [r0]
 800be44:	4604      	mov	r4, r0
 800be46:	e7e4      	b.n	800be12 <__pow5mult+0x6a>
 800be48:	4638      	mov	r0, r7
 800be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4e:	bf00      	nop
 800be50:	0800ca58 	.word	0x0800ca58
 800be54:	0800c889 	.word	0x0800c889
 800be58:	0800c909 	.word	0x0800c909

0800be5c <__lshift>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	460c      	mov	r4, r1
 800be62:	6849      	ldr	r1, [r1, #4]
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	4607      	mov	r7, r0
 800be6e:	4691      	mov	r9, r2
 800be70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be74:	f108 0601 	add.w	r6, r8, #1
 800be78:	42b3      	cmp	r3, r6
 800be7a:	db0b      	blt.n	800be94 <__lshift+0x38>
 800be7c:	4638      	mov	r0, r7
 800be7e:	f7ff fddd 	bl	800ba3c <_Balloc>
 800be82:	4605      	mov	r5, r0
 800be84:	b948      	cbnz	r0, 800be9a <__lshift+0x3e>
 800be86:	4602      	mov	r2, r0
 800be88:	4b28      	ldr	r3, [pc, #160]	; (800bf2c <__lshift+0xd0>)
 800be8a:	4829      	ldr	r0, [pc, #164]	; (800bf30 <__lshift+0xd4>)
 800be8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be90:	f000 fc08 	bl	800c6a4 <__assert_func>
 800be94:	3101      	adds	r1, #1
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	e7ee      	b.n	800be78 <__lshift+0x1c>
 800be9a:	2300      	movs	r3, #0
 800be9c:	f100 0114 	add.w	r1, r0, #20
 800bea0:	f100 0210 	add.w	r2, r0, #16
 800bea4:	4618      	mov	r0, r3
 800bea6:	4553      	cmp	r3, sl
 800bea8:	db33      	blt.n	800bf12 <__lshift+0xb6>
 800beaa:	6920      	ldr	r0, [r4, #16]
 800beac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beb0:	f104 0314 	add.w	r3, r4, #20
 800beb4:	f019 091f 	ands.w	r9, r9, #31
 800beb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bec0:	d02b      	beq.n	800bf1a <__lshift+0xbe>
 800bec2:	f1c9 0e20 	rsb	lr, r9, #32
 800bec6:	468a      	mov	sl, r1
 800bec8:	2200      	movs	r2, #0
 800beca:	6818      	ldr	r0, [r3, #0]
 800becc:	fa00 f009 	lsl.w	r0, r0, r9
 800bed0:	4310      	orrs	r0, r2
 800bed2:	f84a 0b04 	str.w	r0, [sl], #4
 800bed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beda:	459c      	cmp	ip, r3
 800bedc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bee0:	d8f3      	bhi.n	800beca <__lshift+0x6e>
 800bee2:	ebac 0304 	sub.w	r3, ip, r4
 800bee6:	3b15      	subs	r3, #21
 800bee8:	f023 0303 	bic.w	r3, r3, #3
 800beec:	3304      	adds	r3, #4
 800beee:	f104 0015 	add.w	r0, r4, #21
 800bef2:	4584      	cmp	ip, r0
 800bef4:	bf38      	it	cc
 800bef6:	2304      	movcc	r3, #4
 800bef8:	50ca      	str	r2, [r1, r3]
 800befa:	b10a      	cbz	r2, 800bf00 <__lshift+0xa4>
 800befc:	f108 0602 	add.w	r6, r8, #2
 800bf00:	3e01      	subs	r6, #1
 800bf02:	4638      	mov	r0, r7
 800bf04:	612e      	str	r6, [r5, #16]
 800bf06:	4621      	mov	r1, r4
 800bf08:	f7ff fdd8 	bl	800babc <_Bfree>
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf12:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf16:	3301      	adds	r3, #1
 800bf18:	e7c5      	b.n	800bea6 <__lshift+0x4a>
 800bf1a:	3904      	subs	r1, #4
 800bf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf20:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf24:	459c      	cmp	ip, r3
 800bf26:	d8f9      	bhi.n	800bf1c <__lshift+0xc0>
 800bf28:	e7ea      	b.n	800bf00 <__lshift+0xa4>
 800bf2a:	bf00      	nop
 800bf2c:	0800c8f8 	.word	0x0800c8f8
 800bf30:	0800c909 	.word	0x0800c909

0800bf34 <__mcmp>:
 800bf34:	b530      	push	{r4, r5, lr}
 800bf36:	6902      	ldr	r2, [r0, #16]
 800bf38:	690c      	ldr	r4, [r1, #16]
 800bf3a:	1b12      	subs	r2, r2, r4
 800bf3c:	d10e      	bne.n	800bf5c <__mcmp+0x28>
 800bf3e:	f100 0314 	add.w	r3, r0, #20
 800bf42:	3114      	adds	r1, #20
 800bf44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf54:	42a5      	cmp	r5, r4
 800bf56:	d003      	beq.n	800bf60 <__mcmp+0x2c>
 800bf58:	d305      	bcc.n	800bf66 <__mcmp+0x32>
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	bd30      	pop	{r4, r5, pc}
 800bf60:	4283      	cmp	r3, r0
 800bf62:	d3f3      	bcc.n	800bf4c <__mcmp+0x18>
 800bf64:	e7fa      	b.n	800bf5c <__mcmp+0x28>
 800bf66:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6a:	e7f7      	b.n	800bf5c <__mcmp+0x28>

0800bf6c <__mdiff>:
 800bf6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	4606      	mov	r6, r0
 800bf74:	4611      	mov	r1, r2
 800bf76:	4620      	mov	r0, r4
 800bf78:	4690      	mov	r8, r2
 800bf7a:	f7ff ffdb 	bl	800bf34 <__mcmp>
 800bf7e:	1e05      	subs	r5, r0, #0
 800bf80:	d110      	bne.n	800bfa4 <__mdiff+0x38>
 800bf82:	4629      	mov	r1, r5
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff fd59 	bl	800ba3c <_Balloc>
 800bf8a:	b930      	cbnz	r0, 800bf9a <__mdiff+0x2e>
 800bf8c:	4b3a      	ldr	r3, [pc, #232]	; (800c078 <__mdiff+0x10c>)
 800bf8e:	4602      	mov	r2, r0
 800bf90:	f240 2137 	movw	r1, #567	; 0x237
 800bf94:	4839      	ldr	r0, [pc, #228]	; (800c07c <__mdiff+0x110>)
 800bf96:	f000 fb85 	bl	800c6a4 <__assert_func>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa4:	bfa4      	itt	ge
 800bfa6:	4643      	movge	r3, r8
 800bfa8:	46a0      	movge	r8, r4
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfb0:	bfa6      	itte	ge
 800bfb2:	461c      	movge	r4, r3
 800bfb4:	2500      	movge	r5, #0
 800bfb6:	2501      	movlt	r5, #1
 800bfb8:	f7ff fd40 	bl	800ba3c <_Balloc>
 800bfbc:	b920      	cbnz	r0, 800bfc8 <__mdiff+0x5c>
 800bfbe:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <__mdiff+0x10c>)
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	f240 2145 	movw	r1, #581	; 0x245
 800bfc6:	e7e5      	b.n	800bf94 <__mdiff+0x28>
 800bfc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfcc:	6926      	ldr	r6, [r4, #16]
 800bfce:	60c5      	str	r5, [r0, #12]
 800bfd0:	f104 0914 	add.w	r9, r4, #20
 800bfd4:	f108 0514 	add.w	r5, r8, #20
 800bfd8:	f100 0e14 	add.w	lr, r0, #20
 800bfdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfe4:	f108 0210 	add.w	r2, r8, #16
 800bfe8:	46f2      	mov	sl, lr
 800bfea:	2100      	movs	r1, #0
 800bfec:	f859 3b04 	ldr.w	r3, [r9], #4
 800bff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bff4:	fa11 f88b 	uxtah	r8, r1, fp
 800bff8:	b299      	uxth	r1, r3
 800bffa:	0c1b      	lsrs	r3, r3, #16
 800bffc:	eba8 0801 	sub.w	r8, r8, r1
 800c000:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c004:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c008:	fa1f f888 	uxth.w	r8, r8
 800c00c:	1419      	asrs	r1, r3, #16
 800c00e:	454e      	cmp	r6, r9
 800c010:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c014:	f84a 3b04 	str.w	r3, [sl], #4
 800c018:	d8e8      	bhi.n	800bfec <__mdiff+0x80>
 800c01a:	1b33      	subs	r3, r6, r4
 800c01c:	3b15      	subs	r3, #21
 800c01e:	f023 0303 	bic.w	r3, r3, #3
 800c022:	3304      	adds	r3, #4
 800c024:	3415      	adds	r4, #21
 800c026:	42a6      	cmp	r6, r4
 800c028:	bf38      	it	cc
 800c02a:	2304      	movcc	r3, #4
 800c02c:	441d      	add	r5, r3
 800c02e:	4473      	add	r3, lr
 800c030:	469e      	mov	lr, r3
 800c032:	462e      	mov	r6, r5
 800c034:	4566      	cmp	r6, ip
 800c036:	d30e      	bcc.n	800c056 <__mdiff+0xea>
 800c038:	f10c 0203 	add.w	r2, ip, #3
 800c03c:	1b52      	subs	r2, r2, r5
 800c03e:	f022 0203 	bic.w	r2, r2, #3
 800c042:	3d03      	subs	r5, #3
 800c044:	45ac      	cmp	ip, r5
 800c046:	bf38      	it	cc
 800c048:	2200      	movcc	r2, #0
 800c04a:	4413      	add	r3, r2
 800c04c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c050:	b17a      	cbz	r2, 800c072 <__mdiff+0x106>
 800c052:	6107      	str	r7, [r0, #16]
 800c054:	e7a4      	b.n	800bfa0 <__mdiff+0x34>
 800c056:	f856 8b04 	ldr.w	r8, [r6], #4
 800c05a:	fa11 f288 	uxtah	r2, r1, r8
 800c05e:	1414      	asrs	r4, r2, #16
 800c060:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c064:	b292      	uxth	r2, r2
 800c066:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c06a:	f84e 2b04 	str.w	r2, [lr], #4
 800c06e:	1421      	asrs	r1, r4, #16
 800c070:	e7e0      	b.n	800c034 <__mdiff+0xc8>
 800c072:	3f01      	subs	r7, #1
 800c074:	e7ea      	b.n	800c04c <__mdiff+0xe0>
 800c076:	bf00      	nop
 800c078:	0800c8f8 	.word	0x0800c8f8
 800c07c:	0800c909 	.word	0x0800c909

0800c080 <__d2b>:
 800c080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c084:	460f      	mov	r7, r1
 800c086:	2101      	movs	r1, #1
 800c088:	ec59 8b10 	vmov	r8, r9, d0
 800c08c:	4616      	mov	r6, r2
 800c08e:	f7ff fcd5 	bl	800ba3c <_Balloc>
 800c092:	4604      	mov	r4, r0
 800c094:	b930      	cbnz	r0, 800c0a4 <__d2b+0x24>
 800c096:	4602      	mov	r2, r0
 800c098:	4b24      	ldr	r3, [pc, #144]	; (800c12c <__d2b+0xac>)
 800c09a:	4825      	ldr	r0, [pc, #148]	; (800c130 <__d2b+0xb0>)
 800c09c:	f240 310f 	movw	r1, #783	; 0x30f
 800c0a0:	f000 fb00 	bl	800c6a4 <__assert_func>
 800c0a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0ac:	bb2d      	cbnz	r5, 800c0fa <__d2b+0x7a>
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0b4:	d026      	beq.n	800c104 <__d2b+0x84>
 800c0b6:	4668      	mov	r0, sp
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	f7ff fd87 	bl	800bbcc <__lo0bits>
 800c0be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0c2:	b1e8      	cbz	r0, 800c100 <__d2b+0x80>
 800c0c4:	f1c0 0320 	rsb	r3, r0, #32
 800c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	40c2      	lsrs	r2, r0
 800c0d0:	6163      	str	r3, [r4, #20]
 800c0d2:	9201      	str	r2, [sp, #4]
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	61a3      	str	r3, [r4, #24]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf14      	ite	ne
 800c0dc:	2202      	movne	r2, #2
 800c0de:	2201      	moveq	r2, #1
 800c0e0:	6122      	str	r2, [r4, #16]
 800c0e2:	b1bd      	cbz	r5, 800c114 <__d2b+0x94>
 800c0e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0e8:	4405      	add	r5, r0
 800c0ea:	603d      	str	r5, [r7, #0]
 800c0ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0f0:	6030      	str	r0, [r6, #0]
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	b003      	add	sp, #12
 800c0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0fe:	e7d6      	b.n	800c0ae <__d2b+0x2e>
 800c100:	6161      	str	r1, [r4, #20]
 800c102:	e7e7      	b.n	800c0d4 <__d2b+0x54>
 800c104:	a801      	add	r0, sp, #4
 800c106:	f7ff fd61 	bl	800bbcc <__lo0bits>
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	6163      	str	r3, [r4, #20]
 800c10e:	3020      	adds	r0, #32
 800c110:	2201      	movs	r2, #1
 800c112:	e7e5      	b.n	800c0e0 <__d2b+0x60>
 800c114:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c118:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c11c:	6038      	str	r0, [r7, #0]
 800c11e:	6918      	ldr	r0, [r3, #16]
 800c120:	f7ff fd34 	bl	800bb8c <__hi0bits>
 800c124:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c128:	e7e2      	b.n	800c0f0 <__d2b+0x70>
 800c12a:	bf00      	nop
 800c12c:	0800c8f8 	.word	0x0800c8f8
 800c130:	0800c909 	.word	0x0800c909

0800c134 <__sfputc_r>:
 800c134:	6893      	ldr	r3, [r2, #8]
 800c136:	3b01      	subs	r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	b410      	push	{r4}
 800c13c:	6093      	str	r3, [r2, #8]
 800c13e:	da08      	bge.n	800c152 <__sfputc_r+0x1e>
 800c140:	6994      	ldr	r4, [r2, #24]
 800c142:	42a3      	cmp	r3, r4
 800c144:	db01      	blt.n	800c14a <__sfputc_r+0x16>
 800c146:	290a      	cmp	r1, #10
 800c148:	d103      	bne.n	800c152 <__sfputc_r+0x1e>
 800c14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c14e:	f7fe bc8a 	b.w	800aa66 <__swbuf_r>
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	1c58      	adds	r0, r3, #1
 800c156:	6010      	str	r0, [r2, #0]
 800c158:	7019      	strb	r1, [r3, #0]
 800c15a:	4608      	mov	r0, r1
 800c15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <__sfputs_r>:
 800c162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c164:	4606      	mov	r6, r0
 800c166:	460f      	mov	r7, r1
 800c168:	4614      	mov	r4, r2
 800c16a:	18d5      	adds	r5, r2, r3
 800c16c:	42ac      	cmp	r4, r5
 800c16e:	d101      	bne.n	800c174 <__sfputs_r+0x12>
 800c170:	2000      	movs	r0, #0
 800c172:	e007      	b.n	800c184 <__sfputs_r+0x22>
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	463a      	mov	r2, r7
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7ff ffda 	bl	800c134 <__sfputc_r>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d1f3      	bne.n	800c16c <__sfputs_r+0xa>
 800c184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c188 <_vfiprintf_r>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	460d      	mov	r5, r1
 800c18e:	b09d      	sub	sp, #116	; 0x74
 800c190:	4614      	mov	r4, r2
 800c192:	4698      	mov	r8, r3
 800c194:	4606      	mov	r6, r0
 800c196:	b118      	cbz	r0, 800c1a0 <_vfiprintf_r+0x18>
 800c198:	6a03      	ldr	r3, [r0, #32]
 800c19a:	b90b      	cbnz	r3, 800c1a0 <_vfiprintf_r+0x18>
 800c19c:	f7fe fb74 	bl	800a888 <__sinit>
 800c1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1a2:	07d9      	lsls	r1, r3, #31
 800c1a4:	d405      	bmi.n	800c1b2 <_vfiprintf_r+0x2a>
 800c1a6:	89ab      	ldrh	r3, [r5, #12]
 800c1a8:	059a      	lsls	r2, r3, #22
 800c1aa:	d402      	bmi.n	800c1b2 <_vfiprintf_r+0x2a>
 800c1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ae:	f7fe fd7b 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	071b      	lsls	r3, r3, #28
 800c1b6:	d501      	bpl.n	800c1bc <_vfiprintf_r+0x34>
 800c1b8:	692b      	ldr	r3, [r5, #16]
 800c1ba:	b99b      	cbnz	r3, 800c1e4 <_vfiprintf_r+0x5c>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7fe fc8e 	bl	800aae0 <__swsetup_r>
 800c1c4:	b170      	cbz	r0, 800c1e4 <_vfiprintf_r+0x5c>
 800c1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1c8:	07dc      	lsls	r4, r3, #31
 800c1ca:	d504      	bpl.n	800c1d6 <_vfiprintf_r+0x4e>
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	b01d      	add	sp, #116	; 0x74
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	0598      	lsls	r0, r3, #22
 800c1da:	d4f7      	bmi.n	800c1cc <_vfiprintf_r+0x44>
 800c1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1de:	f7fe fd64 	bl	800acaa <__retarget_lock_release_recursive>
 800c1e2:	e7f3      	b.n	800c1cc <_vfiprintf_r+0x44>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e8:	2320      	movs	r3, #32
 800c1ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1f2:	2330      	movs	r3, #48	; 0x30
 800c1f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c3a8 <_vfiprintf_r+0x220>
 800c1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1fc:	f04f 0901 	mov.w	r9, #1
 800c200:	4623      	mov	r3, r4
 800c202:	469a      	mov	sl, r3
 800c204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c208:	b10a      	cbz	r2, 800c20e <_vfiprintf_r+0x86>
 800c20a:	2a25      	cmp	r2, #37	; 0x25
 800c20c:	d1f9      	bne.n	800c202 <_vfiprintf_r+0x7a>
 800c20e:	ebba 0b04 	subs.w	fp, sl, r4
 800c212:	d00b      	beq.n	800c22c <_vfiprintf_r+0xa4>
 800c214:	465b      	mov	r3, fp
 800c216:	4622      	mov	r2, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ffa1 	bl	800c162 <__sfputs_r>
 800c220:	3001      	adds	r0, #1
 800c222:	f000 80a9 	beq.w	800c378 <_vfiprintf_r+0x1f0>
 800c226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c228:	445a      	add	r2, fp
 800c22a:	9209      	str	r2, [sp, #36]	; 0x24
 800c22c:	f89a 3000 	ldrb.w	r3, [sl]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 80a1 	beq.w	800c378 <_vfiprintf_r+0x1f0>
 800c236:	2300      	movs	r3, #0
 800c238:	f04f 32ff 	mov.w	r2, #4294967295
 800c23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	9307      	str	r3, [sp, #28]
 800c248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c24c:	931a      	str	r3, [sp, #104]	; 0x68
 800c24e:	4654      	mov	r4, sl
 800c250:	2205      	movs	r2, #5
 800c252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c256:	4854      	ldr	r0, [pc, #336]	; (800c3a8 <_vfiprintf_r+0x220>)
 800c258:	f7f3 ffba 	bl	80001d0 <memchr>
 800c25c:	9a04      	ldr	r2, [sp, #16]
 800c25e:	b9d8      	cbnz	r0, 800c298 <_vfiprintf_r+0x110>
 800c260:	06d1      	lsls	r1, r2, #27
 800c262:	bf44      	itt	mi
 800c264:	2320      	movmi	r3, #32
 800c266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c26a:	0713      	lsls	r3, r2, #28
 800c26c:	bf44      	itt	mi
 800c26e:	232b      	movmi	r3, #43	; 0x2b
 800c270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c274:	f89a 3000 	ldrb.w	r3, [sl]
 800c278:	2b2a      	cmp	r3, #42	; 0x2a
 800c27a:	d015      	beq.n	800c2a8 <_vfiprintf_r+0x120>
 800c27c:	9a07      	ldr	r2, [sp, #28]
 800c27e:	4654      	mov	r4, sl
 800c280:	2000      	movs	r0, #0
 800c282:	f04f 0c0a 	mov.w	ip, #10
 800c286:	4621      	mov	r1, r4
 800c288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c28c:	3b30      	subs	r3, #48	; 0x30
 800c28e:	2b09      	cmp	r3, #9
 800c290:	d94d      	bls.n	800c32e <_vfiprintf_r+0x1a6>
 800c292:	b1b0      	cbz	r0, 800c2c2 <_vfiprintf_r+0x13a>
 800c294:	9207      	str	r2, [sp, #28]
 800c296:	e014      	b.n	800c2c2 <_vfiprintf_r+0x13a>
 800c298:	eba0 0308 	sub.w	r3, r0, r8
 800c29c:	fa09 f303 	lsl.w	r3, r9, r3
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	9304      	str	r3, [sp, #16]
 800c2a4:	46a2      	mov	sl, r4
 800c2a6:	e7d2      	b.n	800c24e <_vfiprintf_r+0xc6>
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	1d19      	adds	r1, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9103      	str	r1, [sp, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bfbb      	ittet	lt
 800c2b4:	425b      	neglt	r3, r3
 800c2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c2ba:	9307      	strge	r3, [sp, #28]
 800c2bc:	9307      	strlt	r3, [sp, #28]
 800c2be:	bfb8      	it	lt
 800c2c0:	9204      	strlt	r2, [sp, #16]
 800c2c2:	7823      	ldrb	r3, [r4, #0]
 800c2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800c2c6:	d10c      	bne.n	800c2e2 <_vfiprintf_r+0x15a>
 800c2c8:	7863      	ldrb	r3, [r4, #1]
 800c2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c2cc:	d134      	bne.n	800c338 <_vfiprintf_r+0x1b0>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d1a      	adds	r2, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9203      	str	r2, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfb8      	it	lt
 800c2da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2de:	3402      	adds	r4, #2
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c3b8 <_vfiprintf_r+0x230>
 800c2e6:	7821      	ldrb	r1, [r4, #0]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	f7f3 ff70 	bl	80001d0 <memchr>
 800c2f0:	b138      	cbz	r0, 800c302 <_vfiprintf_r+0x17a>
 800c2f2:	9b04      	ldr	r3, [sp, #16]
 800c2f4:	eba0 000a 	sub.w	r0, r0, sl
 800c2f8:	2240      	movs	r2, #64	; 0x40
 800c2fa:	4082      	lsls	r2, r0
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	3401      	adds	r4, #1
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c306:	4829      	ldr	r0, [pc, #164]	; (800c3ac <_vfiprintf_r+0x224>)
 800c308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c30c:	2206      	movs	r2, #6
 800c30e:	f7f3 ff5f 	bl	80001d0 <memchr>
 800c312:	2800      	cmp	r0, #0
 800c314:	d03f      	beq.n	800c396 <_vfiprintf_r+0x20e>
 800c316:	4b26      	ldr	r3, [pc, #152]	; (800c3b0 <_vfiprintf_r+0x228>)
 800c318:	bb1b      	cbnz	r3, 800c362 <_vfiprintf_r+0x1da>
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	3307      	adds	r3, #7
 800c31e:	f023 0307 	bic.w	r3, r3, #7
 800c322:	3308      	adds	r3, #8
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c328:	443b      	add	r3, r7
 800c32a:	9309      	str	r3, [sp, #36]	; 0x24
 800c32c:	e768      	b.n	800c200 <_vfiprintf_r+0x78>
 800c32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c332:	460c      	mov	r4, r1
 800c334:	2001      	movs	r0, #1
 800c336:	e7a6      	b.n	800c286 <_vfiprintf_r+0xfe>
 800c338:	2300      	movs	r3, #0
 800c33a:	3401      	adds	r4, #1
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	4619      	mov	r1, r3
 800c340:	f04f 0c0a 	mov.w	ip, #10
 800c344:	4620      	mov	r0, r4
 800c346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c34a:	3a30      	subs	r2, #48	; 0x30
 800c34c:	2a09      	cmp	r2, #9
 800c34e:	d903      	bls.n	800c358 <_vfiprintf_r+0x1d0>
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0c6      	beq.n	800c2e2 <_vfiprintf_r+0x15a>
 800c354:	9105      	str	r1, [sp, #20]
 800c356:	e7c4      	b.n	800c2e2 <_vfiprintf_r+0x15a>
 800c358:	fb0c 2101 	mla	r1, ip, r1, r2
 800c35c:	4604      	mov	r4, r0
 800c35e:	2301      	movs	r3, #1
 800c360:	e7f0      	b.n	800c344 <_vfiprintf_r+0x1bc>
 800c362:	ab03      	add	r3, sp, #12
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	462a      	mov	r2, r5
 800c368:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <_vfiprintf_r+0x22c>)
 800c36a:	a904      	add	r1, sp, #16
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7fd fe4b 	bl	800a008 <_printf_float>
 800c372:	4607      	mov	r7, r0
 800c374:	1c78      	adds	r0, r7, #1
 800c376:	d1d6      	bne.n	800c326 <_vfiprintf_r+0x19e>
 800c378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c37a:	07d9      	lsls	r1, r3, #31
 800c37c:	d405      	bmi.n	800c38a <_vfiprintf_r+0x202>
 800c37e:	89ab      	ldrh	r3, [r5, #12]
 800c380:	059a      	lsls	r2, r3, #22
 800c382:	d402      	bmi.n	800c38a <_vfiprintf_r+0x202>
 800c384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c386:	f7fe fc90 	bl	800acaa <__retarget_lock_release_recursive>
 800c38a:	89ab      	ldrh	r3, [r5, #12]
 800c38c:	065b      	lsls	r3, r3, #25
 800c38e:	f53f af1d 	bmi.w	800c1cc <_vfiprintf_r+0x44>
 800c392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c394:	e71c      	b.n	800c1d0 <_vfiprintf_r+0x48>
 800c396:	ab03      	add	r3, sp, #12
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	462a      	mov	r2, r5
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <_vfiprintf_r+0x22c>)
 800c39e:	a904      	add	r1, sp, #16
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7fe f8d5 	bl	800a550 <_printf_i>
 800c3a6:	e7e4      	b.n	800c372 <_vfiprintf_r+0x1ea>
 800c3a8:	0800ca64 	.word	0x0800ca64
 800c3ac:	0800ca6e 	.word	0x0800ca6e
 800c3b0:	0800a009 	.word	0x0800a009
 800c3b4:	0800c163 	.word	0x0800c163
 800c3b8:	0800ca6a 	.word	0x0800ca6a

0800c3bc <__sflush_r>:
 800c3bc:	898a      	ldrh	r2, [r1, #12]
 800c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	0710      	lsls	r0, r2, #28
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	d458      	bmi.n	800c47c <__sflush_r+0xc0>
 800c3ca:	684b      	ldr	r3, [r1, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	dc05      	bgt.n	800c3dc <__sflush_r+0x20>
 800c3d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	dc02      	bgt.n	800c3dc <__sflush_r+0x20>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	d0f9      	beq.n	800c3d6 <__sflush_r+0x1a>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3e8:	682f      	ldr	r7, [r5, #0]
 800c3ea:	6a21      	ldr	r1, [r4, #32]
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	d032      	beq.n	800c456 <__sflush_r+0x9a>
 800c3f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	075a      	lsls	r2, r3, #29
 800c3f6:	d505      	bpl.n	800c404 <__sflush_r+0x48>
 800c3f8:	6863      	ldr	r3, [r4, #4]
 800c3fa:	1ac0      	subs	r0, r0, r3
 800c3fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3fe:	b10b      	cbz	r3, 800c404 <__sflush_r+0x48>
 800c400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c402:	1ac0      	subs	r0, r0, r3
 800c404:	2300      	movs	r3, #0
 800c406:	4602      	mov	r2, r0
 800c408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c40a:	6a21      	ldr	r1, [r4, #32]
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b0      	blx	r6
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	d106      	bne.n	800c424 <__sflush_r+0x68>
 800c416:	6829      	ldr	r1, [r5, #0]
 800c418:	291d      	cmp	r1, #29
 800c41a:	d82b      	bhi.n	800c474 <__sflush_r+0xb8>
 800c41c:	4a29      	ldr	r2, [pc, #164]	; (800c4c4 <__sflush_r+0x108>)
 800c41e:	410a      	asrs	r2, r1
 800c420:	07d6      	lsls	r6, r2, #31
 800c422:	d427      	bmi.n	800c474 <__sflush_r+0xb8>
 800c424:	2200      	movs	r2, #0
 800c426:	6062      	str	r2, [r4, #4]
 800c428:	04d9      	lsls	r1, r3, #19
 800c42a:	6922      	ldr	r2, [r4, #16]
 800c42c:	6022      	str	r2, [r4, #0]
 800c42e:	d504      	bpl.n	800c43a <__sflush_r+0x7e>
 800c430:	1c42      	adds	r2, r0, #1
 800c432:	d101      	bne.n	800c438 <__sflush_r+0x7c>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b903      	cbnz	r3, 800c43a <__sflush_r+0x7e>
 800c438:	6560      	str	r0, [r4, #84]	; 0x54
 800c43a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c43c:	602f      	str	r7, [r5, #0]
 800c43e:	2900      	cmp	r1, #0
 800c440:	d0c9      	beq.n	800c3d6 <__sflush_r+0x1a>
 800c442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c446:	4299      	cmp	r1, r3
 800c448:	d002      	beq.n	800c450 <__sflush_r+0x94>
 800c44a:	4628      	mov	r0, r5
 800c44c:	f7ff faaa 	bl	800b9a4 <_free_r>
 800c450:	2000      	movs	r0, #0
 800c452:	6360      	str	r0, [r4, #52]	; 0x34
 800c454:	e7c0      	b.n	800c3d8 <__sflush_r+0x1c>
 800c456:	2301      	movs	r3, #1
 800c458:	4628      	mov	r0, r5
 800c45a:	47b0      	blx	r6
 800c45c:	1c41      	adds	r1, r0, #1
 800c45e:	d1c8      	bne.n	800c3f2 <__sflush_r+0x36>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0c5      	beq.n	800c3f2 <__sflush_r+0x36>
 800c466:	2b1d      	cmp	r3, #29
 800c468:	d001      	beq.n	800c46e <__sflush_r+0xb2>
 800c46a:	2b16      	cmp	r3, #22
 800c46c:	d101      	bne.n	800c472 <__sflush_r+0xb6>
 800c46e:	602f      	str	r7, [r5, #0]
 800c470:	e7b1      	b.n	800c3d6 <__sflush_r+0x1a>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	e7ad      	b.n	800c3d8 <__sflush_r+0x1c>
 800c47c:	690f      	ldr	r7, [r1, #16]
 800c47e:	2f00      	cmp	r7, #0
 800c480:	d0a9      	beq.n	800c3d6 <__sflush_r+0x1a>
 800c482:	0793      	lsls	r3, r2, #30
 800c484:	680e      	ldr	r6, [r1, #0]
 800c486:	bf08      	it	eq
 800c488:	694b      	ldreq	r3, [r1, #20]
 800c48a:	600f      	str	r7, [r1, #0]
 800c48c:	bf18      	it	ne
 800c48e:	2300      	movne	r3, #0
 800c490:	eba6 0807 	sub.w	r8, r6, r7
 800c494:	608b      	str	r3, [r1, #8]
 800c496:	f1b8 0f00 	cmp.w	r8, #0
 800c49a:	dd9c      	ble.n	800c3d6 <__sflush_r+0x1a>
 800c49c:	6a21      	ldr	r1, [r4, #32]
 800c49e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4a0:	4643      	mov	r3, r8
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b0      	blx	r6
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dc06      	bgt.n	800c4ba <__sflush_r+0xfe>
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b8:	e78e      	b.n	800c3d8 <__sflush_r+0x1c>
 800c4ba:	4407      	add	r7, r0
 800c4bc:	eba8 0800 	sub.w	r8, r8, r0
 800c4c0:	e7e9      	b.n	800c496 <__sflush_r+0xda>
 800c4c2:	bf00      	nop
 800c4c4:	dfbffffe 	.word	0xdfbffffe

0800c4c8 <_fflush_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	690b      	ldr	r3, [r1, #16]
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	b913      	cbnz	r3, 800c4d8 <_fflush_r+0x10>
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	b118      	cbz	r0, 800c4e2 <_fflush_r+0x1a>
 800c4da:	6a03      	ldr	r3, [r0, #32]
 800c4dc:	b90b      	cbnz	r3, 800c4e2 <_fflush_r+0x1a>
 800c4de:	f7fe f9d3 	bl	800a888 <__sinit>
 800c4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0f3      	beq.n	800c4d2 <_fflush_r+0xa>
 800c4ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4ec:	07d0      	lsls	r0, r2, #31
 800c4ee:	d404      	bmi.n	800c4fa <_fflush_r+0x32>
 800c4f0:	0599      	lsls	r1, r3, #22
 800c4f2:	d402      	bmi.n	800c4fa <_fflush_r+0x32>
 800c4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4f6:	f7fe fbd7 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	f7ff ff5d 	bl	800c3bc <__sflush_r>
 800c502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c504:	07da      	lsls	r2, r3, #31
 800c506:	4605      	mov	r5, r0
 800c508:	d4e4      	bmi.n	800c4d4 <_fflush_r+0xc>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	059b      	lsls	r3, r3, #22
 800c50e:	d4e1      	bmi.n	800c4d4 <_fflush_r+0xc>
 800c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c512:	f7fe fbca 	bl	800acaa <__retarget_lock_release_recursive>
 800c516:	e7dd      	b.n	800c4d4 <_fflush_r+0xc>

0800c518 <__swhatbuf_r>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	460c      	mov	r4, r1
 800c51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c520:	2900      	cmp	r1, #0
 800c522:	b096      	sub	sp, #88	; 0x58
 800c524:	4615      	mov	r5, r2
 800c526:	461e      	mov	r6, r3
 800c528:	da0d      	bge.n	800c546 <__swhatbuf_r+0x2e>
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c530:	f04f 0100 	mov.w	r1, #0
 800c534:	bf0c      	ite	eq
 800c536:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c53a:	2340      	movne	r3, #64	; 0x40
 800c53c:	2000      	movs	r0, #0
 800c53e:	6031      	str	r1, [r6, #0]
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	b016      	add	sp, #88	; 0x58
 800c544:	bd70      	pop	{r4, r5, r6, pc}
 800c546:	466a      	mov	r2, sp
 800c548:	f000 f87c 	bl	800c644 <_fstat_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dbec      	blt.n	800c52a <__swhatbuf_r+0x12>
 800c550:	9901      	ldr	r1, [sp, #4]
 800c552:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c556:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c55a:	4259      	negs	r1, r3
 800c55c:	4159      	adcs	r1, r3
 800c55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c562:	e7eb      	b.n	800c53c <__swhatbuf_r+0x24>

0800c564 <__smakebuf_r>:
 800c564:	898b      	ldrh	r3, [r1, #12]
 800c566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c568:	079d      	lsls	r5, r3, #30
 800c56a:	4606      	mov	r6, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	d507      	bpl.n	800c580 <__smakebuf_r+0x1c>
 800c570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	2301      	movs	r3, #1
 800c57a:	6163      	str	r3, [r4, #20]
 800c57c:	b002      	add	sp, #8
 800c57e:	bd70      	pop	{r4, r5, r6, pc}
 800c580:	ab01      	add	r3, sp, #4
 800c582:	466a      	mov	r2, sp
 800c584:	f7ff ffc8 	bl	800c518 <__swhatbuf_r>
 800c588:	9900      	ldr	r1, [sp, #0]
 800c58a:	4605      	mov	r5, r0
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fd fc0f 	bl	8009db0 <_malloc_r>
 800c592:	b948      	cbnz	r0, 800c5a8 <__smakebuf_r+0x44>
 800c594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d4ef      	bmi.n	800c57c <__smakebuf_r+0x18>
 800c59c:	f023 0303 	bic.w	r3, r3, #3
 800c5a0:	f043 0302 	orr.w	r3, r3, #2
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	e7e3      	b.n	800c570 <__smakebuf_r+0xc>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	6020      	str	r0, [r4, #0]
 800c5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b0:	81a3      	strh	r3, [r4, #12]
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	6163      	str	r3, [r4, #20]
 800c5b6:	9b01      	ldr	r3, [sp, #4]
 800c5b8:	6120      	str	r0, [r4, #16]
 800c5ba:	b15b      	cbz	r3, 800c5d4 <__smakebuf_r+0x70>
 800c5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f000 f851 	bl	800c668 <_isatty_r>
 800c5c6:	b128      	cbz	r0, 800c5d4 <__smakebuf_r+0x70>
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	f043 0301 	orr.w	r3, r3, #1
 800c5d2:	81a3      	strh	r3, [r4, #12]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	431d      	orrs	r5, r3
 800c5d8:	81a5      	strh	r5, [r4, #12]
 800c5da:	e7cf      	b.n	800c57c <__smakebuf_r+0x18>

0800c5dc <_putc_r>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	460d      	mov	r5, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	b118      	cbz	r0, 800c5ee <_putc_r+0x12>
 800c5e6:	6a03      	ldr	r3, [r0, #32]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <_putc_r+0x12>
 800c5ea:	f7fe f94d 	bl	800a888 <__sinit>
 800c5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f0:	07d8      	lsls	r0, r3, #31
 800c5f2:	d405      	bmi.n	800c600 <_putc_r+0x24>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	0599      	lsls	r1, r3, #22
 800c5f8:	d402      	bmi.n	800c600 <_putc_r+0x24>
 800c5fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5fc:	f7fe fb54 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800c600:	68a3      	ldr	r3, [r4, #8]
 800c602:	3b01      	subs	r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	60a3      	str	r3, [r4, #8]
 800c608:	da05      	bge.n	800c616 <_putc_r+0x3a>
 800c60a:	69a2      	ldr	r2, [r4, #24]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	db12      	blt.n	800c636 <_putc_r+0x5a>
 800c610:	b2eb      	uxtb	r3, r5
 800c612:	2b0a      	cmp	r3, #10
 800c614:	d00f      	beq.n	800c636 <_putc_r+0x5a>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	6022      	str	r2, [r4, #0]
 800c61c:	701d      	strb	r5, [r3, #0]
 800c61e:	b2ed      	uxtb	r5, r5
 800c620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c622:	07da      	lsls	r2, r3, #31
 800c624:	d405      	bmi.n	800c632 <_putc_r+0x56>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	059b      	lsls	r3, r3, #22
 800c62a:	d402      	bmi.n	800c632 <_putc_r+0x56>
 800c62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c62e:	f7fe fb3c 	bl	800acaa <__retarget_lock_release_recursive>
 800c632:	4628      	mov	r0, r5
 800c634:	bd70      	pop	{r4, r5, r6, pc}
 800c636:	4629      	mov	r1, r5
 800c638:	4622      	mov	r2, r4
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7fe fa13 	bl	800aa66 <__swbuf_r>
 800c640:	4605      	mov	r5, r0
 800c642:	e7ed      	b.n	800c620 <_putc_r+0x44>

0800c644 <_fstat_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	; (800c664 <_fstat_r+0x20>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f7f5 fa1a 	bl	8001a8a <_fstat>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	d102      	bne.n	800c660 <_fstat_r+0x1c>
 800c65a:	682b      	ldr	r3, [r5, #0]
 800c65c:	b103      	cbz	r3, 800c660 <_fstat_r+0x1c>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop
 800c664:	20001788 	.word	0x20001788

0800c668 <_isatty_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d06      	ldr	r5, [pc, #24]	; (800c684 <_isatty_r+0x1c>)
 800c66c:	2300      	movs	r3, #0
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	602b      	str	r3, [r5, #0]
 800c674:	f7f5 fa19 	bl	8001aaa <_isatty>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_isatty_r+0x1a>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_isatty_r+0x1a>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20001788 	.word	0x20001788

0800c688 <memcpy>:
 800c688:	440a      	add	r2, r1
 800c68a:	4291      	cmp	r1, r2
 800c68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c690:	d100      	bne.n	800c694 <memcpy+0xc>
 800c692:	4770      	bx	lr
 800c694:	b510      	push	{r4, lr}
 800c696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c69e:	4291      	cmp	r1, r2
 800c6a0:	d1f9      	bne.n	800c696 <memcpy+0xe>
 800c6a2:	bd10      	pop	{r4, pc}

0800c6a4 <__assert_func>:
 800c6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <__assert_func+0x2c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	68d8      	ldr	r0, [r3, #12]
 800c6b2:	b14c      	cbz	r4, 800c6c8 <__assert_func+0x24>
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <__assert_func+0x30>)
 800c6b6:	9100      	str	r1, [sp, #0]
 800c6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6bc:	4906      	ldr	r1, [pc, #24]	; (800c6d8 <__assert_func+0x34>)
 800c6be:	462b      	mov	r3, r5
 800c6c0:	f000 f844 	bl	800c74c <fiprintf>
 800c6c4:	f000 f854 	bl	800c770 <abort>
 800c6c8:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <__assert_func+0x38>)
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	e7f3      	b.n	800c6b6 <__assert_func+0x12>
 800c6ce:	bf00      	nop
 800c6d0:	20000084 	.word	0x20000084
 800c6d4:	0800ca7f 	.word	0x0800ca7f
 800c6d8:	0800ca8c 	.word	0x0800ca8c
 800c6dc:	0800caba 	.word	0x0800caba

0800c6e0 <_calloc_r>:
 800c6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6e2:	fba1 2402 	umull	r2, r4, r1, r2
 800c6e6:	b94c      	cbnz	r4, 800c6fc <_calloc_r+0x1c>
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	f7fd fb60 	bl	8009db0 <_malloc_r>
 800c6f0:	9a01      	ldr	r2, [sp, #4]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	b930      	cbnz	r0, 800c704 <_calloc_r+0x24>
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	b003      	add	sp, #12
 800c6fa:	bd30      	pop	{r4, r5, pc}
 800c6fc:	220c      	movs	r2, #12
 800c6fe:	6002      	str	r2, [r0, #0]
 800c700:	2500      	movs	r5, #0
 800c702:	e7f8      	b.n	800c6f6 <_calloc_r+0x16>
 800c704:	4621      	mov	r1, r4
 800c706:	f7fe fa43 	bl	800ab90 <memset>
 800c70a:	e7f4      	b.n	800c6f6 <_calloc_r+0x16>

0800c70c <__ascii_mbtowc>:
 800c70c:	b082      	sub	sp, #8
 800c70e:	b901      	cbnz	r1, 800c712 <__ascii_mbtowc+0x6>
 800c710:	a901      	add	r1, sp, #4
 800c712:	b142      	cbz	r2, 800c726 <__ascii_mbtowc+0x1a>
 800c714:	b14b      	cbz	r3, 800c72a <__ascii_mbtowc+0x1e>
 800c716:	7813      	ldrb	r3, [r2, #0]
 800c718:	600b      	str	r3, [r1, #0]
 800c71a:	7812      	ldrb	r2, [r2, #0]
 800c71c:	1e10      	subs	r0, r2, #0
 800c71e:	bf18      	it	ne
 800c720:	2001      	movne	r0, #1
 800c722:	b002      	add	sp, #8
 800c724:	4770      	bx	lr
 800c726:	4610      	mov	r0, r2
 800c728:	e7fb      	b.n	800c722 <__ascii_mbtowc+0x16>
 800c72a:	f06f 0001 	mvn.w	r0, #1
 800c72e:	e7f8      	b.n	800c722 <__ascii_mbtowc+0x16>

0800c730 <__ascii_wctomb>:
 800c730:	b149      	cbz	r1, 800c746 <__ascii_wctomb+0x16>
 800c732:	2aff      	cmp	r2, #255	; 0xff
 800c734:	bf85      	ittet	hi
 800c736:	238a      	movhi	r3, #138	; 0x8a
 800c738:	6003      	strhi	r3, [r0, #0]
 800c73a:	700a      	strbls	r2, [r1, #0]
 800c73c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c740:	bf98      	it	ls
 800c742:	2001      	movls	r0, #1
 800c744:	4770      	bx	lr
 800c746:	4608      	mov	r0, r1
 800c748:	4770      	bx	lr
	...

0800c74c <fiprintf>:
 800c74c:	b40e      	push	{r1, r2, r3}
 800c74e:	b503      	push	{r0, r1, lr}
 800c750:	4601      	mov	r1, r0
 800c752:	ab03      	add	r3, sp, #12
 800c754:	4805      	ldr	r0, [pc, #20]	; (800c76c <fiprintf+0x20>)
 800c756:	f853 2b04 	ldr.w	r2, [r3], #4
 800c75a:	6800      	ldr	r0, [r0, #0]
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	f7ff fd13 	bl	800c188 <_vfiprintf_r>
 800c762:	b002      	add	sp, #8
 800c764:	f85d eb04 	ldr.w	lr, [sp], #4
 800c768:	b003      	add	sp, #12
 800c76a:	4770      	bx	lr
 800c76c:	20000084 	.word	0x20000084

0800c770 <abort>:
 800c770:	b508      	push	{r3, lr}
 800c772:	2006      	movs	r0, #6
 800c774:	f000 f82c 	bl	800c7d0 <raise>
 800c778:	2001      	movs	r0, #1
 800c77a:	f7f5 f937 	bl	80019ec <_exit>

0800c77e <_raise_r>:
 800c77e:	291f      	cmp	r1, #31
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4604      	mov	r4, r0
 800c784:	460d      	mov	r5, r1
 800c786:	d904      	bls.n	800c792 <_raise_r+0x14>
 800c788:	2316      	movs	r3, #22
 800c78a:	6003      	str	r3, [r0, #0]
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c794:	b112      	cbz	r2, 800c79c <_raise_r+0x1e>
 800c796:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c79a:	b94b      	cbnz	r3, 800c7b0 <_raise_r+0x32>
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 f831 	bl	800c804 <_getpid_r>
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	4601      	mov	r1, r0
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ac:	f000 b818 	b.w	800c7e0 <_kill_r>
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d00a      	beq.n	800c7ca <_raise_r+0x4c>
 800c7b4:	1c59      	adds	r1, r3, #1
 800c7b6:	d103      	bne.n	800c7c0 <_raise_r+0x42>
 800c7b8:	2316      	movs	r3, #22
 800c7ba:	6003      	str	r3, [r0, #0]
 800c7bc:	2001      	movs	r0, #1
 800c7be:	e7e7      	b.n	800c790 <_raise_r+0x12>
 800c7c0:	2400      	movs	r4, #0
 800c7c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	4798      	blx	r3
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e7e0      	b.n	800c790 <_raise_r+0x12>
	...

0800c7d0 <raise>:
 800c7d0:	4b02      	ldr	r3, [pc, #8]	; (800c7dc <raise+0xc>)
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f7ff bfd2 	b.w	800c77e <_raise_r>
 800c7da:	bf00      	nop
 800c7dc:	20000084 	.word	0x20000084

0800c7e0 <_kill_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	; (800c800 <_kill_r+0x20>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	602b      	str	r3, [r5, #0]
 800c7ee:	f7f5 f8ed 	bl	80019cc <_kill>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d102      	bne.n	800c7fc <_kill_r+0x1c>
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	b103      	cbz	r3, 800c7fc <_kill_r+0x1c>
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	bd38      	pop	{r3, r4, r5, pc}
 800c7fe:	bf00      	nop
 800c800:	20001788 	.word	0x20001788

0800c804 <_getpid_r>:
 800c804:	f7f5 b8da 	b.w	80019bc <_getpid>

0800c808 <_init>:
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	bf00      	nop
 800c80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80e:	bc08      	pop	{r3}
 800c810:	469e      	mov	lr, r3
 800c812:	4770      	bx	lr

0800c814 <_fini>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	bf00      	nop
 800c818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81a:	bc08      	pop	{r3}
 800c81c:	469e      	mov	lr, r3
 800c81e:	4770      	bx	lr
